<html>
<head>
<title>seShareReadObject</title>
<link rel="stylesheet" href="semanualstyles.css" type="text/css">
<style type="text/css">
 p { margin-top: 0; margin-bottom: 0; }
</style>
<script language="JavaScript" src="TrueHelp.js"></script>
</head>
<body onload="thload()">
<div id=ienav>
<ilayer id=nsnav>
<br>
<center>
<p class=normal><a href="seisdkc-toc.htm" target="left">contents</a> &nbsp; <a href="seisdkc-index.htm" target="left">index</a> &nbsp; <a href="TH_50.htm">previous</a> &nbsp; <a href="TH_52.htm">next</a></p>
</center>
<br>
<hr noshade size=1>
</ilayer>
</div>
<p class=sereffunclevel3>seShareReadObject</p>
<p class=sereffunclevel3-p>&nbsp;</p>
<table cellpadding=0>
<tr>
<td valign=top style="width: 0.922222in">
<p class=serefkey>syntax:</p></td>
<td valign=top style="width: 4.15278in">
<p class=sesyntax>&nbsp;&nbsp;&nbsp;sebool</p>
<p class=sesyntax>seShareReadObject(secontext&nbsp;se,seobject&nbsp;object);</p></td>
</tr>
<tr>
<td valign=top style="width: 0.922222in">
<p class=serefkey>where:</p></td>
<td valign=top style="width: 4.15278in">
<p class=senormalpara><span class=secodephrase>se</span> the context the object belongs to</p>
<p class=senormalpara-p>&nbsp;</p>
<p class=senormalpara><span class=secodephrase>object</span> the object to make shared read</p><p class=senormalpara-p>&nbsp;</p>
</td>
</tr>
<tr>
<td valign=top style="width: 0.922222in">
<p class=serefkey>return:</p></td>
<td valign=top style="width: 4.15278in">
<p class=senormalpara>This function returns <span class=secodephrase>TRUE</span> if the object was successfully shared for reading, <span class=secodephrase>FALSE</span> if it could not be.</p><p class=senormalpara-p>&nbsp;</p>
</td>
</tr>
<tr>
<td valign=top style="width: 0.922222in">
<p class=serefkey>description:</p></td>
<td valign=top style="width: 4.15278in">
<p class=senormalpara>Calling this routine makes the given object, and all its children, read-only and shareable. The object handle no longer follows the usual ScriptEase lifetime rules but rather is valid until the ScriptEase engine is cleaned up using the <span class=secodephrase>seTerminate</span> call. All shared objects exist for the life of the program. The <span class=secodephrase>seobject</span> handle passed to the routine can be used from then on in any context.</p>
<p class=senormalpara-p>&nbsp;</p>
<p class=senormalpara>When using this routine, you must remember that any object and all its children are shared. This means the object's base class, which it refers to via its <span class=secodephrase>_prototype</span> is also shared. If you have a complicated object hierarchy, you may end up sharing a large number of objects. All these objects will persist until the program terminates the ScriptEase engine. Also remember that shared objects and their children become read-only to all contexts, including the one that originally shared them.</p>
<p class=senormalpara-p>&nbsp;</p>
<p class=senormalpara>Objects can only be made sharable when there is a single context existing. You must mark all objects you wish to share before making additional contexts. This routine will fail once two or more contexts exist.</p><p class=senormalpara-p>&nbsp;</p>
</td>
</tr>
<tr>
<td valign=top style="width: 0.922222in">
<p class=serefkey>see:</p></td>
</td>
</tr>
</table>
<hr noshade size=1>
<p class=normal><a href="TH_52.htm"><img src="button.png" border=0></a><a href="TH_52.htm" style="text-decoration:none;">VARIABLE WRITING</a></p>
<p>
</body>
</html>