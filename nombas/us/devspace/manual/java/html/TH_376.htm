<html>
<head>
<title>Terminology for objects</title>
<link rel="stylesheet" href="semanualstyles.css" type="text/css">
<style type="text/css">
 p { margin-top: 0; margin-bottom: 0; }
</style>
<script language="JavaScript" src="TrueHelp.js"></script>
</head>
<body onload="thload()">
<div id=ienav>
<ilayer id=nsnav>
<br>
<center>
<p class=normal><a href="seisdkj-toc.htm" target="left">contents</a> &nbsp; <a href="seisdkj-index.htm" target="left">index</a> &nbsp; <a href="TH_375.htm">previous</a> &nbsp; <a href="TH_377.htm">next</a></p>
</center>
<br>
<hr noshade size=1>
</ilayer>
</div>
<p class=heading-3>Terminology for objects</p>
<p class=heading-3-p>&nbsp;</p>
<p class=senormalpara>The terminology used to describe the methods and properties of objects is not consistent in the programming community. The following list shows three common naming schemes.</p>
<p class=senormalpara-p>&nbsp;</p>
<p class=list-bullet>&#8226;</p><p class=list-bullet-tab1>Object members<br>
Object methods<br>
Object properties</p>
<p class=normal>&nbsp;</p>
<p class=list-bullet>&#8226;</p><p class=list-bullet-tab1>Object  properties<br>
Object methods<br>
Object attributes</p>
<p class=normal>&nbsp;</p>
<p class=list-bullet>&#8226;</p><p class=list-bullet-tab1>Object properties<br>
Object methods<br>
Object properties</p>
<p class=normal>&nbsp;</p>
<p class=senormalpara>In the first scheme uses "members" as the term to encompass "methods" and "properties". The second scheme uses "properties" as the term to encompass "methods" and "attributes". The third scheme uses "properties" as the term to encompass "methods" and "properties". The order in which the schemes are presented is in order from least ambiguous to most ambiguous. Unfortunately this order does not conform to age of use of the schemes nor to the popularity of the schemes. As a result of the lack of consensus in the programming community, all of these naming schemes are represented in ScriptEase documentation, though the first one is preferred because it is not ambiguous. The following paragraphs explain these schemes in more detail.</p>
<p class=senormalpara-p>&nbsp;</p>
<p class=senormalpara>The first scheme uses the term "member" for the both functions and data. A "method" is a function attached to an object and a "property" is a datum attached to an object. This scheme has the advantages of being clear and of using common terminology. The disadvantage is that the use of "members" to refer to "methods" and "properties" is not the most common. This scheme is preferred in ScriptEase documentation for a couple of reasons. First, objects are thought of as collections of routines and data, which is an intuitive and useful metaphor for describing objects. The term "member" fits nicely with the metaphor and is distinct from the terms for items in the collection. Second, the use of the terms "method" and "property" for the routines and data attached to or collected in an object is the most common usage.</p>
<p class=senormalpara-p>&nbsp;</p>
<p class=senormalpara>The second scheme uses the term "property" for the both functions and data. A "method" is a function attached to an object and an "attribute" is a datum attached to an object. This scheme has the advantages of being clear and of using common terminology. The disadvantage is that the use of "attributes" for the data of objects is not the most common.</p>
<p class=senormalpara-p>&nbsp;</p>
<p class=senormalpara>The third scheme uses the term "property" for the both functions and data. A "method" is a function attached to an object and a "property" is a datum attached to an object. This scheme is inherently confusing because it uses the same term "property" for two different concepts about an object.</p>
<p class=senormalpara-p>&nbsp;</p>
<hr noshade size=1>
<p class=normal><a href="TH_377.htm"><img src="button.png" border=0></a><a href="TH_377.htm" style="text-decoration:none;">Predefining objects with constructor functions</a></p>
<p>
</body>
</html>