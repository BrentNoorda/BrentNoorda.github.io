<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 FINAL//EN">
<HTML><!-- #BeginTemplate "/us/Templates/erratapage.dwt" -->
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<TITLE>ScriptEase ISDK DevSpace</TITLE>
<!-- begin metaTags -->
<META NAME="keywords" CONTENT="javascript,ecmascript,ecma,scriptease,jscript,scripting,nombas,isdk,sedesk,web application development,embedded devices,distributed computing,peer-to-peer,p2p,peer,data mining,javascript.com,cycletraders,integrated sdk,script ease,java,c++,c,simplicity,power,palm,windows ce,integration: sdk,integration:sdk,scriptease:desktop,scriptease: desktop,se:desktop,se:desk,se:isdk, se: isdk,development tools,devtools">
<META HTTP-EQUIV="DESCRIPTION" CONTENT="Nombas delivers simplicity and power through scripting by providing market-leading development tools and software for JavaScript and ECMAScript.">
<!-- end metaTags -->
<!-- begin navbar includes -->
<SCRIPT language=JavaScript1.2>
  navbarPath = '../../../';
</SCRIPT>
<SCRIPT language=JavaScript1.2 SRC="../../../navbarData.js"></SCRIPT>
<SCRIPT language=JavaScript1.2 SRC="../../../navbarMenu.js"></SCRIPT>
<SCRIPT language=JavaScript SRC="../../../imgRollover.js"></SCRIPT>
<!-- end navbar includes -->
<!-- begin style and icon definition -->
<LINK REL="SHORTCUT ICON" HREF="../../../nombas.ico">
<STYLE>
A:hover { color:#941810;}
</STYLE>
<!-- end style and icon definition -->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-1754630-10']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
</HEAD>
<BODY BGCOLOR="#06086F" LINK="#0000FF" VLINK="#800080" TEXT="#000000" TOPMARGIN=0 LEFTMARGIN=0 MARGINWIDTH=0 MARGINHEIGHT=0>
<table width="632" border="0" cellspacing="0" cellpadding="0">
  <tr>
    <td>
<TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH=213>
  <TR VALIGN=TOP ALIGN=LEFT>
    <TD WIDTH=28 HEIGHT=4><IMG SRC="../../../clearpixel.gif" WIDTH=28 HEIGHT=1 BORDER=0></TD>
    <TD></TD>
  </TR>
  <TR VALIGN=TOP ALIGN=LEFT>
    <TD HEIGHT=60></TD>
          <TD WIDTH=185 ALIGN=LEFT VALIGN=TOP><A HREF="../../../index.htm"><IMG ID="Picture1" HEIGHT=60 WIDTH=185 SRC="../../../logo.gif" BORDER=0 alt="Nombas Homepage"></A></TD>
  </TR>
</TABLE>
    <div id="nombas-legacy"></div>
<TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0>
  <TR VALIGN=TOP ALIGN=LEFT>
    <TD WIDTH=30 HEIGHT=10><IMG SRC="../../../clearpixel.gif" WIDTH=30 HEIGHT=1 BORDER=0></TD>
    <TD></TD>
  </TR>
  <TR VALIGN=TOP ALIGN=LEFT>
    <TD></TD>
    <TD WIDTH=582>
      <TABLE ID="Table1" BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH=582>
        <TR>
          <TD WIDTH=97>
                  <P><A HREF="../../../scripting/scripting.htm"
                            onmouseover="changeImages('scripting', '../../../htab_scripting.gif'); popUp('elMenu1',event); return true;"
onmouseout="changeImages('scripting', '../../../tab_scripting.gif'); popDown('elMenu1'); return true;"
><IMG
                             ID="scripting" HEIGHT=21 WIDTH=97 SRC="../../../tab_scripting.gif" VSPACE=0 HSPACE=0 ALIGN="TOP" BORDER=0 name="scripting" alt="Scripting"></A>
                </TD>
          <TD WIDTH=97>
                  <P><A HREF="../../../products/products.htm"
                            onmouseover="changeImages('products', '../../../htab_products.gif'); popUp('elMenu2',event); return true;"
onmouseout="changeImages('products', '../../../tab_products.gif'); popDown('elMenu2'); return true;"><IMG ID="products"
                             HEIGHT=21 WIDTH=97 SRC="../../../tab_products.gif" VSPACE=0 HSPACE=0 ALIGN="TOP" BORDER=0 name=products alt="Products"></A>
                </TD>
          <TD WIDTH=97>
                  <P><A HREF="../../../purchase/purchase.htm" onmouseover="changeImages('purchase', '../../../htab_purchase.gif');return true;"
onmouseout="changeImages('purchase', '../../../tab_purchase.gif');return true;"><IMG ID="purchase"
                             HEIGHT=21 WIDTH=97 SRC="../../../tab_purchase.gif" VSPACE=0 HSPACE=0 ALIGN="TOP" BORDER=0 name=purchase alt="Purchase"></A>
                </TD>
          <TD WIDTH=97>
                  <P><A HREF="../../../download/ndownload.htm" onmouseover="changeImages('download', '../../../htab_download.gif');return true;"
onmouseout="changeImages('download', '../../../tab_download.gif');return true;"><IMG ID="download"
                             HEIGHT=21 WIDTH=97 SRC="../../../tab_download.gif" VSPACE=0 HSPACE=0 ALIGN="TOP" BORDER=0 name=download alt="Download"></A>
                </TD>
          <TD WIDTH=97>
                  <P><A target="support" HREF="http://support.nombas.com/" onmouseover="changeImages('support', '../../../htab_support.gif'); return true;"
onmouseout="changeImages('support', '../../../tab_support.gif'); return true;"><IMG ID="support"
                             HEIGHT=21 WIDTH=97 SRC="../../../tab_support.gif" VSPACE=0 HSPACE=0 ALIGN="TOP" BORDER=0 name=support alt="Support"></A>
                </TD>
          <TD WIDTH=97>
                  <P><A HREF="../../../company/company.htm"
                            onmouseover="changeImages('company', '../../../htab_company.gif'); popUp('elMenu6',event); return true;"
onmouseout="changeImages('company', '../../../tab_company.gif'); popDown('elMenu6'); return true;"><IMG ID="company"
                             HEIGHT=21 WIDTH=97 SRC="../../../tab_company.gif" VSPACE=0 HSPACE=0 ALIGN="TOP" BORDER=0 name=company alt="Company"></A>
                </TD>
        </TR>
      </TABLE>
    </TD>
  </TR>
</TABLE>
      <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH=100%>
        <TR VALIGN=TOP ALIGN=LEFT>
    <TD WIDTH=5 HEIGHT=20><IMG SRC="../../../clearpixel.gif" WIDTH=5 HEIGHT=1 BORDER=0></TD>
          <TD>
            <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH=100% HEIGHT=20 bgcolor="#FFFFFF">
              <TR ALIGN=LEFT VALIGN=TOP>
          <TD>
                  <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH=100%>
                    <TR VALIGN=TOP ALIGN=LEFT>
                <TD WIDTH=20 HEIGHT=20 ALIGN=LEFT VALIGN=TOP><IMG ID="Picture12" HEIGHT=20 WIDTH=20 SRC="../../../curve_topleft.gif" BORDER=0></TD>
                      <TD><IMG SRC="../../../clearpixel.gif" WIDTH=592 HEIGHT=1 BORDER=0></TD>
                <TD WIDTH=20 ALIGN=LEFT VALIGN=TOP><IMG ID="Picture10" HEIGHT=20 WIDTH=20 SRC="../../../curve_top.gif" BORDER=0></TD>
              </TR>
            </TABLE>
          </TD>
        </TR>
      </TABLE>
    </TD>
  </TR>
</TABLE>
<TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH=637>
  <TR VALIGN=TOP ALIGN=LEFT>
    <TD HEIGHT=471 width="5"></TD>
    <TD COLSPAN=2 height="471">
      <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH=632 HEIGHT=200 bgcolor="#FFFFFF">
        <TR ALIGN=LEFT VALIGN=TOP>
          <TD height="471">
            <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH=516>
              <TR VALIGN=TOP ALIGN=LEFT>
                <TD WIDTH=14 HEIGHT=1><IMG SRC="../../../clearpixel.gif" WIDTH=13 HEIGHT=1 BORDER=0></TD>
                <TD WIDTH=502><IMG SRC="../../../clearpixel.gif" WIDTH=316 HEIGHT=1 BORDER=0></TD>
              </TR>
              <TR VALIGN=TOP ALIGN=LEFT>
                <TD width="14"></TD>
                <TD WIDTH=502><!-- #BeginEditable "hier" -->
                        <P ALIGN=LEFT><A HREF="../../../index.htm"><FONT SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica">Nombas</FONT></A><FONT SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica">
                          &gt; <a HREF="../../index.htm">SE:ISDK DevSpace</a>
                          &gt; <a href="../index.htm">Errata</a> &gt; Integration
                          SDK 4.30x Errata</FONT>
                        <!-- #EndEditable --></TD>
              </TR>
            </TABLE>
            <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH=300>
              <TR VALIGN=TOP ALIGN=LEFT>
                <TD WIDTH=15 HEIGHT=5><IMG SRC="../../../clearpixel.gif" WIDTH=15 HEIGHT=1 BORDER=0></TD>
                <TD></TD>
              </TR>
              <TR VALIGN=TOP ALIGN=LEFT>
                <TD HEIGHT=80></TD>
                <TD WIDTH=600 ALIGN=LEFT VALIGN=TOP><IMG ID="Picture14" HEIGHT=80 WIDTH=600 SRC="../../bnr_devspace.gif" BORDER=0></TD>
              </TR>
              <TR VALIGN=TOP ALIGN=LEFT>
                <TD HEIGHT=368></TD>
                <TD WIDTH=600 ALIGN=LEFT VALIGN=TOP height="368">
                  <table width="100%" border="0">
                    <tr>
                      <td colspan="4" height="9"><img SRC="../../../clearpixel.gif" width="1" height="1"></td>
                    </tr>
                    <tr>
                      <td width="1" height="326">&nbsp;</td>
                            <td valign="top" height="326"><!-- #BeginEditable "main" -->
                              <p><font size="4" face="Verdana, Arial, Helvetica, sans-serif"><b>Integration
                                SDK 4.30x Errata</b></font><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><br>
                                <i><b>Fixes Affecting Users of the ScriptEase
                                ISDKs</b></i></font> </p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a href="#v430g">4.30g
                                  API</a> - latest update: August 3, 2004</font>
                              </ul>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a href="#v430f">4.30f
                                  API</a> - latest update: January 27, 2005</font>
                              </ul>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a href="#v430e">4.30e
                                  API</a> - latest update: March 7, 2002</font>
                              </ul>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a href="#v430d">4.30d
                                  API</a> - latest update: October 6, 2001</font>
                              </ul>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a href="#v430c">4.30c
                                  API</a> - latest update: April 6, 2001</font>
                              </ul>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a href="#v430b">4.30b
                                  API</a> - latest update: May 4, 2001</font>
                              </ul>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a href="#v430a">4.30a
                                  API</a> - latest update: September 19, 2000</font>
                              </ul>
                              <hr width="90%">
                              <br>
                              <font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                              <a name="v430g"></a><br>
                              API Errata, version <b><font size="2" face="Verdana, Arial, Helvetica, sans-serif">4.30g</font></b>
                              (may apply to earlier versions) <br>
                              &nbsp;&nbsp;<b><font size="2" face="Verdana, Arial, Helvetica, sans-serif">New</font></b>,
                              August 3, 2004</font>
                              <ul>
                                <li><a href="#focnphte"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">function object's call() and apply() methods do not properly handle thrown errors</font></a>
                                <li><a href="#scfzl"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">string.concat()
                                  fails when strings are zero-length</font></a>
                                <li><a href="#mrnvr16"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Math.random()
                                  is not very random on systems with 16-bit integers</font></a>
                                <li><a href="#aemg"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">memory
                                  growth and performance loss with AtErrorFunc
                                  callback </font></a>
                                <li><a href="#mlats"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">memory
                                  leak with array.toSource </font></a>
                                <li><a href="#pphliv"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">during
                                  script compilation peephole optimizer accesses
                                  invalid memory</font></a>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#cafp">Alignment
                                  errors with Clib *printf and *scanf floating-point
                                  on HP-UX</a></font>
                                <li><a href="#slnr"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">when
                                  converting numbers to strings, rounding will
                                  not occur in some locales</font></a>
                                <li><a href="#mcpsem"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Stack
                                  corruption on %s error messages</font></a>
                                <li><a href="#sdlconl"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">SElib.dynamicLink()
                                  expects string lengths to remain constant</font></a><font face="Verdana, Arial, Helvetica, sans-serif" size="2">
                                  </font>
                                <li><a href="#gndlbl"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">bad
                                  error message, or crash, when &quot;goto&quot;
                                  statement is not followed by a label</font></a><font face="Verdana, Arial, Helvetica, sans-serif" size="2">
                                  </font>
                                <li><a href="#nogo"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">&quot;goto&quot;
                                  is not standard EcmaScript</font></a><font face="Verdana, Arial, Helvetica, sans-serif" size="2">
                                  </font>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a href="#comole">COMOBJ
                                  leaks resources</a> </font>
                              </ul>
                              <hr width="90%">
                              <br>
                              <font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                              <a name="v430f"></a><br>
                              API Errata, version <b><font size="2" face="Verdana, Arial, Helvetica, sans-serif">4.30f</font></b>
                              (may apply to earlier versions) <br>
                              &nbsp;&nbsp;<b><font size="2" face="Verdana, Arial, Helvetica, sans-serif">New</font></b>,
                              January 27, 2005</font>
                              <ul>
                                <li><a href="#srcwoa"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">string.replace() crashes when only one argument is passed in</font></a>
                                <li><a href="#ctmd"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">comobj
                                  times miscalculate DST</font></a>
                                <li><a href="#scff"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">stack
                                  corruption with long mode parameter to Clib.fopen()
                                  and Clib.freopen()</font></a>
                                <li><a href="#asrt1"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">array
                                  sort return invalid when array.length==1</font></a>
                                <li><a href="#ntpi"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Number
                                  toPrecision() incorrect</font></a><font face="Verdana, Arial, Helvetica, sans-serif" size="2">
                                  updated Dec 11, 2002</font>
                                <li><a href="#opece"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">jsePutString()
                                  may overwrite previous results if JSE_C_EXTENSIONS
                                  is disabled</font></a>
                                <li><a href="#srcnm"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">string.replace
                                  crashes or consumes all memory when replacing
                                  with null string</font></a>
                                <li><a href="#rsts"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">invalid_regexp_instance.toString()
                                  crash</font></a>
                                <li><a href="#mothra"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">sedbc
                                  bugs with long binary data</font></a>
                                <li><a href="#ssres"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">string.split()
                                  incorrect if regular expression used as separator</font></a>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#cucun">useCache
                                  field of Call structure may not be initialized</a></font>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#fpund">func.prototype
                                  undefined if #define JSE_AUTO_OBJECT 0</a></font>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#pid">parseInt()
                                  treating characters &quot;:;&lt;=&gt;?@&quot;
                                  as digits 3 through 9</a></font>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#gisl">Documentation
                                  incorrect about lifetime of jseGetInternalString()
                                  </a></font>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#sszp">string
                                  slice() function is not accepting zero parameters</a></font>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="al0">setting
                                  array length to 0 does not remove all indexed
                                  properties</a></font>
                              </ul>
                              <hr width="90%">
                              <br>
                              <font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                              <a name="v430e"></a><br>
                              API Errata, version <b><font size="2" face="Verdana, Arial, Helvetica, sans-serif">4.30e</font></b>
                              (may apply to earlier versions) <br>
                              &nbsp;&nbsp;<b><font size="2" face="Verdana, Arial, Helvetica, sans-serif">New</font></b>,
                              March 7, 2002 </font>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#strpsk">String
                                  replace may skip matches if replacement string
                                  is null-string (i.e. &quot;&quot;</a>)</font>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#cdb">rare
                                  crashes on memory overwrites using the dynamicBuffer
                                  routines</a></font>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#bjnmidx">Problems
                                  with array lengths and numeric indices that
                                  are large or non-integer</a></font>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#opc">Foo.prototype.constructor
                                  not assigned correctly for all builtin objects</a></font>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#rspng">Array
                                  split() error for negative starting point</a></font>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#mthmnnz">Math.min(+0,-0)
                                  wrongly returns +0</a></font>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#ltmcrsh">Clib.localtime()
                                  and Clib.gmtime() crash on out-of-range dates</a></font>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#nrnan">Number
                                  toString(with_radix) method is not handling
                                  NaN, Infinity, and -Infinity</a></font>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#ngmbd">Invalid
                                  date computation on negative month</a></font>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#mthrndneg">Math.round()
                                  returns -0 instead of +0 from -0.5 to -0</a></font>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#cnverrcr">Crash
                                  if reporting invalid data type while generating
                                  an error message</a></font>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#arrlendel">Array
                                  .length should not be deletable</a></font>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#pargnoenum">properties
                                  of the arguments object should be DontEnum</a></font>
                                <li><font size="2"><a href="#gvnoe"><font face="Verdana, Arial, Helvetica, sans-serif">use
                                  of undefined global variables do not always
                                  report error</font></a> </font>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#rgnrg">arguments
                                  object not updating function arguments</a> </font>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#ooia">invalid
                                  assert for operator overloading on unary operators</a>
                                  </font>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#nwno">'new'
                                  operator accepting non-Object return values</a>
                                  </font>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#cfrtnl">jseCallFunction
                                  return variable may be NULL with JSE_FUNC_TRAP_ERRORS</a>
                                  </font>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#bddt">insufficient
                                  checks on bad Dates</a> </font>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#cmpnwth">compound
                                  assignment (/=, *=, %=, +=, -=, &lt;&lt;=, &amp;=,
                                  ^=, |=) ignoring with() blocks</a> </font>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#wthprm">invalid
                                  name accessing local parameters in a with()
                                  block</a> </font>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#msvc6bg">MSVC6
                                  memory allocation bugs</a> </font>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#boutopt">aboutopt.jse
                                  doesn't work</a> </font>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#abtry">terminating
                                  execution from within a &quot;try&quot; block
                                  will cause memory leaks</a> </font>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#nthsfpo">seObjHasProperty
                                  causing floating-point overflow if not handled
                                  by callback</a> </font>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a href="#infnan">&quot;+Infinity
                                  and &quot;-Infinity&quot; converted to NaN if
                                  JSE_FLOATING_POINT==0</a></font>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a href="#stkcntno">stack
                                  variable overwrite when jseMayIContinueFunc
                                  returns False</a></font>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a href="#numpm">m</a><a href="#linkleak">emory
                                  leak, and possible crash, using the #link statement</a></font>
                              </ul>
                              <hr width="90%">
                              <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a name="v430d"></a><br>
                                API Errata, version <b>4.30d</b> (may apply to
                                earlier versions) <br>
                                &nbsp;&nbsp;<b>New</b>, October 6, 2001 </font></p>
                              <ul>
                                <li><a href="#numpm">ToNumber() returns incorrect
                                  values for "+" and "-"</a> </li>
                                <li><a href="#cmprhnt">Object comparisons with
                                  wrong hint - Date comparisons fail</a> </li>
                                <li><a href="#dfncargdep">function.arguments deprecated</a>
                                <li><a href="#dfncstrcat">toString on functions
                                  concatenates some identifiers</a>
                                <li><a href="#drgcdyn">rare GC problem on dynamic
                                  objects</a>
                                <li><a href="#dgetinhas">get callback may crash
                                  during seobjHasProperty()</a>
                                <li><a href="#430dseunicpp">C++ compilation errors
                                  for seuni.h</a>
                                <li><a href="#430dalterarg">altering &quot;arguments&quot;
                                  causes assertion failure</a>
                                <li><a href="#430dcsivo">jseCallStackInfo() can
                                  crash using Variable object</a>
                                <li><a href="#430devalnotthis">eval() does not
                                  propogate the &quot;this&quot; of its caller</a>
                                <li><a href="#430dgcrecur">jseGarbageCollect()
                                  can call recursively, corrupting data</a>
                                <li><a href="#430dtrapaterr">Errors during jseCallFunction
                                  set &quot;trapped=True&quot; in jseAtErrorFunc()</a>
                                <li><a href="#430dstarrnotobj">static Array initializer
                                  is not instanceof Object</a>
                                <li><a href="#430demptobjinit">empty Object initializer
                                  creates an Array object; should be an Object
                                  object</a>
                                <li><a href="#430dinfdynerr">infinite loop if
                                  accessing dynamic callback object reports an
                                  error </a>
                                <li><a href="#430dconswerr">&quot;continue&quot;
                                  within &quot;switch&quot; statement jumps to
                                  wrong condition </a>
                                <li><a href="#430dvarfooundef">&quot;var foo&quot;
                                  keyword in jseInterpret() or eval() makes &quot;foo&quot;
                                  undefined </a>
                                <li><a href="#430dapigrow">api jseString table
                                  growing without bounds - slowing callbacks </a>
                                <li><a href="#430dvnoloc">&quot;var&quot; within
                                  jseInterpret() or eval() may not use local variable
                                  </a>
                                <li><a href="#430dhtmlend">JSE_HTML_COMMENT_STYLE
                                  too strict with end comments </a>
                                <li><a href="#430dstrrepnofree">jseVariable not
                                  freed when string.replace() fails </a>
                                <li><a href="#430dcontnowhile">continue statement
                                  in do/while skips while </a>
                                <li><a href="#430dcvnotpbr">jseCreateVariable
                                  parameters not pass-by-reference </a>
                                <li><a href="#430dcppnofp">C++ compilation errors
                                  for JSE_FLOATING_POINT==0 </a>
                              </ul>
                              <hr width="90%">
                              <a name="v430c"></a><br>
                              API Errata, version <b>4.30c</b> (may apply to earlier
                              versions) <br>
                              &nbsp;&nbsp;<b>New</b>, April 6, 2001
                              <ul>
                                <li><a href="#430cuniswap">unicode characters
                                  byte-swapped with pre-compiled source</a>
                                <li><a href="#430caddfnames">multiple interprets
                                  multiply add filenames, use memory</a>
                                <li><a href="#430cslocomp">compilation of large
                                  scripts slow on some systems</a>
                                <li><a href="#430cbufobjworng">Buffer Object incorrectly
                                  detected</a>
                                <li><a href="#430cborl16">16-bit Borland Compiler
                                  crashes</a>
                                <li><a href="#430cinterevalcrash">potential crash
                                  during eval() and other jseInterpret</a>
                                <li><a href="#430cdestr2">jseObjectCallbacks destructors
                                  called twice</a>
                                <li><a href="#430cendquotenull">Compilation error
                                  message not terminated when end-quote missing</a>
                                <li><a href="#430ccplush">Cannot compile headers
                                  from C++</a>
                                <li><a href="#430cstr100">jseStrings invalid if
                                  more than 100 are used</a>
                                <li><a href="#430cmulterr">assert failure when
                                  printing more than one error on a context</a>
                                <li><a href="#430clittlembcs">MBCS errors on little-endian
                                  processors</a>
                                <li><a href="#430conestringtable">JSE_ONE_STRING_TABLE
                                  not supported</a>
                                <li><a href="#430coldglobnewglob">jseInterpret
                                  finds old globals before new globals</a>
                                <li><a href="#430cstacktest">stack-space test
                                  misses local variables</a>
                                <li><a href="#430cregexpcomperror">Compilation
                                  error for incomplete regular expressions</a>
                                <li><a href="#430ctokereffailure">current token
                                  being referenced on failure</a>
                                <li><a href="#430cdebugthrowcrash">Debugger crashes
                                  for some error messages</a>
                                <li><a href="#430cmbcsmsvc6err">MBCS errors with
                                  MSVC6 built-in functions</a>
                                <li><a href="#430cmbcscfuncfree">Memory leak for
                                  MBCS cfunction string insertion</a>
                                <li><a href="#430cmbcsregfree">MBCS and UNICODE
                                  data not freed in regular expressions library</a>
                                <li><a href="#430cmbcscompare">Comparisons of
                                  MBCS strings may be incorrect</a>
                                <li><a href="#430cmbcsalign">alignment problem
                                  terminating MBCS strings with null character</a>
                                <li><a href="#430cmbcsstrcat">string concatenation
                                  errors in MBCS builds</a>
                              </ul>
                              <hr width="90%">
                              <a name="v430b"></a><br>
                              API Errata, version <b>4.30b</b> (may apply to earlier
                              versions) <br>
                              &nbsp;&nbsp;<b>New</b>, May 4, 2001
                              <ul>
                                <li><a href="#430bglobgetcache">Adding global
                                  _get does not remove global cache</a>
                                <li><a href="#430bvobjcrashinterp">Crash using
                                  VariableObject on sub-interprets</a>
                                <li><a href="#430bdynundefwrong">SEOBJ_DYNAMIC_UNDEFINED
                                  logic incorrect</a>
                                <li><a href="#430blonglivewarnings">Warnings missing
                                  about long-lived temporary variables</a>
                                <li><a href="#430bsthack">source string memory
                                  not released in run compiled code</a>
                                <li><a href="#430bhashseg">HashListFromName()
                                  can crash memory-segment environments</a>
                                <li><a href="#430bgnmdyna">jseGetNextMember fails
                                  on some dynamic objects</a>
                                <li><a href="#430bnodefmbcs">NO_DEFAULT_VALUE
                                  message fails in MBCS builds</a>
                                <li><a href="#430bincdecreversed">"++" and "--"
                                  are reversed when printing function variables</a>
                                <li><a href="#430bcfunccat">assert failures concatenting
                                  C-strings</a>
                                <li><a href="#430bdyndefnooverload">DYN_DEFAULT
                                  invalid if JSE_OPERATOR_OVERLOADING is off</a>
                                <li><a href="#430bdivoverstack">DescribeInvalidVar()
                                  overruns stack</a>
                                <li><a href="#430biteratepassref">Iterating through
                                  activation object for pass-by-reference crashes</a>
                                <li><a href="#430bwrongmbcsassert">Invalid assert()
                                  in MBCS builds</a>
                                <li><a href="#430bdebugalot">Many problems in
                                  ScriptEase local and remote debugger</a>
                                <li><a href="#430bbreakpointinc">jseBreakpointTest()
                                  misses global code after #include</a>
                                <li><a href="#430barrayzeroprob">Cannot set Array
                                  length to zero</a>
                                <li><a href="#430bvarreqignored">jseOptReqVarKeyword
                                  ignored in some cases</a>
                                <li><a href="#430bcachenogetput">get and put not
                                  called on cached global variables</a>
                                <li><a href="#430bmayifalse">jseInterpret() error
                                  if MayIContinue only returns False</a>
                                <li><a href="#430bdbglarge">remote debugging hangs
                                  while transferring large files</a>
                                <li><a href="#430bjselocnull">jseLocateSource()
                                  is never returning NULL</a>
                                <li><a href="#430bvarneedtoomuch">jseFuncVarNeed()
                                  error if offset exceeds parameter count</a>
                                <li><a href="#430bgetfuncinherit">jseGetFunction
                                  not finding inherited methods</a>
                                <li><a href="#430bembedfuncerr">embedded function
                                  error if not last local variable</a>
                                <li><a href="#430bgetnolvalue">"cannot assign
                                  to lvalue" or apply "with" error on dynamic
                                  _get</a>
                                <li><a href="#430binterpglobal">jseInterpret()
                                  may load functions into the wrong global space</a>
                                <li><a href="#430bcallstackinfo">variables of
                                  type undefined not initialized in scope chain</a>
                                <li><a href="#430bcallstackinfo">JSE_GROWABLE_STACK
                                  is not recommended</a>
                                <li><a href="#430bcallstackinfo">jseCallStackInfo
                                  can crash</a>
                                <li><a href="#430breturnthrowsemi">"return" and
                                  "throw" problems with auto-semicolon insertion</a>
                                <li><a href="#430bfunccallwrongthis">functions
                                  called implicitly may have wrong "this" variable</a>
                                <li><a href="#430bsetglobalbad">jseSetGlobalObject()
                                  corrupts the internal opcode stack</a>
                                <li><a href="#430bgetputnoconv">Dynamic get/put
                                  ignored when converting properties to objects</a>
                                <li><a href="#430bgetnohas">Object with _get but
                                  no _hasProperty always has the property</a>
                                <li><a href="#430bsetglobalnoglobal">jseSetGlobal
                                  fails when combined with with jseFunc_NoGlobalSwitch</a>
                                <li><a href="#430bfuncarg">function.arguments
                                  is not always available</a>
                                <li><a href="#430bglobputassert">assert() failure
                                  when global variable has dynamic _put</a>
                              </ul>
                              <hr width="90%">
                              <p><a name="v430a"></a><br>
                                API Errata, version <b>4.30a</b> (may apply to
                                earlier versions) <br>
                                &nbsp;&nbsp;<b>New</b>, September 19, 2000</p>
                              <ul>
                                <li><a href="#430aglobfunccache">wrong global
                                  variable cached if function uses different global</a>
                                <li><a href="#430adestcallback">destructor not
                                  using object callback delete</a>
                                <li><a href="#430aglobput">dynamic _put is ignored
                                  when creating members on the global object</a>
                                <li><a href="#430acfunccomp">crash reading compiled
                                  cfunction if cfunction is disabled</a>
                                <li><a href="#430astackwo">secode-stack overflow
                                  on functions with very many parameters</a>
                                <li><a href="#430agcflag">garbage-collection bit
                                  clashes with object-mark bit</a>
                                <li><a href="#430aminmemnot">minimum-memory options
                                  should release more memory</a>
                                <li><a href="#430aerrorobjcrash">construction
                                  of incomplete error objects can crash</a>
                                <li><a href="#430abktestpack">jseBreakpointTest
                                  fails for JSE_PACK_SECODES</a>
                                <li><a href="#430agetignoreundefined">_get ignoring
                                  return of jseTypeUndefined</a>
                                <li><a href="#430anoargc">jseArgvLibraryFunction's
                                  not receiving the argc parameter</a>
                                <li><a href="#430aregclass">RegExp object overwrites
                                  Object.prototype._class</a>
                                <li><a href="#430aincnotfound">program may crash
                                  when #include file not found</a>
                                <li><a href="#430atosourceff">ToSource() returns
                                  incorrect value when used on hex value "\xFF"</a>
                                <li><a href="#430afuncretlast">Functions returning
                                  last-expression if no return statement</a>
                                <li><a href="#430anovarfreetwice">Not reporting
                                  when variable is freed twice</a>
                                <li><a href="#430agetvarglobalcrash">jseGetVariableName()
                                  crashes when getting "global" variable</a>
                                <li><a href="#430anewfuncbreaksproto">jseNewFunctions
                                  breaks default prototypes</a>
                                <li><a href="#430ajsmmangled">jse_special_math
                                  name-mangled in C++ compilers</a>
                                <li><a href="#430agetget">multiple/redundant calls
                                  to _get</a>
                                <li><a href="#430ajsefuncargvstyle">Function constructor
                                  resets global variable</a>
                                <li><a href="#430ajseopthmissing">srccore\jseopt\jseopt.h
                                  file missing</a>
                                <li><a href="#430acstringoverwrite">string constants
                                  updated by c-function behavior</a>
                                <li><a href="#430aminmemopcode">Opcode errors
                                  in JSE_MIN_MEMORY builds</a>
                                <li><a href="#430afpbigendian">Incorrect !Finite()
                                  behavior when performing floating-point math
                                  on big-endian systems</a>
                                <li> <a href="#430ambcs">Errors with strings and
                                  JSE_MBCS builds</a>
                                <li> <a href="#430aargccast">Casting warnings
                                  for new jseArgvLibFunc() functions</a>
                                <li><a href="#430apacktokenread">Error reading
                                  pre-compiled bytecodes for JSE_MIN_MEMORY</a>
                                <li><a href="#430agcsubinterp">Garbage collector
                                  can miss variables in sub-interprets</a> <br>
                              </ul>
                              <hr width="90%">
                              <p><b>The Details</b>
                              <p><b>for 4.30g --</b> (may apply to earlier versions)<font face="Verdana, Arial, Helvetica, sans-serif" size="2"></font></p>
                              <p><a name="focnphte"></a></p>
                              <p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b><font face="Verdana, Arial, Helvetica, sans-serif" size="2">function object's call() and apply() methods do not properly handle thrown errors</font></b><br>
                                  (for ISDK/C 4.40f)</font></li>
                              </ul>
                              <blockquote>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug:
                                  When calling a function object's call() or apply() methods, any errors thrown from within that function get handled by the default error handler for the application instead of being processed by any applicable catch blocks.  For instance, the following script produces unexpected results: </font>
                                  <pre><font face="Courier New, Courier, mono" size="2">   function myThrower()
   {
      throw new Error("test error");
   }

   try
   {
      myThrower.call();
   }
   catch ( e )
   {
      Clib.printf("test error was caught by try/catch block");
   }</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>:
                                  In srclib/ecma/seobject.c, function Ecma_Function_call(), around line 428, replace the following block of code:</font> </p>
                                <pre><font face="Courier New, Courier, mono" size="2">   jseCallFunction(jsecontext,thisVar,stack,&returnVar,thisArg);

   if( returnVar!=NULL )
      jseReturnVar(jsecontext,returnVar,jseRetCopyToTempVar);</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">with this one:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if ( jseCallFunctionEx(jsecontext,thisVar,stack,&returnVar,thisArg,JSE_FUNC_TRAP_ERRORS) )
   {
      if( returnVar!=NULL )
      {
         jseReturnVar(jsecontext,returnVar,jseRetCopyToTempVar);
      }
   }
   else
   {
      if( returnVar!=NULL )
      {
         jseReturnVar(jsecontext,returnVar,jseRetCopyToTempVar);
      }
      jseLibSetErrorFlag(jsecontext);
   }</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Also around line 502 of the same file, in function Ecma_Function_apply(), replace the following block of code:</font> </p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( jseCallFunction(jsecontext,thisVar,stack,&returnVar,thisArg) )
      jseReturnVar(jsecontext,returnVar,jseRetCopyToTempVar);</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">with this one:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if ( jseCallFunctionEx(jsecontext,thisVar,stack,&returnVar,thisArg,JSE_FUNC_TRAP_ERRORS) )
   {
      if( returnVar!=NULL )
      {
         jseReturnVar(jsecontext,returnVar,jseRetCopyToTempVar);
      }
   }
   else
   {
      if( returnVar!=NULL )
      {
         jseReturnVar(jsecontext,returnVar,jseRetCopyToTempVar);
      }
      jseLibSetErrorFlag(jsecontext);
   }</font></pre>
                              </blockquote>
                              <p><a name="scfzl"></a></p>
                              <p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b><font face="Verdana, Arial, Helvetica, sans-serif" size="2">string.concat()
                                  fails when strings are zero-length</font></b><br>
                                  (for ISDK/C 4.40f)</font></li>
                              </ul>
                              <blockquote>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug:
                                  If the strings in string.concat() are all zero-length,
                                  then a memory allocation failure is reported..</font>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>:
                                  In srclib/ecma/seobject.c, function Ecma_String_concat(),
                                  att &quot;+1&quot; to this line (around line
                                  4032):</font> </p>
                                <pre><font face="Courier New, Courier, mono" size="2">   tempResult = HugeReMalloc(result,BYTECOUNT_FROM_STRLEN(result,length)+BYTECOUNT_FROM_STRLEN(str,strlength));</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">to
                                  this:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   tempResult = HugeReMalloc(result,BYTECOUNT_FROM_STRLEN(result,length)+BYTECOUNT_FROM_STRLEN(str,strlength)+1);</font></pre>
                              </blockquote>
                              <p><a name="mrnvr16"></a></p>
                              <p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Math.random()
                                  is not very random on systems with 16-bit integers</font></b><br>
                                  (for ISDK/C 4.30g)</font></li>
                              </ul>
                              <blockquote>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug:
                                  On systems compiled with 16-bit integers, Math.random()
                                  always generates numbers very close to 0.0 or
                                  1.0 (e.g. 0.0545345 or 0.992322), and not well-spread
                                  between 0 and 1.</font>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>:
                                  In srclib/ecma/mathobj.c, function Ecma_Math_random(),
                                  change this line:</font> </p>
                                <pre><font face="Courier New, Courier, mono" size="2">   int r[5];</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">to
                                  this:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   uword32 r[5];</font></pre>
                              </blockquote>
                              <p><a name="aemg"></a></p>
                              <p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b><font face="Verdana, Arial, Helvetica, sans-serif" size="2">memory
                                  growth and performance loss with AtErrorFunc
                                  callback</font></b></font><br>
                                  (for ISDK/C 4.30g)</font></li>
                              </ul>
                              <blockquote>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug:
                                  If you have supplied an AtErrorFunc callback,
                                  and script throws many errors that are caught
                                  by the AtErrorFunc callback, then the script
                                  engine memory use will increase over time and
                                  performance will suffer. </font>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>:
                                  In srccore/secode.c, function secodeInterpret(),
                                  &quot;case seReturnThrow:&quot; add the following
                                  line just before the &quot;jseVariable&nbsp;var&nbsp;=&nbsp;SEAPI_RETURN...&quot;
                                  statement (at about line 1957)</font><font face="Verdana, Arial, Helvetica, sans-serif" size="2">:</font>
                                </p>
                                <pre><font face="Courier New, Courier, mono" size="2">   seAPIVar mark = call->tempvars;</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and
                                  then at the end of this block, following the
                                  call to AtErrorFunc, add this line:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   CALL_KILL_TEMPVARS(call,mark);</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Similarly,
                                  in srccore/util.c, function ErrorVPrintf(),
                                  add the following line just before the &quot;jseVariable&nbsp;var&nbsp;=&nbsp;SEAPI_RETURN...&quot;
                                  statement (at about line 1873):</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   seAPIVar mark = call->tempvars;</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and
                                  then at the end of this block, following the
                                  call to AtErrorFunc, add this line:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   CALL_KILL_TEMPVARS(call,mark);</font></pre>
                              </blockquote>
                              <p><a name="mlats"></a></p>
                              <p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>memory
                                  leak with array.toSource</b></font><br>
                                  (for ISDK/C 4.30g)</font></li>
                              </ul>
                              <blockquote>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug:
                                  A memory buffer remains unreleased for each
                                  call to Array.prototype.toSource. This would
                                  happen any time ToSource is applied to an instance
                                  of an Array, or to any object containing an
                                  instance of an Array.</font>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>:
                                  In srclib/ecma/seobject.c, function Ecma_Array_toSource,
                                  the following should be added as the last line
                                  of the function at about line 1846</font><font face="Verdana, Arial, Helvetica, sans-serif" size="2">:</font>
                                </p>
                                <pre><font face="Courier New, Courier, mono" size="2">   jseDestroyVariable(jsecontext,ret);</font></pre>
                              </blockquote>
                              <blockquote> </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="pphliv"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b><font face="Verdana, Arial, Helvetica, sans-serif" size="2">during
                                  script compilation peephole optimizer accesses
                                  invalid memory</font></b><br>
                                  (for ISDK/C 4.30g) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Problem: The peephole optimizer can access invalid
                                  memory during script compilation. In rare circumstance
                                  this may cause a crash.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:
                                  In srccore/expressn.c, function secompileDelete,
                                  at about line 859 change this statement:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   memmove( sptr, sptr+size, elementMoveCount * sizeof(secodeelem) );</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">to</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   memmove( This->opcodes+offsetTo, This->opcodes+offsetFrom,
</font><font face="Courier New, Courier, mono" size="2">            elementMoveCount * sizeof(secodeelem) );</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">A
                                  few lines further down, in the function secompilePeephole(),
                                  at about line 871 remove the &quot;StartOpcodes&quot;
                                  local variable and add these local variables
                                  instead:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   uint i, nxti;</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">and
                                  then at about line 1075 replace this block</font></p>
                                <pre>   <font face="Courier New, Courier, mono" size="2">/* The array can move and its size can change, so need
    * to recalculate ending point each iteration.
    */
   StartOpcodes=This-&gt;opcodes;
   for( sptr = StartOpcodes; sptr < This->opcodes + This->opcodesUsed; )
   {</font></pre>
                                <p><font face="Courier New, Courier, mono" size="2">
                                  </font><font size="2" face="Verdana, Arial, Helvetica, sans-serif">with
                                  </font><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  this block</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   /* The array can move and its size can change, so need
    * to recalculate ending point each iteration.
    */
   for( i = 0; i&lt;This-&gt;opcodesUsed; )
   {
      sptr = This-&gt;opcodes + i;
      nxti = i+1+SECODE_DATUM_SIZE(*sptr);</font></pre>
                                <p><font face="Courier New, Courier, mono" size="2">
                                  </font><font size="2" face="Verdana, Arial, Helvetica, sans-serif">and
                                  later in the same function, at about line 943,
                                  is an secompileDelete statement followed by
                                  a reference to SE_GLOBAL_NOTDIRECTXLAT. Insert
                                  a line between those two statement so it now
                                  reads:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   secompileDelete(This,sptr,&amp;targetted,-change);
   sptr = This-&gt;opcodes + i;
   if ( SE_GLOBAL_NOTDIRECTXLAT &lt;= c )</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">and
                                  finally, in this same function (at about line
                                  1098) replace this line</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   sptr = nxt;</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">with
                                  this line</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   i = nxti;</font></pre>
                              </blockquote>
                              <p><a name="cafp"></a></p>
                              <p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Alignment
                                  errors with Clib *printf and *scanf floating-point
                                  on HP-UX</b><br>
                                  (for ISDK/C 4.30g)</font></li>
                              </ul>
                              <blockquote>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug:
                                  If a call to the Clib *printf or *scanf methods
                                  (e.g. Clib.sprintf) contains non-floating-point
                                  data types following a floating-point type,
                                  data alignment may be incorrect and invalid
                                  data or crashes will result. This problem appears
                                  only on HPUX systems.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>:
                                  Replace srclib/clib/sefmtio.c with the file
                                  at <a href="ftp://ftp.nombas.com/pub/isdkeval/se430/sefmtio.c">ftp://ftp.nombas.com/pub/isdkeval/se430/sefmtio.c</a></font></p>
                              </blockquote>
                              <p><a name="slnr"></a></p>
                              <p>
                              <ul>
                                <li><b><font face="Verdana, Arial, Helvetica, sans-serif" size="2">when
                                  converting numbers to strings, rounding will
                                  not occur in some locales</font></b><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><br>
                                  (for ISDK/C 4.30g)</font></li>
                              </ul>
                              <blockquote>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug:
                                  In locales that use a comma to separate fractional
                                  parts of floating-point numbers (e.g. 3,145).
                                  JSE_NUMTOSTRING_ROUNDING will not round.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>:
                                  In srcmisc/utilstr.c, function EcmaNumberToString(),
                                  at around line 801, this statement:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if ( NULL == (decimal=strchr_jsechar((jsecharptr)buffer,'.')) )</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">should
                                  become:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if ( NULL == (decimal=strchr_jsechar((jsecharptr)buffer,'.'))
     && NULL == (decimal=strchr_jsechar((jsecharptr)buffer,',')) )</font></pre>
                              </blockquote>
                              <p><a name="mcpsem"></a></p>
                              <p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Stack
                                  corruption on %s error messages</b></font><br>
                                  (for ISDK/C 4.30g)</font></li>
                              </ul>
                              <blockquote>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug:
                                  If an error messages is generated with a format
                                  string containing the &quot;%s&quot; formatting
                                  type, and if the string that %s refers to is
                                  very long, then an assert will be generated
                                  (in debug mode), or a stack-overwrite will likely
                                  cause a crash (in release mode). For example,
                                  this script would cause such a crash:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   var bigstr = "func";
   for (var i = 0; i < 5000; i++ )
      bigstr += "x";
   bigstr += "()";
   eval(bigstr);</font></pre>
                                <p><font face="Courier New, Courier, mono" size="2"></font><font face="Verdana, Arial, Helvetica, sans-serif" size="2">This
                                  can also be a problem if you are using %s in
                                  any of your jseLibErrorPrintf() calls but are
                                  not limiting the length of string arguments.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>:
                                  Edit the files srccore/textcore.h and srclib/common/setxtlib.h
                                  and change all occurences of &quot;%s&quot;
                                  in those files to be &quot;%.30s&quot;. If you
                                  are using a build that relies on our implementation
                                  of jse_vsprintf in srcmisc/utilstr.c (if your
                                  system does not supply a native implementation
                                  of vsprintf) then contact http://support.nombas.com/
                                  for a replacement function.</font></p>
                              </blockquote>
                              <p><a name="sdlconl"></a></p>
                              <p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>SElib.dynamicLink()
                                  expects string lengths to remain constant</b></font><br>
                                  (for ISDK/C 4.30g)</font></li>
                              </ul>
                              <blockquote>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug:
                                  If a DLL (or shared object or code fragment)
                                  receives a string datum from SElib.dynamicLink()
                                  and changes the data in that string so that
                                  its length is shorter than the original string,
                                  we will assume the length has not changed and
                                  store data beyond the end of the string into
                                  the passed parameter. In Unicode and ASCII builds
                                  this will just leave the string length incorrect.
                                  In MBCS builds this could potentially cause
                                  a failure if the data beyond the null character
                                  is invalid MBCS sequences.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>:
                                  In srclib/common/sedyna.c, function CallDynamicFunction(),
                                  at about line 248 change the statement from:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   jsePutStringLength(jsecontext,v,(jsecharptr )data,BufferLengths[i]);</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">to:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   jsePutString(jsecontext,v,(jsecharptr )data);</font></pre>
                              </blockquote>
                              <p><a name="gndlbl"></a></p>
                              <p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b><font face="Verdana, Arial, Helvetica, sans-serif" size="2">bad
                                  error message, or crash, when &quot;goto&quot;
                                  statement is not followed by a label</font></b><br>
                                  (for ISDK/C 4.30g)</font></li>
                              </ul>
                              <blockquote>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug:
                                  If a goto is compiled, but is not followed by
                                  a proper label, then the error message will
                                  be invalid, may display garbage, and may crash.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>:
                                  In srccore/statemnt.c, function secompileStatement(),
                                  in the &quot;case seTokGoto:&quot; change line
                                  993 from:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   callQuit(call,textcoreGOTO_LABEL_NOT_FOUND);</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">to:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   callQuit(call,textcoreNOT_LOOP_LABEL);</font></pre>
                              </blockquote>
                              <p><a name="nogo"></a></p>
                              <p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>&quot;goto&quot;
                                  is not standard EcmaScript</b><br>
                                  (for ISDK/C 4.30g)</font></li>
                              </ul>
                              <blockquote>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Issue:
                                  ScriptEase implements the &quot;goto&quot; statement,
                                  but most other EcmaScript implementations do
                                  not recognize the keyword.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>:
                                  To disable the &quot;goto&quot; keyword, change
                                  this line at about line 263 of srccore/codeprt2.c
                                  from:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   { textcoreGotoKeyword, seTokGoto },</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">to:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   #if !defined(JSE_DISABLE_GOTO)
   { textcoreGotoKeyword, seTokGoto },
   #endif</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Then,
                                  if you want to disable the &quot;goto&quot;
                                  keyword, compile with JSE_DISABLE_GOTO defined.</font></p>
                              </blockquote>
                              <p><a name="comole"></a></p>
                              <p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>COMOBJ
                                  leaks resources</b><br>
                                  (for ISDK/C 4.30g)</font></li>
                              </ul>
                              <blockquote>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug:
                                  COMOBJ can leaks resources when working with
                                  type libraries and pass-by-ref COM objects.
                                  Over time total memory use will grow.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>:
                                  Replace srclib/comobj/* code with files found
                                  at <a href="ftp://ftp.nombas.com/pub/isdkeval/se430/comobj_2003_03_20.zip">ftp://ftp.nombas.com/pub/isdkeval/se430/comobj_2003_03_20.zip</a></font>
                                </p>
                              </blockquote>
                              <hr width="90%">
                              <p><b>for 4.30f --</b> (may apply to earlier versions)<font face="Verdana, Arial, Helvetica, sans-serif" size="2"></font></p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="srcwoa"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>string.replace() crashes when only one argument is passed in</b><br>
                                  (for ISDK/C 4.30f) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Bug: When a script calls String.replace() with only argument, the engine may crash due to uninitialized memory. </font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>:
                                  In srclib/ecma/seobject.c, within the funciton string_replace_helper(), replace this line:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   jseVariable replacement = argv[1];</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">with
                                  this line:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   jseVariable replacement = ( argc == 2 ) ? argv[1] : NULL;</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="ctmd"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>comobj
                                  times miscalculate DST</b><br>
                                  (for ISDK/C 4.30f) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Bug: In converting times between a script and
                                  a COM object, the daylight-savings time calculation
                                  may be off by one hour. </font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>:
                                  In srclib/comobj/comobj.cpp, function COMObj_put()
                                  and in function oleGenericDispatcher() replace
                                  this line (at about line 873 and 1061, respectively)</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   UnixTimeToSystemTime((time_t)system_time, &st);</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">with
                                  this block:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   time_t tmp = (time_t)system_time;
   struct tm * localUnixTime = localtime(&amp;tmp);

   st.wYear = (localUnixTime-&gt;tm_year + 1900);
   st.wMonth = localUnixTime-&gt;tm_mon+1;
   st.wDayOfWeek = localUnixTime-&gt;tm_wday;
   st.wDay = localUnixTime-&gt;tm_mday;
   st.wHour = localUnixTime-&gt;tm_hour;
   st.wMinute = localUnixTime-&gt;tm_min;
   st.wSecond = localUnixTime-&gt;tm_sec;</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">then
                                  in function CreateReturnedVariant() replace
                                  this line (at about line 635):</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   time_t t = SystemTimeToUnixTime(&st);</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">with
                                  this block:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   time_t t;
   struct tm gm;

   /* Construct a tm structure based on the SYSTEMTIME structure */
   gm.tm_year = (st.wYear - 1900);
   gm.tm_mon = st.wMonth-1;
   gm.tm_wday = st.wDayOfWeek;
   gm.tm_mday = st.wDay;
   gm.tm_hour = st.wHour;
   gm.tm_min = st.wMinute;
   gm.tm_sec = st.wSecond;
   gm.tm_isdst = -1;

   /* Get the time_t */
   t = mktime(&gm);</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="scff"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>stack
                                  corruption with long mode parameter to Clib.fopen()
                                  and Clib.freopen()</b></font><br>
                                  (for ISDK/C 4.30f) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Bug: If the mode parameter to Clib.fopen() or
                                  Clib.freopen() parameter is longer than 18 characters,
                                  a stack buffer overflow will occur. </font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>:
                                  In srclib/sestdio.c, functions Clib_fopen()
                                  and Clib.freopen() change this line (at about
                                  line 634 and 705)</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   strcpy_jsechar((jsecharptr)NewMode,Mode);</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">to
                                  this </font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   memset(NewMode,0,sizeof(NewMode));
   strncpy_jsechar((jsecharptr)NewMode,Mode,sizeof(NewMode)/sizeof(NewMode[0])-2);</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="asrt1"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>array
                                  sort return invalid when array.length==1</b></font><br>
                                  (for ISDK/C 4.30f) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Bug: If <font face="Courier New, Courier, mono">array.length==1</font>,
                                  then <font face="Courier New, Courier, mono">array.sort()</font>
                                  will return <font face="Courier New, Courier, mono">undefined</font>.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>:
                                  In srclib/ecma/seobject.c, function Ecma_Array_sort(),
                                  the code (near line 1144) for &quot;&lt;=1&quot;
                                  elements should be changed to:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( num_items <= 1 )
   {
      jseReturnVar(jsecontext,thisvar,jseRetCopyToTempVar);
      return;
   }</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="ntpi"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Number
                                  toPrecision() incorrect</b></font></font><br>
                                  (for ISDK/C 5.00e) Updated Dec 11, 2002</font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Bug: <font face="Courier New, Courier, mono">Number.prototype.toPrecision(precision)</font>
                                  is converting <font face="Courier New, Courier, mono">precision</font>
                                  digits beyond the decimal, when it should be
                                  converting <font face="Courier New, Courier, mono">precision-1</font>
                                  digits. </font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:
                                  In srclib/ecma/seobject.c, function Ecma_Number_toSomething(),
                                  at about line 2287 the entire toPrecision block
                                  should be replaced with this code:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   else
   {
      jsenumber abs_x = JSE_FP_FABS(x);
      assert( _toPrecision == toWhat );
      /* field width must be an int */
      /* if x&gt;=pow(10,-6) &amp;&amp; x&lt;pow(10,f), use fixed-point notation
       * otherwise, use exponential notation */
      if( JSE_FP_LTE(JSE_FP_POW(JSE_FP_CAST_FROM_SLONG(10),JSE_FP_CAST_FROM_SLONG(-6)),abs_x) &amp;&amp;
          JSE_FP_LT(abs_x, JSE_FP_POW(JSE_FP_CAST_FROM_SLONG(10),JSE_FP_CAST_FROM_SLONG(f))) )
      {
         jsenumber f10 = JSE_FP_LOG10(abs_x);
         sint d10 = (sint)JSE_FP_CAST_TO_SLONG(f10);
         f -= d10;
         if ( !jseIsNegative(f10) )
            f--;
         JSE_FP_DTOSTR(x,(int)f,buffer,UNISTR(&quot;f&quot;));
      }
      else
      {
         JSE_FP_DTOSTR(x,(int)f-1,buffer,UNISTR(&quot;e&quot;));
      }
   }</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="opece"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>jsePutString()
                                  may overwrite previous results if JSE_C_EXTENSIONS
                                  is disabled</b></font><br>
                                  (for ISDK/C 4.30f) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Bug: If compiling with JSE_C_EXTENSIONS 0, then
                                  when jsePutString() or similar calls are used
                                  to assign to a variable (especially via dynamic
                                  callbacsk as in the RegExp global object), existing
                                  string data may be overwritten.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:
                                  In srccore/jselib.c, function GenericPutDataPtr(),
                                  at about line 1790 this block of code:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">         if( SEVAR_GET_TYPE(val)==VString && (SEVAR_GET_STRING(val).data->constant
   #     if JSE_C_EXTENSIONS==1
                                           ||  !callLocalCBehavior(call)
   #     endif
                                           ) )</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">should
                                  be replaced with this code</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">      if( SEVAR_GET_TYPE(val)==VString
   #   if JSE_C_EXTENSIONS==1
       && (SEVAR_GET_STRING(val).data->constant || !callLocalCBehavior(call))
   #   endif
        )</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="srcnm"></a></font></p>
                              <ul>
                                <li><b><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">string.replace
                                  crashes or consumes all memory when replacing
                                  with null string</font></font></b><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><br>
                                  (for ISDK/C 4.30f) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Bug: When using string.replace() to delete a
                                  character from a string, by replacing it with
                                  &quot;&quot;, the call may crash or use too
                                  much memory.<font face="Courier New, Courier, mono"></font></font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:
                                  In srclib/ecma/seobject.c, function add_string(),
                                  add this statement as the first line of the
                                  function (at about line 4128):</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if ( !add_len ) return;</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="rsts"></a></font></p>
                              <ul>
                                <li><b><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">invalid_regexp_instance.toString()
                                  crash</font></font></b><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><br>
                                  (for ISDK/C 4.30f) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Bug: Calling the RegExp toString operator on
                                  an object that is not a valid RegExp instance
                                  will crash. E.G. <font face="Courier New, Courier, mono">RegExp.prototype.toString()</font></font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:
                                  In srclib/ecma/seregexp.c, function RegExp_toString,
                                  at about line 139 change this code:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   orig = jseGetString(jsecontext,tmp,&len);</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">to
                                  this</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   len = 0;
</font><font face="Courier New, Courier, mono" size="2">   orig = tmp ? jseGetString(jsecontext,tmp,&len) : UNISTR("");</font></pre>
                              </blockquote>
                              <p><b>for 4.30f --</b> (may apply to earlier versions)<font face="Verdana, Arial, Helvetica, sans-serif" size="2"></font></p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="mothra"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b><font face="Verdana, Arial, Helvetica, sans-serif" size="2">sedbc
                                  bugs with long binary data</font></b><br>
                                  (for ISDK/C 4.30f) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Problem: SEDBC can crash when reading from or
                                  writing to database columns representing any
                                  of the large binary data types.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:
                                  In srclib/sedbc/jse_rfx.c, function jseFieldExchange_LongString(),
                                  case rf_value, at about line 2742 is a call
                                  to SQLBindParameter passing the 8th paramater
                                  as &quot;<font face="Courier New, Courier, mono">&amp;value</font>&quot;.
                                  That parameter should be &quot;<font face="Courier New, Courier, mono">value</font>&quot;.
                                  (I.E. <font face="Courier New, Courier, mono">value</font>
                                  instead of the address of <font face="Courier New, Courier, mono">value</font>.)</font></p>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="ssres"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">string.split()
                                  incorrect if regular expression used as separator</font></font></b></font></font></font><br>
                                  (for ISDK/C 4.30f) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Bug: String.prototype.split(separator) returns
                                  the wrong results when separator is a regular
                                  expression and does not match the first character
                                  of the string.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:
                                  In srclib/ecma/seobject.c, function Ecma_String_split(),
                                  at about line 3633 (just after the second call
                                  to SplitMatch) this of code:</font></p>
                                <p></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   /* step 14 */
   JSE_POINTER_UINDEX e = 0;
   jseVariable tmp2,tmp = jseGetIndexMember(jsecontext,z,0);
   if( tmp )</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">should
                                  be changed to:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   /* step 14 */
   JSE_POINTER_UINDEX e;
   jseVariable tmp2,tmp;
   if ( R && 0!=jseGetIntegerDatum(jsecontext,z,index_MEMBER) )
   {
      jseDestroyVariable(jsecontext,z);
      q++;
      continue;
   }
   e = 0;
   tmp = jseGetIndexMember(jsecontext,z,0);
   if( tmp )</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="cucun"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>useCache
                                  field of Call structure may not be initialized</b><br>
                                  (for ISDK/C 4.30f) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Problem: The call-&gt;useCache field is not
                                  initialized for new levels of interpret. This
                                  has not been shown to cause any run-time errors,
                                  yet.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:
                                  In srccore/call.c, function ecode.c, function
                                  callInterpret(), just after the call structure
                                  has been allocated (at about line 1039), initialize
                                  the useChache field with this statement</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   call->useCache = False;</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="fpund"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>func.prototype
                                  undefined if #define JSE_AUTO_OBJECT 0</b><br>
                                  (for ISDK/C 4.30f) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Problem: If compiling with the JSE_AUTO_OBJECT
                                  options off (i.e. #define JSE_AUTO_OBJECT 0)
                                  a script such as this one:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   function foo() {} foo.prototype.bar = 0; </font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">will
                                  generate this error</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   ConversionError 1616: Undefined and Null types cannot be converted to an object.</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:
                                  In srccore/secode.c, function do_op_member,
                                  </font><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  replace this line at about line 236:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   #     if !defined(JSE_AUTO_OBJECT) || JSE_AUTO_OBJECT!=0
         if( to_object )<br>         {
            if( SEVAR_GET_TYPE(tmp)==VUndefined )
            {
               /* transform it into an object */
               SEVAR_INIT_BLANK_OBJECT(call,tmp);
               sevarPutValueEx(call,obj,mem,tmp,False);
            }
         }
   #     endif</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">
                                  with this code</font><font face="Courier New, Courier, mono"></font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( to_object  &amp;&amp;  SEVAR_GET_TYPE(tmp)==VUndefined )
   {
      # if defined(JSE_AUTO_OBJECT) &amp;&amp; JSE_AUTO_OBJECT==0
      /* we have saved space by not putting a .protoype on all functions,
       * but they should have one if needed, so create it if it's accessed.
       */
      if ( mem==GLOBAL_STRING(call,orig_prototype_entry) &amp;&amp; NULL!=SEVAR_GET_OBJECT(obj)-&gt;func )
      # endif
      {
         /* transform it into an object */
         SEVAR_INIT_BLANK_OBJECT(call,tmp);
         sevarPutValueEx(call,obj,mem,tmp,False);
      }
   }</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="pid"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>parseInt()
                                  treating characters &quot;:;&lt;=&gt;?@&quot;
                                  as digits 3 through 9</b><br>
                                  (for ISDK/C 4.30f) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Problem: When evaluating a string, parseInt()
                                  is treating the characters from &quot;:&quot;
                                  to &quot;@&quot; (\x3A to \x40) as the digits
                                  3 through 9.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:
                                  In srclib/ecma/ecmamisc.c, function Ecma_parseInt,
                                  </font><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  replace this line at about line 160:</font></p>
                                <pre><font face="Courier New, Courier, mono">   val = toupper_jsechar(JSECHARPTR_GETC(str))-'A'+10;</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">with
                                  this:</font></p>
                                <pre><font face="Courier New, Courier, mono">   if ( (val = toupper_jsechar(JSECHARPTR_GETC(str))-'A'+10) &lt; 10 ) break;</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="gisl"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Documentation
                                  incorrect about lifetime of jseGetInternalString()</b><br>
                                  (for ISDK/C 4.30f) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Problem: The documentation for the function
                                  <font face="Courier New, Courier, mono">jseGetInternalString()</font>,
                                  states:</font></p>
                                <pre><font face="Courier New, Courier, mono">   The returned pointer is valid as long as
   the jseString it is obtained from is valid.</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:
                                  That statement is not correct, and should instead
                                  be:</font></p>
                                <pre><font face="Courier New, Courier, mono">   The text represented by many sestring values
   is internally stored in a compact format, and
   so the string returned by this call may be
   stored in a temporary location; the returned
   pointer is guaranteed to be valid only until
   the next call into the script-engine API.</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="sszp"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>string
                                  slice() function is not accepting zero parameters</b><br>
                                  (for ISDK/C 4.30f) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Problem: String.prototype.slice() will report
                                  an error if it is passed no parameters. Instead,
                                  it should treat calls to <font face="Courier New, Courier, mono">string.slice()</font>
                                  as <font face="Courier New, Courier, mono">string.slice(0)</font>.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:
                                  In srclib/ecma/seobject.c, at about line 4946,
                                  change this line:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   JSE_PROTOMETH( UNISTR("slice"), Ecma_String_slice, 1, 2, jseDontEnum, jseFunc_Secure ),</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">to
                                  this</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   JSE_PROTOMETH( UNISTR("slice"), Ecma_String_slice, 0, 2, jseDontEnum, jseFunc_Secure ),</font></pre>
                                <p><font size="2" face="Courier New, Courier, mono">
                                  <font face="Verdana, Arial, Helvetica, sans-serif">and
                                  in function Ecma_String_slice() at about line
                                  4005 change this line:</font></font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   start = jseGetLong(jsecontext,jseStart);</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">to
                                  this</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   start = jseFuncVarCount(jsecontext) ? jseGetLong(jsecontext,jseStart) : 0;</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and
                                  change the line at about 4052 from</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   JSE_FUNC_VAR_NEED(jseStart,jsecontext,0,JSE_VN_CONVERT(JSE_VN_ANY,JSE_VN_NUMBER));</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">to</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if ( 0 != jseFuncVarCount(jsecontext) )
      JSE_FUNC_VAR_NEED(jseStart,jsecontext,0,JSE_VN_CONVERT(JSE_VN_ANY,JSE_VN_NUMBER));</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="al0"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>setting
                                  array length to 0 does not remove all indexed
                                  properties</b><br>
                                  (for ISDK/C 4.30f) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Bug: Setting the length property of an Array
                                  instance to zero does not remove the properties,
                                  although it does set the length to 0.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:
                                  In srccore/var.c, function sevarSetArrayLength(),
                                  at about line 303 change the initialization
                                  of <font face="Courier New, Courier, mono">maxi</font>
                                  to be:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   jsenumber maxi = JSE_FP_SUB(JSE_FP_CAST_FROM_ULONG(Length),jseOne);</font></pre>
                              </blockquote>
                              <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                </font></p>
                              <hr width="90%">
                              <p><b>for 4.30e --</b> (may apply to earlier versions)
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="strpsk"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>String
                                  replace may skip matches if replacement string
                                  is null-string (i.e. &quot;&quot;)</b><br>
                                  (for ISDK/C 4.30e) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Bug: If the replacement expression in a string
                                  replace() method is the zero-length string,
                                  then characters may be skipped in performing
                                  the replacement. For example, this script would
                                  fail the test:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   var str = '6 abcdef';
   var rtn = str.replace(/[^0-9\.]/g,'');
   Test.assert( rtn == "6" );  // in error would be &quot;6acf&quot;</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:
                                  In srclib/ecma/seobject.c, function string_search_helper(),
                                  replace the block of code beginning with &quot;<font face="Courier New, Courier, mono">/*&nbsp;The&nbsp;return&nbsp;from&nbsp;exec&nbsp;should&nbsp;be&nbsp;an&nbsp;object</font><font face="Verdana, Arial, Helvetica, sans-serif">&quot;</font>
                                  with the code found at <a href="ftp://ftp.nombas.com/pub/isdkeval/se430/string_search_helper.txt">ftp://ftp.nombas.com/pub/isdkeval/se430/string_search_helper.txt</a></font></p>
                              </blockquote>
                              <blockquote><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="cdb"></a></font></blockquote>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>rare
                                  crashes on memory overwrites using the dynamicBuffer
                                  routines</b><br>
                                  (for ISDK/C 4.30e) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Bug: Code may overwrite one byte beyond allocated
                                  memory when using the dynamicbuffer functions.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:
                                  In srclib/common/selibutl.c, function dynamicBufferAppend(),
                                  at about line 133 change this line:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( buf->used + length > buf->allocated )</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">to
                                  this:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( buf->used + length >= buf->allocated )</font></pre>
                                <p><font face="Courier New, Courier, mono" size="2">and
                                  at about line 137</font><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  change this line:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   } while( buf->used + length > buf->allocated );</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">to
                                  this:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   } while( buf->used + length >= buf->allocated );</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">and
                                  in function function dynamicBufferAppendLength(),
                                  at about line 151 change this line:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( buf->used + length > buf->allocated )</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">to
                                  this:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( buf->used + length >= buf->allocated )</font></pre>
                                <p><font face="Courier New, Courier, mono" size="2">and
                                  at about line 155</font><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  change this line:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   } while( buf->used + length > buf->allocated );</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">to
                                  this:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   } while( buf->used + length >= buf->allocated );</font><font face="Courier New, Courier, mono" size="2"></font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="bjnmidx"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Problems
                                  with array lengths and numeric indices that
                                  are large or non-integer</b><br>
                                  (for ISDK/C 4.30e) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Bug: There are many problems with handling array
                                  and object members that are either very large
                                  (e.g. <font face="Courier New, Courier, mono">obj[2147483650]</font>)
                                  or are non-integer numbers (e.g. <font face="Courier New, Courier, mono">obj[3.14159]</font>,
                                  <font face="Courier New, Courier, mono">obj[1e34]</font>).
                                  There are also related problems with setting
                                  an array length to a very large number (e.g.
                                  array.length=<font face="Courier New, Courier, mono">2147483650</font>).</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:
                                  The number of changes needed to fix these problems
                                  in such a way that they would work on all build
                                  types (fp, fpemul, nofp) without a loss of performance
                                  was very large. Because the number of changes
                                  was so large we recommend that you update to
                                  version 4.30f. However, if you must apply these
                                  changes to 4.30e, follow the instructions at
                                  <a href="ftp://ftp.nombas.com/pub/isdkeval/se430/numidx.txt">ftp://ftp.nombas.com/pub/isdkeval/se430/numidx.txt</a>
                                  </font></p>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="opc"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Foo.prototype.constructor
                                  not assigned correctly for all builtin objects</b><br>
                                  (for ISDK/C 4.30e) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Bug: For all builtin objects, this statement
                                  should be true: <font face="Courier New, Courier, mono">Foo.prototype.constructor==Foo</font>.
                                  For example <font face="Courier New, Courier, mono">Boolean.prototype.constructor==Boolean</font>
                                  and <font face="Courier New, Courier, mono">Number.prototype.constructor==Number</font>.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:
                                  In srclib/ecma/*.c locate all of the lines like
                                  this (where instead of &quot;Foo&quot; find
                                  &quot;Function&quot;, &quot;Object&quot;, &quot;Array&quot;,
                                  &quot;Boolean&quot;, &quot;Number&quot;, &quot;String&quot;,
                                  &quot;Buffer&quot;, and &quot;Date&quot;):</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   </font><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><font face="Courier New, Courier, mono">JSE_PROTOMETH( CONSTRUCTOR_PROPERTY, Ecma_Array_builtin, 0, 0, jseDontEnum,
                  jseFunc_Secure ), </font></font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">and
                                  replace those lines with the following:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   JSE_VARASSIGN( UNISTR(&quot;prototype._constructor&quot;), ARRAY_PROPERTY, jseDontEnum ),</font></pre>
                                <p><font size="2" face="Courier New, Courier, mono"></font><font size="2" face="Verdana, Arial, Helvetica, sans-serif">Finally,
                                  the RegExp object is missing this relationship,
                                  and so add a statement like the above to the
                                  wrapper list in srclib/ecma/seregexp.c.</font></p>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="rspng"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Array
                                  split() error for negative starting point</b><br>
                                  (for ISDK/C 4.30e) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Bug: Array split() is not handling negative
                                  start values correctly. This error shows up
                                  in different ways with different compilers,
                                  but the following example would fail on all
                                  systems:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   var a = [1,2,3,4,5,6];
   var b = a.splice(-100,1);
   Test.assert( a == &quot;2,3,4,5,6&quot; );  // wrongly returns &quot;1,2,3,4,5&quot;
   Test.assert( b == &quot;1&quot; );          // wrongly returns &quot;&quot;</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:
                                  In src/lib/ecma/seobject.c, function Ecma_Array_splice(),
                                  at about line 1633 change the code from:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   start = (slong) max( length + start, 0 );</font></pre>
                                <p><font face="Courier New, Courier, mono" size="2">
                                  <font face="Verdana, Arial, Helvetica, sans-serif">to</font></font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   start = (slong) max( (slong)length + start, 0 );</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="mthmnnz"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Math.min(+0,-0)
                                  wrongly returns +0</b><br>
                                  (for ISDK/C 4.30e) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Bug: Math.min() is not returning -0 when comparing
                                  -0 against +0.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:
                                  In src/lib/ecma/mathobj.c, function Ecma_Math_min(),
                                  at about line 380 change the comparison from:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( JSE_FP_LT(current,minval) )</font></pre>
                                <p><font face="Courier New, Courier, mono" size="2">
                                  <font face="Verdana, Arial, Helvetica, sans-serif">to</font></font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( JSE_FP_LT(current,minval) || ( jseIsNegZero(current) && jseIsZero(minval) ) )</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="ltmcrsh"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Clib.localtime()
                                  and Clib.gmtime() crash on out-of-range dates</b><br>
                                  (for ISDK/C 4.30e) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Bug: Script calls to Clib.localtime() or Clib.gmtime()
                                  crash if the input time is out of the range
                                  of standard C library time routines.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:
                                  In srclib/clib/setime.c, function GenericTimeLib(),
                                  at about line 324 just after any of the ConversionFunc
                                  functions will have been called, insert this
                                  code:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if ( t == NULL )
   {
      jseReturnVar(jsecontext,jseCreateVariable(jsecontext,jseTypeNull),jseRetTempVar);
      return;
   }</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="nrnan"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Number
                                  toString(with_radix) method is not handling
                                  NaN, Infinity, and -Infinity</b><br>
                                  (for ISDK/C 4.30e) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Bug: Converting an instance of a Number object
                                  toString, using a radix (e.g.&nbsp;<font face="Courier New, Courier, mono">(new&nbsp;Number(foo)).toString(16);</font>)
                                  does not produce correct results if the number
                                  is NaN, Infinity, or -Infinity.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:
                                  In src/lib/ecma/seobject.c, function Ecma_Number_toString(),
                                  at about line 2254 cahnge the JSE_NUMBER_TO_STRINGWITHRADIX
                                  code to be this:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if ( 0 &lt; jseFuncVarCount(jsecontext) )
   {
      slong radix = JSE_FP_CAST_TO_SLONG(jseGetIntegerDatum(jsecontext,jseFuncVar(jsecontext,0),NULL));
      if ( radix==10  ||  !jseIsFinite(num) )
         EcmaNumberToStringWithRadix(jsebuffer,num);
      else
         EcmaNumberToStringWithRadix(num,(sint)radix,buffer);
   }</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="ngmbd"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Invalid
                                  date computation on negative month</b><br>
                                  (for ISDK/C 4.30e) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Bug: Date calculations are incorrect, and can
                                  trigger debugger asserts, if month is negative.
                                  For example, the following script should set
                                  the month to October (month 9) and year to 1980,
                                  but instead it sets the month to January (month
                                  0) and year to 1981.</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   var foo = new Date("12:00 February 4, 1982");
   foo.setUTCMonth(-15);</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:
                                  In src/lib/ecma/sedate.c, function MakeDay(),
                                  insert code between lines 640 and 642 add code
                                  so those lines become:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   r6 = m%12;
   if ( r6 < 0 )
   {
      r6 += 12;
      r5--;
   }
   t = TimeFromYear(r5);</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="mthrndneg"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Math.round()
                                  returns -0 instead of +0 from -0.5 to -0</b><br>
                                  (for ISDK/C 4.30e) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Bug: Math.round(val) should return -0 for -0.5
                                  &lt;= val &lt;= -0, according to section 15.8.2.15
                                  of the ECMAScript specification, but is returning
                                  +0.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:
                                  In srclib/ecma/mathobj.c, function Ecma_Math_round,
                                  the &quot;<font face="Courier New, Courier, mono">if</font>&quot;
                                  statement and block should be changed to:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   if ( jseIsFinite(val) &amp;&amp; !jseIsZero(val) )
   {
      jsenumber half = JSE_FP_DIV(jseOne,JSE_FP_CAST_FROM_SLONG(2));
      /* exception to standard math if between -0.5 and -0, inclusive */
      if ( JSE_FP_LT(val,jseZero)  &amp;&amp;  JSE_FP_LTE(JSE_FP_NEGATE(half),val) )
         val = jseNegZero;
      else
         val = JSE_FP_FLOOR(JSE_FP_ADD(val,half));
   }</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="cnverrcr"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Crash
                                  if reporting invalid data type while generating
                                  an error message</b><br>
                                  (for ISDK/C 4.30e) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Bug: If a method is called during error handling,
                                  and that method has a data type or conversion
                                  error, then the program will crash. For example,
                                  in the following example &quot;<font face="Courier New, Courier, mono">msg</font>&quot;
                                  is the wrong data type and while rerporing this
                                  error the program will crash:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   function TypeError(msg)
   {
      Error.apply(this, msg);
      return this;
   }
   TypeError(null);</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:
                                  In srccore/call.c, function callGetVarNeed(),
                                  after the call to callError() (at about line
                                  1652), add this statement:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   CALL_SET_ERROR(call,FlowError);</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="arrlendel"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Array
                                  .length should not be deletable</b><br>
                                  (for ISDK/C 4.30e) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Bug: The .length property of any instance of
                                  an array should have the DontEnum attribute.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:
                                  In srclib/ecma/seobject.c, function CreateNewObject(),
                                  at about line 3023 change</font></p>
                                <pre>   <font face="Courier New, Courier, mono" size="2">jseSetAttributes(jsecontext,t2,jseDontEnum);</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">to</font></p>
                                <pre>   <font face="Courier New, Courier, mono" size="2">jseSetAttributes(jsecontext,t2,jseDontEnum||jseDontDelete);</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="pargnoenum"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>properties
                                  of the arguments object should be DontEnum</b><br>
                                  (for ISDK/C 4.30e) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Bug: callee, length, and numbered members of
                                  the arguments object are enumerable, should
                                  be DontEnum.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:
                                  In srccore/call.c, function callCreateArguments(),
                                  there are 3 calls assigning '<font face="Courier New, Courier, mono">mem&nbsp;=&nbsp;SEOBJ_CREATE_MEMBER(...)</font>'
                                  In all 3 cases, add the following line right
                                  after:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   mem->attributes = jseDontEnum;</font></pre>
                              </blockquote>
                              <p></p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="gvnoe"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>use
                                  of undefined global variables do not always
                                  report error</b><br>
                                  (for ISDK/C 4.30e) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Bug: When a variable that has not been declared
                                  or initialized is used to pass to a function,
                                  or is automatically assumed to be a function,
                                  e.g.:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   new String(blah);         // undeclared variable &quot;blah&quot; passed to a funcion
   var zoo = &quot;&quot; + blah.foo;  // undeclared variables treated as an object</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">no
                                  error message is generated.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:
                                  In srccore/secode.c, function secodeInterpret(),
                                  within the case for <font face="Courier New, Courier, mono">sePushGlobal</font>,
                                  <font face="Courier New, Courier, mono">sePushGlobalAsObject</font>,
                                  and <font face="Courier New, Courier, mono">sePushGlobalParam</font>,
                                  at about line 1309 is this large block of code:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( t==sePushGlobal )
   {
      callQuit(call,textcoreVAR_TYPE_UNKNOWN,GetStringTableEntry(call,mem,NULL));
      break;
   }
   else
   {
      jsebool do_it = FALSE;
      ...etc...
      STACK_POP;
   }</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">replace
                                  that entire block with these two lines:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( jseOptReqVarKeyword &amp; call-&gt;Global-&gt;ExternalLinkParms.options )
      callQuit(call,textcoreFUNC_OR_VAR_NOT_DECLARED,mem);
   else</font>
      callQuit(call,textcoreVAR_TYPE_UNKNOWN,GetStringTableEntry(call,mem,NULL));
   break;</pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">This
                                  change will cause error reports if you are using
                                  the non-ECMA compile-time option JSE_AUTO_OBJECT
                                  and are relying on scripts such as those above
                                  to automatically create object variables. One
                                  consequence of this is that the non-Ecma function
                                  <font face="Courier New, Courier, mono">defined()</font>
                                  will cease to functions as expected in pre-processor
                                  statements such as</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   #if defined(Clib.puts) </font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">This
                                  should only be a problem if you use the <font face="Courier New, Courier, mono">JSE_CONDITIONAL_COMPILE</font>
                                  option. In future releases SE:ISDK will move
                                  processing of <font face="Courier New, Courier, mono">defined()</font>
                                  into the pre-processor for <font face="Courier New, Courier, mono">JSE_CONDITIONAL_COMPILE</font>
                                  builds. If you need this pre-processor code
                                  ask <a href="http://support.nombas.com/">Nombas
                                  Tech Support</a>, or change defined() to use
                                  typeof(). For example, the above statement would
                                  become</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   #if typeof(Clib)!=&quot;undefined&quot; &amp;&amp; typeof(Clib.puts)!=&quot;undefined&quot;</font></pre>
                              </blockquote>
                              <p></p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="rgnrg"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>arguments
                                  object not updating function arguments</b><br>
                                  (for ISDK/C 4.30e) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Bug: If changes are made to a member of the
                                  arguments object, those changes are not being
                                  reflected in the argument itself. I.E., this
                                  example will not update parm_y after arguments[1]
                                  has been changed:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   function foo(parm_x,parm_y,parm_z)
   {
      arguments[1] = &quot;new value&quot;;  // parm_y is not changed
   }</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:
                                  In srccore/var.c, function sevarPutValueEx((),
                                  at about line 780, insert within this block
                                  of code:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   IF_OPERATOR_NOT_OVERLOADED(call,tmpvar,val,seAssignLocal)
   {
      SEVAR_COPY(&(smem->value),val);
   }</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">this
                                  additional code:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   IF_OPERATOR_NOT_OVERLOADED(call,tmpvar,val,seAssignLocal)
   {
      /****** begin additional code ******/
      if( SEVAR_GET_TYPE(&(smem->value))==VReference )
      {
         mem = smem->value.data.ref_val.reference;
         SEVAR_INIT_OBJECT(obj,smem->value.data.ref_val.base);
         goto top;
      }
      else if( SEVAR_GET_TYPE(&(smem->value))==VReferenceIndex )
      {
         mem = smem->value.data.ref_val.reference;
         is_index = True;
         SEVAR_INIT_OBJECT(obj,smem->value.data.ref_val.base);
         goto top;
      }
      /****** end additional code ******/
      SEVAR_COPY(&(smem->value),val);
   }</font></pre>
                              </blockquote>
                              <p></p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="ooia"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>invalid
                                  assert for operator overloading on unary operators</b><br>
                                  (for ISDK/C 4.30e) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Bug: If overloading unary operators with jseSetObjectCallbacks,
                                  and NDEBUG is not defined, and invalid assert
                                  will be triggered.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:
                                  In srccore/varutil.c, function seobjCallDynamicProperty(),
                                  at about line 2534, replace this block of code:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">      if( off_flag==OFF_PUT_PROP
   #   if defined(JSE_OPERATOR_OVERLOADING) && (0!=JSE_OPERATOR_OVERLOADING)
       || off_flag==OFF_OPERATOR_PROP
   #   endif
       || off_flag==OFF_DEFAULTVALUE_PROP )
      {
         assert( Parameter2!=NULL );
      }</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">with
                                  this block:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">      if( off_flag==OFF_PUT_PROP
       || off_flag==OFF_DEFAULTVALUE_PROP )
      {
         assert( Parameter2!=NULL );
      }
   #  if defined(JSE_OPERATOR_OVERLOADING) && (0!=JSE_OPERATOR_OVERLOADING)
      else if ( off_flag==OFF_OPERATOR_PROP )
      {
         /* Parameter2 may or may not be NULL for overloading (because it may be
          * two operators, or a unary operator. No test.
          */
      }
   #  endif</font></pre>
                              </blockquote>
                              <p></p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="nwno"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>'new'
                                  operator accepting non-Object return values</b><br>
                                  (for ISDK/C 4.30e) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Bug: If a constructor returns a variable that
                                  is not an object then that return value is not
                                  being ignored, although it should be. For example,
                                  in the following example <font face="Courier New, Courier, mono">foo</font>
                                  should be set to a <font face="Courier New, Courier, mono">new&nbsp;Object</font>
                                  and not <font face="Courier New, Courier, mono">834</font>.</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   function foomaker()
   {
      return 834;
   }
   var foo = new foomaker();</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:
                                  In srccore/call.c, function callReturnFromFunction(),
                                  at about line 771 replace this line:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( SEVAR_GET_TYPE(tmp)==VUndefined )</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">with
                                  this block:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if ( SEVAR_GET_TYPE(tmp)!=VObject  &amp;&amp;  SEVAR_GET_TYPE(OLD_RETURN)==VObject )</font></pre>
                              </blockquote>
                              <p></p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="cfrtnl"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>jseCallFunction
                                  return variable may be NULL with JSE_FUNC_TRAP_ERRORS</b><br>
                                  (for ISDK/C 4.30e) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Bug: In jseCallFunction() and jseCallFunctionEx(),
                                  if the JSE_FUNC_TRAP_ERROS flag is used and
                                  <font face="Courier New, Courier, mono">returnVar</font>
                                  is not NULL then <font face="Courier New, Courier, mono">*returnVar</font>
                                  is supposed to be assign to some non-NULL value.
                                  But in some cases (usually if a parameter is
                                  not a valid function) this will return with
                                  a non-NULL <font face="Courier New, Courier, mono">*returnVar</font></font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:
                                  In srccore/jselib.c, function jseCallFunctionEx(),
                                  at about line 2612 replace this block:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   #  if ( 0 < JSE_API_ASSERTLEVEL )
   if ( NULL == func )
   {
      STACK_POPX(2);
      SetLastApiError( UNISTR("%s: parameter 2 not a function"),ThisFuncName );
      END_TIMING(call);
      return False;
   }
   #  endif</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">with
                                  this block:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if (  NULL == func )
   {
      STACK_POPX(2);
   #  if ( 0 < JSE_API_ASSERTLEVEL )
         SetLastApiError( UNISTR("%s: parameter 2 not a function"),ThisFuncName );
   #  endif
      END_TIMING(call);
      goto illegal_params;
   }</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">then
                                  at about line 2577 replace this block:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   # if JSE_NAMED_PARAMS==1
   if( SEVAR_GET_TYPE(var)!=VObject )
   {
      SetLastApiError( UNISTR("%s: parameter 2 not a function"),ThisFuncName );
      END_TIMING(call);
      return False;
   }
   #endif</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">with
                                  this:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( SEVAR_GET_TYPE(var)!=VObject )
   {
   #  if ( 0 < JSE_API_ASSERTLEVEL )
         SetLastApiError( UNISTR("%s: parameter 2 not a function"),ThisFuncName );
   #  endif
      END_TIMING(call);
      goto illegal_params;
   }</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Next,
                                  replace the remaining three instances of &quot;return&nbsp;False&quot;
                                  to instead be &quot;goto&nbsp;illegal_params&quot;.
                                  </font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Finally,
                                  at this block of code at the end of the function,
                                  after &quot;<font face="Courier New, Courier, mono">return&nbsp;retbool</font>&quot;;</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2"> illegal_params:
   *retvar = NULL;
   {
      jseVariable func = jseGetMember(call,NULL,UNISTR("Error"));

      if( func )
      {
         jseStack stack;
         jseVariable param;

         stack = jseCreateStack(call);
         /* pass 1 parameter, the string */
         param = jseCreateVariable(call,jseTypeString);
         jsePutString(call,param,UNISTR(&quot;API parameters are invalid&quot;));
         jsePush(call,stack,param,TRUE);

         if( !jseCallFunction(call,func,stack,retvar,NULL) )
         {
            if( *retvar!=NULL )
            {
               jseDestroyVariable(call,*retvar);
               *retvar = NULL;
            }
         }
         jseDestroyStack(call,stack);
      }
   }

   if( *retvar==NULL )
   {
      *retvar = jseCreateVariable(call,jseTypeString);
      jsePutString(call,*retvar,UNISTR(&quot;API parameters are invalid&quot;));
   }
   return FALSE;</font></pre>
                              </blockquote>
                              <p></p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="bddt"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>insufficient
                                  checks on bad dates</b><br>
                                  (for ISDK/C 4.30e) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Bug: Some of the functions in the Date object
                                  are not testing against invalid dates. The results
                                  may be incorrrect, assertioins may be triggered,
                                  or floating-point exceptions may be triggered.</font><font face="Verdana, Arial, Helvetica, sans-serif" size="2">
                                  </font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:
                                  In srclib/ecma/sedate.c, a few locations need
                                  jseIsFinite() tests against the internal date
                                  representation. In function SetYearMonDay(),
                                  add a test after the call to jseGetNumber()
                                  at about line 1967 so it reads:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   t = jseGetNumber(jsecontext,
                    jseMember(jsecontext,thisvar,DATE_VALUE_PROPERTY,jseTypeNumber));
   if ( !jseIsFinite(t) )
      return;</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and
                                  in SetHourMinSecMilli() add a test after jseGetNumber()
                                  at about line 1823 so it reads:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   t = jseGetNumber(jsecontext,
                    jseMember(jsecontext,thisvar,DATE_VALUE_PROPERTY,jseTypeNumber));
   if ( !jseIsFinite(t) )
      return;</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and
                                  in Ecma_Date_toSystem() add a test after jseGetNumberDatum()
                                  at about line 1275 so it reads </font></p>
                              </blockquote>
                              <p></p>
                              <blockquote>
                                <pre><font face="Courier New, Courier, mono" size="2">   units = jseGetNumberDatum(jsecontext,thisvar,DATE_VALUE_PROPERTY);
   if ( !jseIsFinite(units) )
      return NULL;</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="cmpnwth"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>compound
                                  assignment (/=, *=, %=, +=, -=, &lt;&lt;=, &amp;=,
                                  ^=, |=) ignoring with() blocks</b><br>
                                  (for ISDK/C 4.30e) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Bug: The object for a with(object) block is
                                  ignored when evaluating the initial variable
                                  while evaluating a compound assignment.</font><font face="Verdana, Arial, Helvetica, sans-serif" size="2">
                                  </font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:
                                  In srccore/expressn.c, function secompileGetValueKeep(),
                                  at about line 2333, this statement</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( this->with_depth )</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">should
                                  instead be this:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( !this->with_depth )</font></pre>
                              </blockquote>
                              <p></p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="wthprm"></a></font></p>
                              <ul>
                                <li><b><font size="2" face="Verdana, Arial, Helvetica, sans-serif">invalid
                                  name accessing local parameters in a with()
                                  block</font></b><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><br>
                                  (for ISDK/C 4.30e) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Bug: When accessing a variable in a with block,
                                  the wrong variable name is used when testing
                                  a variable against the with object if the variables
                                  is an argument to the function (and not the
                                  first argument). In some cases this will lead
                                  to accessing the wrong name. If this with object
                                  has a get or hasproperty callback this may cause
                                  a program crash. The following example demonstrates
                                  where this may fail:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   function foo(argument1,argument2,argument3)
   {
      var local1, local2, local3;
      with ( someObject )
      {
         local1 = local2;      // OK
         local1 = local3;      // OK
         local1 = argument1;   // OK
         local1 = argument2;   // FAIL
         local1 = argument3;   // FAIL
      }
   }</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:
                                  In srccore/secode.c, function callWithCatchEntry(),
                                  at about line 365, change this line:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   [ (index&lt;=0) ? index : ((struct LocalFunction *)FUNCPTR)-&gt;InputParameterCount+index-1];</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">to
                                  this</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   [ (index&lt;=0) ? -index : ((struct LocalFunction *)FUNCPTR)-&gt;InputParameterCount+index-1];</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Note
                                  that just a single &quot;-&quot; was added.</font></p>
                              </blockquote>
                              <p></p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="msvc6bg"></a></font></p>
                              <ul>
                                <li><b><font face="Verdana, Arial, Helvetica, sans-serif" size="2">MSVC6
                                  memory allocation bugs</font></b><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><br>
                                  (for ISDK/C 4.30e) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Bug: Problems with Microsoft's C++ in Microsoft
                                  Visual C++ 6.0, can cause heap allocation errors
                                  and memory overwrites that can cause crashes
                                  that are extremely erratic and hard to reproduce.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:
                                  If you are using MSVC6, download and install
                                  the Visual Studio 6.0 Service Pack 5 from <a href="http://msdn.microsoft.com/vstudio/sp/vs6sp5/">http://msdn.microsoft.com/vstudio/sp/vs6sp5/</a></font></p>
                              </blockquote>
                              <p></p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="boutopt"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>aboutopt.jse
                                  doesn't work</b><br>
                                  (for ISDK/C 4.30e) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Bug: tools/aboutopt.jse isn't working with any
                                  of the samples. When a finer grain was added
                                  to what functions could be added/removed, we
                                  did not update aboutopt. Also, it wasn't clear
                                  how to execute the abotopt.jse scripts.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:
                                  Updated files for aboutopt.jse may be downloaded
                                  from <a href="ftp://ftp.nombas.com/pub/isdkeval/se430/aboutopt.zip">ftp://ftp.nombas.com/pub/isdkeval/se430/aboutopt.zip</a>.
                                  This aboutopt.jse can be execute frim the compiled
                                  SIMPLE1 sample, with a statement such as:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   W32Simp1.exe tools\aboutopt.jse seisdk\samples\simple1\jseopt.h __JSE_WIN32__ _MSC_VER JSE_ASCII</font></pre>
                              </blockquote>
                              <p></p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="abtry"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>terminating
                                  execution from within a &quot;try&quot; block
                                  will cause memory leaks</b><br>
                                  (for ISDK/C 4.30e) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Bug: If execution is terminated while a script
                                  is within a try block, such as if the jseMayIContinue
                                  callback function returns False or by calling
                                  jseLibSetExitFlag(), then some allocated memory
                                  will not be freed and the system may crash.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:
                                  In srccore/call.c, function callDelete(), add
                                  this to the local variables at the beginning
                                  of the function:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   struct TryBlock *loop;</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and
                                  add this block to the end of the function, just
                                  before the jseMustFree(call) statement at about
                                  line 1252:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   for( loop = call-&gt;tries;loop!=NULL; )
   {
      struct TryBlock *prev = loop-&gt;prev;
   </font>
<font face="Courier New, Courier, mono" size="2">      jseMustFree(loop);
      loop = prev;
   }</font></pre>
                                <p><font face="Courier New, Courier, mono" size="2">
                                  <font face="Verdana, Arial, Helvetica, sans-serif">and
                                  in srccore/secode.c, function secodeInterpret(),
                                  19 lines beyond the &quot;handle_finally:&quot;
                                  label, replace these lines (at about line 626):</font></font></p>
                                <pre>   <font size="2" face="Courier New, Courier, mono">if( CALL_QUIT(call) )
      call-&gt;stackptr = call-&gt;tries-&gt;sptr;</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">with
                                  these:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( call-&gt;state==FlowError )</font><font face="Courier New, Courier, mono" size="2">
      call-&gt;stackptr = call-&gt;tries-&gt;sptr;</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="nthsfpo"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>seObjHasProperty
                                  causing floating-point overflow if not handled
                                  by callback</b><br>
                                  (for ISDK/C 4.30e) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Bug: On some systems, if an object has a hasProp
                                  callback that returns -1, or if the dynamic
                                  object does not have a hasProp, then a floating-point
                                  overflow exception can occur.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:
                                  In srccore/varutil.c, function seobjHasProperty(),
                                  at line 2985change this line:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   ret = (jsebool)JSE_FP_CAST_TO_SLONG(SEVAR_GET_NUMBER_VALUE(value));</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">to
                                  this:</font></p>
                                <pre>   if ( handled )
      ret = (jsebool)JSE_FP_CAST_TO_SLONG(SEVAR_GET_NUMBER_VALUE(value));</pre>
                              </blockquote>
                              <p></p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="infnan"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>&quot;+Infinity
                                  and &quot;-Infinity&quot; converted to NaN if
                                  JSE_FLOATING_POINT==0</b><br>
                                  (for ISDK/C 4.30e) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Bug: If building in integer-only mode (i.e.&nbsp;#define&nbsp;JSE_FLOATING_POINT&nbsp;0),
                                  &quot;+Infinity&quot; and &quot;-Infinity&quot;
                                  will be read incorrectly and converted to NaN.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:
                                  In srccore/util.c, function convertStringToNumber(),
                                  there are two places with this block of code
                                  (line 2003 and 2010):</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   #           if (0!=JSE_FLOATING_POINT)
                  lenParsed++;
   #           endif</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">in
                                  both cases the conditionals should be removed,
                                  so the above blocks are replaced with the single
                                  line:</font></p>
                                <pre>               lenParsed++;</pre>
                              </blockquote>
                              <p></p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="stkcntno"></a></font></p>
                              <ul>
                                <li><b><font size="2" face="Verdana, Arial, Helvetica, sans-serif">stack
                                  variable overwrite when jseMayIContinueFunc
                                  returns False</font></b><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><br>
                                  (for ISDK/C 4.30e) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Bug: When your jseMayIContinueFunc() callback
                                  returns False, a variable within the virtual-machine
                                  stack may be wrongly assigned as undefined.
                                  This could lead to a variable being freed prematurely.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:
                                  In srccore/jselib.c.c, function jseInterpret(),
                                  at about line 662, replace these lines:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">               seVar tmp = STACK_PUSH;

</font><font face="Courier New, Courier, mono" size="2">               SEVAR_INIT_UNDEFINED(tmp);</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">with
                                  this</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   #           define call newc
               seVar tmp = STACK_PUSH;
               SEVAR_INIT_UNDEFINED(tmp);
   #           undef call</font></pre>
                              </blockquote>
                              <p>&nbsp;</p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="linkleak"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>memory
                                  leak, and possible crash, using the #link statement</b><br>
                                  (for ISDK/C 4.30e) </font></li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                  Bug: Memory leaks and possible crashes using
                                  the #link statement. The memory leak fix is
                                  for Unix only, but the possible crash in running
                                  out of memory applies to all systems.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:
                                  In srccore/extlib.c, function extensionFindLibPath(),
                                  at about line 499, replace this line:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( !Success )</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">with
                                  this</font></p>
                                <pre> <font face="Courier New, Courier, mono" size="2">if( !Success && FileName!=NULL )</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and
                                  extensionLibraryStartup(), at about line 597
                                  replace this block</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   #if defined(__JSE_UNIX__)
      {
         jsechar buffer[256];
         jse_sprintf(buffer,&quot;lib%s&quot;,LibraryName);
         FullLibraryPath = extensionFindLibPath(this,buffer,call);
      }
      assert( sizeof_jsechar('\0') == sizeof(jsecharptrdatum) );
      if( FullLibraryPath==NULL || *((jsecharptrdatum*)FullLibraryPath)=='\0' )
   #endif
         FullLibraryPath = extensionFindLibPath(this,LibraryName, call);</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">with
                                  this block</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   #if defined(__JSE_UNIX__)
      {
         jsechar buffer[256];
         jse_sprintf(buffer,&quot;lib%s&quot;,LibraryName);
         FullLibraryPath = extensionFindLibPath(this,buffer,call);
      }
      assert( sizeof_jsechar('\0') == sizeof(jsecharptrdatum) );
      if( FullLibraryPath==NULL || *((jsecharptrdatum*)FullLibraryPath)=='\0' )
      {
         if( FullLibraryPath!=NULL ) jseMustFree(FullLibraryPath);
         FullLibraryPath = extensionFindLibPath(this,LibraryName, call);
      }
   #else
      FullLibraryPath = extensionFindLibPath(this,LibraryName, call);
   #endif</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and
                                  then at about line 611, replace this block</font></p>
                                <pre>   <font face="Courier New, Courier, mono" size="2">callError(call,textcoreLINK_LIBRARY_NOT_EXISTS,LibraryName);
   jseMustFree(FullLibraryPath);
   return False;</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">with
                                  this</font></p>
                                <pre><font face="Verdana, Arial, Helvetica, sans-serif" size="2">     <font face="Courier New, Courier, mono">callError(call,textcoreLINK_LIBRARY_NOT_EXISTS,LibraryName);
   if( FullLibraryPath ) jseMustFree(FullLibraryPath);
   return False;</font></font></pre>
                              </blockquote>
                              <p>&nbsp;</p>
                              <hr width="90%">
                              <p><b>for 4.30d --</b> (may apply to earlier versions)</p>
                              <p></p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="numpm"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>ToNumber()
                                  returns incorrect values for "+" and "-"</b><br>
                                  (for ISDK/C 4.30d)</font>
                                  <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">
                                    Bug: When ToNumber() is called with either
                                    "+" or "-" as its argument, the return value
                                    should be NaN. Instead, ToNumber() is returning
                                    Infinity and -Infinity, respectively.</font></p>
                                </li>
                              </ul>
                              <ul>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>:
                                  In srccore/util.c, function convertStringToNumber(),
                                  at about line 1947, change this code:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if ( lenParsed == lenStr )
   {
      val = neg ? jseNegInfinity : jseInfinity ;
   }</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">to
                                  this</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if ( lenParsed == lenStr &amp;&amp; 2&lt;lenStr )</font></pre>
                              </ul>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="cmprhnt"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Object
                                  comparisons with wrong hint - Date comparisons
                                  fail</b><br>
                                  (for ISDK/C 4.30d)</font>
                                  <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">
                                    Bug: Object comparison (&lt;, &lt;=, &gt;,
                                    &gt;=) are not correctly following the hint
                                    logic specified in section 11.8.5 (The Abstract
                                    Relational Comparison Algorithm) of the ECMAScript
                                    specification. When objects are converted
                                    to a primitive value for comparison they should
                                    be give &quot;hint Number&quot;. This would
                                    only show up as a problem for any object that
                                    does not have number as its default primitive;
                                    the Date object is such an example, and so
                                    the following test fails for the date object
                                    because it is comparing as a string (the default
                                    Date primitive type) instead of as a Nuimber
                                    (the hint type for comparison).</font></p>
                                </li>
                                <pre><font face="Courier New, Courier, mono" size="2">   newer = new Date(&quot;Thu Oct 4 15:54:25 2001&quot;);
   older = new Date(&quot;Tue Sep 25 15:54:25 2001&quot;);
   Test.assert( older &lt; newer ); // fails because comparing as string</font></pre>
                              </ul>
                              <ul>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>:
                                  In srccore/varutil.c, function sevarECMACompareLess(),
                                  change the first two instances of this code
                                  (at lines 760 and 769):</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   sevarConvert(call,tmp,jseToPrimitive);</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">
                                  to this</font><font face="Courier New, Courier, mono" size="2"></font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   sevarConvertToPrimitive(call,tmp,VNumber);</font></pre>
                              </ul>
                              <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a name="dfncargdep"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>function.arguments
                                  deprecated</b><br>
                                  (for ISDK/C 4.30d) </font>
                                  <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                                    Warning: The arguments property of a Function
                                    object is an old leftover from erly javascript,
                                    and has been deprecated in current EcmaScript
                                    standards. For most applications function.arguments
                                    is a drawback because it may lock in varaibles
                                    longer than is wanted and may slow overall
                                    execution. Unles you are writing a web browser
                                    that must support very old javascript, we
                                    recommend disabling function.arguments (note,
                                    the arguments object remains valid).</font>
                                  </p>
                                </li>
                              </ul>
                              <blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:
                                  In srccore/secode.h, add the following lines
                                  where other compile-time options are being defined
                                  (around line 100):</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   #if !defined(JSE_FUNCTION_ARGUMENTS)
      /* by default, function.arguments is off.  It's archaic and requires way too
       * many links to constantly be created.
       */
   #  define JSE_FUNCTION_ARGUMENTS 0
   #endif</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">In
                                  srccore/var.c, function seobjGetMemberStruct(),
                                  at about line 918 enclose the very first block
                                  in a conditional like this:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   #  if JSE_FUNCTION_ARGUMENTS==1
      /* If this is 'arguments', recreate appropriate arguments object
       * for this item. callCreateVariableObject will recreate it for
       * this function if need be. This makes sure the latest 'arguments'
       * are here while deferring building until needed.
       */
      if( Name==call-&gt;Global-&gt;global_strings[arguments_entry] &amp;&amp;
          SEOBJ_GET_FUNCTION(this)!=NULL )
      {
         callCreateVariableObject(call,SEOBJ_GET_FUNCTION(this),0);
      }
   #  endif </font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">And
                                  in srccore/call.c, function callCreateVariableObject(),
                                  at about line 982, wrap two statements within
                                  a conditional like this:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   #        if JSE_FUNCTION_ARGUMENTS==1
            {
               seObjectMem tmp2;
               tmp2 = seobjNewMember(call,SEVAR_GET_OBJECT(FUNCVAR),
                                     GLOBAL_STRING(call,arguments_entry),&amp;found);
               SEVAR_INIT_OBJECT(&amp;(tmp2-&gt;value),SEVAR_GET_OBJECT(&amp;(tmp-&gt;value)));
            }
   #        endif </font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and
                                  remove the original declaration for tmp2 from
                                  the top of that function.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">function.arguments
                                  is now disabled. To enable it, recompile with
                                  #define&nbsp;JSE_FUNCTION_ARGUMENTS&nbsp;1</font></p>
                              </blockquote>
                              <font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                              <p><a name="dfncstrcat"></a></p>
                              <ul>
                                <li><b>toString on functions concatenates some
                                  identifiers</b><br>
                                  (for ISDK/C 4.30d)
                                  <p> Bug: When a function is being converted
                                    to a string, a required space may not be displayed
                                    after some variables. For example, this code:</p>
                                </li>
                                <blockquote>
                                  <pre>function blah()
{
   for (var prop in obj);
}
display(&quot;&quot; + blah);</pre>
                                </blockquote>
                              </ul>
                              <blockquote>
                                <p>may produce this output (note that &quot;prop&quot;
                                  and &quot;in&quot; have become concatenated):</p>
                                <blockquote>
                                  <pre>function blah()
{
   for (var propin obj);
}
</pre>
                                </blockquote>
                                <p><b>Fix</b>: In srccore/function.c, function
                                  functionTextAsVariable(), at about line 283,
                                  change the seTokIdentifier to add a space after
                                  each identifier, as in:</p>
                                <blockquote>
                                  <pre>else if( type==seTokIdentifier )
{
   growingAddTo(&amp;buff,GetStringTableEntry(call,tokGetName(c),NULL));
   growingAddTo(&amp;buff,UNISTR(&quot; &quot;));
}</pre>
                                </blockquote>
                              </blockquote>
                              <p><a name="drgcdyn"></a></p>
                              <ul>
                                <li><b>rare GC problem on dynamic objects</b><br>
                                  (for ISDK/C 4.30d)
                                  <p> Problem: In very rare circumstances, a garbage-collection
                                    may occur during manipulation of a dynamic
                                    object callback that could invalidate an internal
                                    stack variable. This has never been found
                                    to happen in the field, but new internal debugging
                                    code has detected the possibility.</p>
                                  <p><b>Fix</b>: In srccore/secode.c, function
                                    secodeInterpret(), within &quot;case&nbsp;sePreIncLocal:&quot;,
                                    at about line 758 are these statements:</p>
                                  <blockquote>
                                    <pre>c_lhs = STACK_PUSH;
c_rhs = STACK_PUSH;</pre>
                                  </blockquote>
                                  <p>which should be followed by these statements:
                                  </p>
                                  <blockquote>
                                    <pre>SEVAR_INIT_UNDEFINED(c_lhs);
SEVAR_INIT_UNDEFINED(c_rhs);
</pre>
                                  </blockquote>
                                  <p>and in srccore/jselib.c, function jseCallFunctionEx(),
                                    at about line 2534, this statement:</p>
                                  <blockquote>
                                    <pre>onstack = STACK_PUSH;</pre>
                                  </blockquote>
                                  <p>should be followed by this statement:</p>
                                  <blockquote>
                                    <pre>SEVAR_INIT_UNDEFINED(onstack);
           </pre>
                                  </blockquote>
                                </li>
                              </ul>
                              <p><a name="dgetinhas"></a></p>
                              <ul>
                                <li><b>get callback may crash during seobjHasProperty()</b><br>
                                  (for ISDK/C 4.30d)
                                  <p> Bug: dynamic get callback crash when called
                                    during seobjHasProperty() to determine if
                                    the propery exists.</p>
                                  <p><b>Fix</b>: In srccore/varutil.c, function
                                    seobjHasProperty(), locate this block of code,
                                    at about line 2978, beginnning with this text</p>
                                </li>
                              </ul>
                              <blockquote>
                                <blockquote>
                                  <pre>{
   /* either no dynamic _hasProperty (!handled) or
    * _hasProperty says 'yes it has the property' and</pre>
                                </blockquote>
                                <p>and replace the block with this code:</p>
                                <blockquote>
                                  <pre>{
   /* either no dynamic _hasProperty (!handled) or
    * _hasProperty says 'yes it has the property' and
    * dest is not NULL, so we need to retrieve the property
    * In either case, we have to do a dynamic get because we
    * need the value
    */
   seVar rhs = STACK_PUSH;

   SEVAR_INIT_OBJECT(rhs,obj);

   if( dest==NULL ) dest = rhs;

   if( seobjCallDynamicProperty(call,obj,OFF_GET_PROP,propname,False,dest) )
   {
      /* If hasProperty says yes, then undefined means undefined. Otherwise,
       * Undefined is the only way to differentiate a has it from does not
       * have it.
       */
      jsebool ret = (SEVAR_GET_TYPE(dest)!=VUndefined) || handled;
      if( ret &amp;&amp; ref )
      {
         SEVAR_INIT_REFERENCE(dest,obj,propname);
      }
      STACK_POP;
      return ret;
   }
   if ( dest==rhs ) dest = NULL;
   STACK_POP;
   /* fallthru because not valid */
}</pre>
                                </blockquote>
                                <p>also note in <a href="#430dvarfooundef">related
                                  incident</a> that in this same function</p>
                              </blockquote>
                              <ul>
                                <blockquote>
                                  <pre>if( dest!=NULL ) assert( sevarIsValid(call,dest) );</pre>
                                </blockquote>
                              </ul>
                              <blockquote>
                                <p>was changed to</p>
                              </blockquote>
                              <ul>
                                <blockquote>
                                  <pre>assert( dest==NULL || sevarIsValid(call,dest) );</pre>
                                </blockquote>
                              </ul>
                              <p><a name="430dseunicpp"></a></p>
                              <ul>
                                <li><b>C++ compilation errors for seuni.h</b><br>
                                  (for ISDK/C 4.30d) </li>
                              </ul>
                              <blockquote>
                                <p> Problem: SEUNI.H causes compilation errors
                                  for some C++ compilers.</p>
                                <p><b>Fix</b>: Lines in srcmisc/seuni.h have been
                                  re-ordered so the __cplusplus statements surround
                                  only the statements and not other include files.
                                  This updated seuni.h may be downloaded from
                                  <a href="ftp://ftp.nombas.com/pub/isdkeval/se430/seuni.h">ftp://ftp.nombas.com/pub/isdkeval/se430/seuni.h</a>.</p>
                              </blockquote>
                              <p><a name="430dalterarg"></a></p>
                              <ul>
                                <li><b>altering &quot;arguments&quot; causes assertion
                                  failure</b><br>
                                  (for ISDK/C 4.30d) </li>
                              </ul>
                              <blockquote>
                                <p> Problem: Using &quot;var&quot; or assigning
                                  to the &quot;arguments&quot; variable will cause
                                  an assertion failure in !NDEBUG versions.</p>
                                <p><b>Fix</b>: In srccore/call.c, function callCreateVariableObject(),
                                  at about line 977, replace this code:</p>
                                <blockquote>
                                  <pre>tmp = SEOBJ_CREATE_MEMBER(call,tmpobj,GLOBAL_STRING(call,arguments_entry));</pre>
                                </blockquote>
                                <p>with this code:</p>
                                <blockquote>
                                  <pre>tmp = seobjNewMember(call,tmpobj,GLOBAL_STRING(call,arguments_entry),&amp;found);
if ( found ) return;</pre>
                                </blockquote>
                                <p></p>
                              </blockquote>
                              <p><a name="430dcsivo"></a></p>
                              <ul>
                                <li><b>jseCallStackInfo() can crash using Variable
                                  object</b><br>
                                  (for ISDK/C 4.30d) </li>
                              </ul>
                              <blockquote>
                                <p> Problem: using jseCallStackInfo() to access
                                  a Variable object of a script function in the
                                  stack can crash.</p>
                                <p><b>Fix</b>: In srccore/call.h, find callCreateVariableObject()
                                  (about line 979) and add a final 'depth' parameter,
                                  as in:</p>
                                <blockquote>
                                  <pre>callCreateVariableObject(struct Call *call,struct Function *func,uint depth);</pre>
                                </blockquote>
                                <p>also in srccore/call.c, find callCreateVariableObject()
                                  function (near line 827), and add the final
                                  'depth' parameter, as in:</p>
                                <blockquote>
                                  <pre>   void NEAR_CALL
callCreateVariableObject(struct Call *call,struct Function *lookfunc,uint depth)</pre>
                                </blockquote>
                                <p>find this code in callCreateVariableObject()
                                  (near line 848)</p>
                                <blockquote>
                                  <pre>/* Find the enclosing local function */
while( !FUNCTION_IS_LOCAL(func_orig) || (lookfunc!=NULL &amp;&amp; lookfunc!=func_orig) )</pre>
                                </blockquote>
                                <p>and replace with this code</p>
                                <blockquote>
                                  <pre>/* Find the enclosing local function */
while( !FUNCTION_IS_LOCAL(func_orig) || (lookfunc!=NULL &amp;&amp; lookfunc!=func_orig) || depth--&gt;0 )</pre>
                                </blockquote>
                                <p>In srccore/jselib.c, function jseCallStackInfo(),
                                  at about line 2904, after this line</p>
                                <blockquote>
                                  <pre>TIMING(call,se);</pre>
                                </blockquote>
                                <p>add this line</p>
                                <blockquote>
                                  <pre>callCreateVariableObject(call,NULL,depth);</pre>
                                </blockquote>
                                <p>All other calls to callCreateVariableObject()
                                  should receive 0 (zero) as the last parameter.</p>
                              </blockquote>
                              <p><a name="430devalnotthis"></a></p>
                              <ul>
                                <li><b>eval() does not propogate the &quot;this&quot;
                                  of its caller</b><br>
                                  (for ISDK/C 4.30d) </li>
                              </ul>
                              <blockquote>
                                <p> Problem: eval() does not propogate the 'this'
                                  of its caller.</p>
                                <p><br>
                                  <b>Fix</b>: In srclib/ecma/ecmamisc.c, the Ecma_eval()
                                  wrapper function at about line 58, change<br>
                                  the reference to JSE_INTERPRET_KEEPTHIS in the
                                  jseInterpret<br>
                                  call to JSE_INTERPRET_PARENTTHIS.</p>
                                <p><br>
                                  In incjse/jselib.h, add the following definition.
                                  Put it near the<br>
                                  existing JSE_INTERPRET_XXX definitions, near
                                  line 1546:</p>
                                <p></p>
                                <blockquote>
                                  <pre>#define JSE_INTERPRET_PARENTTHIS 0x100
/* Use the 'this' variable from the calling function */</pre>
                                </blockquote>
                                <p>In srccore/interprt.c, interpretInit() near
                                  line 306, there is a call to RunCompiledCode()
                                  that looks like this:</p>
                                <p></p>
                                <blockquote>
                                  <pre>RunCompiledCode(InterpretCall,argc,argv,CallMain,
                (HowToInterpret &amp; JSE_INTERPRET_KEEPTHIS)?
                   SEVAR_GET_OBJECT(CALL_THIS):
                   CALL_GLOBAL(InterpretCall),HowToInterpret);</pre>
                                </blockquote>
                                <p></p>
                                <p> change this to:</p>
                                <blockquote>
                                  <pre>{
   seObject this_obj = NULL;

   if( (HowToInterpret&amp;JSE_INTERPRET_KEEPTHIS)!=0
    &amp;&amp; FRAME!=NULL )
   {
      this_obj = SEVAR_GET_OBJECT(CALL_THIS);
   }
   if( this_obj==NULL
    &amp;&amp; (HowToInterpret&amp;JSE_INTERPRET_PARENTTHIS)!=0 )
   {
      if( FRAME!=NULL )
      {
         STACKPTR old_frame;
         uword16 old_num_args;

         old_num_args = (uword16)SEVAR_GET_STORAGE_LONG(OLD_ARGS);
         old_frame = SEVAR_GET_STORAGE_PTR(OLD_FRAME);

         if( old_frame )
         {
            this_obj = SEVAR_GET_OBJECT(old_frame-(THIS_OFFSET+old_num_args));
         }
      }
   }
   if( this_obj==NULL )
   {
      this_obj = CALL_GLOBAL(InterpretCall);
   }
   RunCompiledCode(InterpretCall,argc,argv,CallMain,
                   this_obj,HowToInterpret);
   }</pre>
                                </blockquote>
                              </blockquote>
                              <p><a name="430dgcrecur"></a></p>
                              <ul>
                                <li><b>jseGarbageCollect() can call recursively,
                                  corrupting data</b><br>
                                  (for ISDK/C 4.30d) </li>
                              </ul>
                              <blockquote>
                                <p> Problem: jseGarbageCollect(...,JSE_GARBAGE_COLLECT),
                                  if called within an action of the garbage collector
                                  itself, can tigger recursive GC that will corrupt
                                  data.</p>
                                <p> <b>Fix</b>: In srccore/util.c, function jseGarbageCollect(),
                                  at about line 332, replace the code for &quot;case&nbsp;JSE_GARBAGE_COLLECT&quot;
                                  with this code:</p>
                                <blockquote>
                                  <pre>case JSE_GARBAGE_COLLECT:
   garbageCollect(jsecontext);
   break;
</pre>
                                </blockquote>
                              </blockquote>
                              <p><a name="430dtrapaterr"></a></p>
                              <ul>
                                <li><b>Errors during jseCallFunction set &quot;trapped=True&quot;
                                  in jseAtErrorFunc()</b><br>
                                  (for ISDK/C 4.30d) </li>
                              </ul>
                              <blockquote>
                                <p> Problem: Errors in code executed via jseCallFunction()
                                  always have 'trapped = TRUE' in the jseAtErrorFunc
                                  callback.</p>
                                <p> <b>Fix</b>: In srccore\call.h, add to the
                                  end of the 'struct Global_' definition (near
                                  line 627):</p>
                                <p></p>
                                <blockquote>
                                  <pre>STACKPTR call_func_mark;</pre>
                                </blockquote>
                                <p></p>
                                <p>In srccore\call.c:~1493, in the function 'callErrorTrapped',
                                  change this line:</p>
                                <p></p>
                                <blockquote>
                                  <pre>if( !tries-&gt;incatch &amp;&amp; tries-&gt;catch!=(ADDR_TYPE)-1 )</pre>
                                </blockquote>
                                <p></p>
                                <p>to:</p>
                                <p></p>
                                <blockquote>
                                  <pre>if( !tries-&gt;incatch &amp;&amp; tries-&gt;catch!=(ADDR_TYPE)-1
 &amp;&amp; ( call-&gt;Global-&gt;call_func_mark==NULL
   || tries-&gt;fptr&gt;call-&gt;Global-&gt;call_func_mark ) )</pre>
                                </blockquote>
                                <p></p>
                                <p>In srccore\jselib.c function jseCallFunctionEx()
                                  line 2562, get rid of this line:</p>
                                <p></p>
                                <blockquote>
                                  <pre>call-&gt;mustPrintError = False;</pre>
                                </blockquote>
                                <p></p>
                                <p>and replace it with:</p>
                                <p></p>
                                <blockquote>
                                  <pre>call_func_mark_save = call-&gt;Global-&gt;call_func_mark;
call-&gt;Global-&gt;call_func_mark = FRAME;
if( flags&amp;JSE_FUNC_TRAP_ERRORS )
   call-&gt;mustPrintError = FALSE;</pre>
                                </blockquote>
                                <p></p>
                                <p>then right after the 'callFunctionFully()'
                                  (the next line in the file), add:</p>
                                <p></p>
                                <blockquote>
                                  <pre>call-&gt;Global-&gt;call_func_mark = call_func_mark_save;</pre>
                                </blockquote>
                                <p></p>
                                <p>at the top of that same function, add the local
                                  variable:</p>
                                <p></p>
                                <blockquote>
                                  <pre>STACKPTR call_func_mark_save;</pre>
                                </blockquote>
                                <p></p>
                                <p>In srccore/util.c:~1836, function callPrintError(),
                                  find this line:</p>
                                <p></p>
                                <blockquote>
                                  <pre>seVar loc = STACK_PUSH;</pre>
                                </blockquote>
                                <p></p>
                                <p>Remove the initialization (i.e. alter this
                                  line) to make:</p>
                                <p></p>
                                <blockquote>
                                  <pre>seVar loc;</pre>
                                </blockquote>
                                <p></p>
                                <p>and add:</p>
                                <p></p>
                                <blockquote>
                                  <pre>loc = STACK_PUSH;</pre>
                                </blockquote>
                                <p></p>
                                <p>after this line:</p>
                                <p></p>
                                <blockquote>
                                  <pre>if( call-&gt;errorPrinted ) return;</pre>
                                </blockquote>
                              </blockquote>
                              <p><a name="430dstarrnotobj"></a></p>
                              <ul>
                                <li><b>static Array initializer is not instanceof
                                  Object</b><br>
                                  (for ISDK/C 4.30d) </li>
                              </ul>
                              <blockquote>
                                <p> Bug: When an Array object is initialized with
                                  a static Array Initialiser, as in this code:</p>
                                <blockquote>
                                  <pre>var foo = [ 1, 2, 3 ];</pre>
                                </blockquote>
                                <p>is is recognized as &quot;instanceof Array&quot;
                                  but is not recognized as &quot;instanceof Object&quot;.</p>
                                <p><b>Fix</b>: In srccore/secode.c, function secodeInterpret(),
                                  &quot;case seInstanceof:&quot;, at about line
                                  2057 is this comment:</p>
                                <blockquote>
                                  <pre>/* at any rate, this is the last chance. */</pre>
                                </blockquote>
                                <p>to fix this bug, insert the following code
                                  ahead of that comment, so it reads:</p>
                                <blockquote>
                                  <pre>/* finally, all objects inherit from Object */
else if ( call-&gt;PrototypeCache.Object
       == functionPrototype-&gt;data.object_val.obj )
   result = True;

/* at any rate, this is the last chance. */ </pre>
                                </blockquote>
                              </blockquote>
                              <p><a name="430demptobjinit"></a></p>
                              <ul>
                                <li><b>empty Object initializer creates an Array
                                  object; should be an Object object</b><br>
                                  (for ISDK/C 4.30d) </li>
                              </ul>
                              <blockquote>
                                <p> Bug: When an object is initialized with the
                                  empty set, as in this code:</p>
                                <blockquote>
                                  <pre>var foo = { };</pre>
                                </blockquote>
                                <p>it is initialized as a type Array object, although
                                  it should be an Object object.</p>
                                <p><b>Fix</b>: In srccore/expressn.c, function
                                  secompileObject(), at about line 1529, change
                                  this line:</p>
                                <blockquote>
                                  <pre>if( tokType(&amp;tok)!=':' )</pre>
                                </blockquote>
                                <p>to this</p>
                                <blockquote>
                                  <pre>if( tokType(&amp;tok)!=':' &amp;&amp; tokType(this-&gt;token)!='}' )</pre>
                                </blockquote>
                              </blockquote>
                              <p><a name="430dinfdynerr"></a></p>
                              <ul>
                                <li><b>infinite loop if accessing dynamic callback
                                  object reports an error</b><br>
                                  (for ISDK/C 4.30d) </li>
                              </ul>
                              <blockquote>
                                <p> Bug: A dynamic member is passed to a function.
                                  If the dynamic object is implemented via callbacks,
                                  and the dynamic member access results in an
                                  error (i.e. the callback uses jseLibErrorPrintf),
                                  an infinite loop and crash results.</p>
                                <p><b>Fix</b>: In srccore/varutil.c, the function
                                  seobjCallDynamicProperty() locate these lines
                                  at about line 2648:</p>
                                <p></p>
                                <blockquote>
                                  <pre>CALL_KILL_TEMPVARS(call,mark);


if( done || CALL_QUIT(call) ) return True;</pre>
                                </blockquote>
                                <p></p>
                                <p>Right between them add the following code:</p>
                                <p></p>
                                <blockquote>
                                  <pre>if( CALL_QUIT(call) &amp;&amp; result!=NULL )
{
   SEVAR_INIT_UNDEFINED(result);
}</pre>
                                </blockquote>
                              </blockquote>
                              <p><a name="430dconswerr"></a></p>
                              <ul>
                                <li><b>&quot;continue&quot; within &quot;switch&quot;
                                  statement jumps to wrong condition</b><br>
                                  (for ISDK/C 4.30d) </li>
                              </ul>
                              <blockquote>
                                <p> Bug: The &quot;continue&quot; statement, when
                                  within a &quot;switch&quot; block, will associate
                                  its condition with the &quot;switch&quot; statement
                                  instead of the enclosing loop.<br>
                                </p>
                                <p><b>Fix</b>: In srccore/secode.h, at about line
                                  666, add this to the &quot;loopTracker&quot;
                                  structure:</p>
                                <blockquote>
                                  <pre>jsebool is_switch;</pre>
                                </blockquote>
                                <p>and at line 776 change the prototype to:</p>
                                <blockquote>
                                  <pre>secompileNewLoop(struct secompile *handle,struct gotoItem *label,jsebool is_switch);</pre>
                                </blockquote>
                                <p>Then in srccore/statement.c, all calls to secompileNewLoop()
                                  get a third False parameter, except for the
                                  one in secompileSwitch() which adds True as
                                  its third parameter (at about line 444).</p>
                                <p>Then in srccore/expressn.c, at about line 574,
                                  change the secompileNewLoop code to this:</p>
                                <blockquote>
                                  <pre>   void NEAR_CALL
secompileNewLoop(struct secompile *this,struct gotoItem *label,jsebool is_switch)
{
   struct loopTracker *t = looptrackerNew();
   t-&gt;next = this-&gt;loopTrack;
   this-&gt;loopTrack = t;
   t->is_switch = is_switch;

   if( label!=NULL ) label-&gt;loop = t;
}</pre>
                                </blockquote>
                                <p>and at about line 621 change secompileAddContinue()
                                  to this:</p>
                                <blockquote>
                                  <pre>   jsebool NEAR_CALL
secompileAddContinue(struct secompile *this,struct loopTracker *it)
{
   if( it==NULL )
   {
      it = this-&gt;loopTrack;
      while( it!=NULL &amp;&amp; (it-&gt;is_switch) )
         it = it-&gt;next;
   }

   /* add a continue (goto), but mark it so it can be back-filled later
    * when we figure out where break goes to!
    */
   if( it==NULL )
   {
      callQuit(this-&gt;call,textcoreBAD_BREAK);
      return False;
   }
   looptrackerAddContinue(it,secompileCurrentItem(this));
   secompileAddItem(this,seTransfer,(ADDR_TYPE)0);
   return True;
}</pre>
                                </blockquote>
                                <p>and, finally, in srccore/statemnt.c, function
                                  secompileStatement(), within the &quot;case
                                  seTokContinue&quot;, at about line 943, change
                                  this code:</p>
                                <blockquote>
                                  <pre>it = this-&gt;gotoTrack-&gt;labels[x].loop;
if( it==NULL )
{</pre>
                                </blockquote>
                                <p>to this</p>
                                <blockquote>
                                  <pre>it = this-&gt;gotoTrack-&gt;labels[x].loop;
if( it==NULL || (it-&gt;is_switch &amp;&amp; !isbreak) )
{</pre>
                                </blockquote>
                              </blockquote>
                              <p><a name="430dvarfooundef"></a></p>
                              <ul>
                                <li><b>&quot;var foo&quot; keyword in jseInterpret()
                                  or eval() makes &quot;foo&quot; undefined</b><br>
                                  (for ISDK/C 4.30d) </li>
                              </ul>
                              <blockquote>
                                <p> Error: The &quot;var&quot; statement in jseInterp()
                                  or eval() calls is always resetting the variable
                                  to undefined even when it already exists in
                                  scope.<br>
                                </p>
                                <p><b>Fix</b>: In srrccore/varutil.c near the
                                  beginning of function seobjHasProperty(), at
                                  about line 2918, change this line</p>
                                <blockquote>
                                  <pre>assert( sevarIsValid(call,dest) );</pre>
                                </blockquote>
                                <p>to this line</p>
                                <blockquote>
                                  <pre>// old version: if( dest!=NULL ) assert( sevarIsValid(call,dest) );
assert( dest==NULL || sevarIsValid(call,dest) );
</pre>
                                </blockquote>
                                <p>and in srccore/call.c in function callFunction(),
                                  at line 564, change this block</p>
                                <blockquote>
                                  <pre>else
{
   SEVAR_INIT_UNDEFINED(tmp);
}
SEVAR_DO_PUT(call,loc,tmp);</pre>
                                  <pre>/* no need to set the attributes directly, the variable object</pre>
                                </blockquote>
                                <p>to this block</p>
                                <blockquote>
                                  <pre>else
{
   SEVAR_INIT_UNDEFINED(tmp);
}
assert( SEVAR_GET_TYPE(loc)==VReference );
if( SEVAR_GET_TYPE(tmp)!=VUndefined ||
    !seobjHasProperty(call,
           loc-&gt;data.ref_val.base,
           loc-&gt;data.ref_val.reference,
           NULL,
           FALSE) )
{
   SEVAR_DO_PUT(call,loc,tmp);
} </pre>
                                  <pre>
/* no need to set the attributes directly, the variable object</pre>
                                </blockquote>
                              </blockquote>
                              <p><a name="430dapigrow"></a></p>
                              <ul>
                                <li><b>api jseString table growing without bounds
                                  - slowing callbacks</b><br>
                                  (for ISDK/C 4.30d) </li>
                              </ul>
                              <blockquote>
                                <p> Bug: The api jseString table (which holds
                                  strings visible to callbacks) may be growing
                                  without bounds, causing overall system performance
                                  (especially of callbacks) to degrade over time.<br>
                                </p>
                                <p><b>Fix</b>: In srccore/util.c, at about line
                                  312, replace the callRemoveApiStringEntry()
                                  function with the one found at <a href="ftp://ftp.nombas.com/pub/isdkeval/se430/callremoveapistringentry.c">ftp://ftp.nombas.com/pub/isdkeval/se430/callremoveapistringentry.c</a></p>
                              </blockquote>
                              <p><a name="430dvnoloc"></a></p>
                              <ul>
                                <li><b>&quot;var&quot; within jseInterpret() or
                                  eval() may not use local variables</b><br>
                                  (for ISDK/C 4.30d) </li>
                              </ul>
                              <blockquote>
                                <p> Bug: Caching of global variables may prevent
                                  the &quot;var&quot; keyword when used within
                                  jseInterpret (or as often found in eval(), which
                                  uses jseInterpret()) may prevent the variable
                                  from being recognized as a local variable. For
                                  example, in this script:</p>
                                <blockquote>
                                  <pre>var foo = &quot;global&quot;;

funky();
function funky()
{
   var what = foo + &quot;variable&quot;;
   eval(&quot;var foo = \&quot;local\&quot;&quot;;);
   what = foo + &quot;variable&quot;;
}</pre>
                                </blockquote>
                                <p>the value for variable &quot;what&quot; may
                                  be &quot;globalvariable&quot;, showing that
                                  global varible caching has prevented &quot;foo&quot;
                                  from being recognized as a local variable after
                                  the call to eval().<br>
                                </p>
                                <p><b>Fix</b>: In srccore/call.c, in function
                                  CreateVariableObject(), at about line 886, change
                                  this code:</p>
                                <blockquote>
                                  <pre>/* check if already built */
if( old_fptr )
{
   if( SEVAR_GET_STORAGE_PTR(old_fptr-VAROBJ_OFFSET)!=NULL ) return;
}
else
{
   if( call-&gt;VariableObject!=NULL ) return;
}</pre>
                                </blockquote>
                                <p>to this:</p>
                                <blockquote>
                                  <pre>/* check if already built */
if( old_fptr )
{
   SEVAR_INIT_BOOLEAN(old_fptr-USE_CACHE_OFFSET,FALSE);
   if( SEVAR_GET_STORAGE_PTR(old_fptr-VAROBJ_OFFSET)!=NULL ) return;
}
else
{
   call-&gt;useCache = FALSE;
   if( call-&gt;VariableObject!=NULL ) return;
}</pre>
                                </blockquote>
                              </blockquote>
                              <p><a name="430dhtmlend"></a></p>
                              <ul>
                                <li><b>JSE_HTML_COMMENT_STYLE too strict with
                                  end comments </b><br>
                                  (for ISDK/C 4.30d) </li>
                              </ul>
                              <blockquote>
                                <p> Problem: HTML browsers frequenly hide code
                                  from non-Ecmascript-aware old browsers by hiding
                                  linkes within the &quot;&lt;!--&quot; and &quot;//--&gt;&quot;
                                  tags. When compiling the ScriptEase:ISDK with
                                  &quot;#define&nbsp;JSE_HTML_COMMENT_STYLE&nbsp;1&quot;
                                  the engine will recognize the &quot;&lt;!--&quot;
                                  as the begin comment. But it turns out that
                                  many pages are being written with &quot;--&gt;&quot;
                                  as the end comment, instead of &quot;//--&gt;&quot;
                                  as the rules state; these pages generate a parsing
                                  error with SE:ISDK.</p>
                                <p><b>Fix</b>: In srccore/call.h, within the definition
                                  of &quot;struct CompileStatus_&quot;, add this
                                  code at about line 353:</p>
                                <blockquote>
                                  <pre>#if defined(JSE_HTML_COMMENT_STYLE) &amp;&amp; (JSE_HTML_COMMENT_STYLE==1)
   sint paren_group_depth; /* track depth within ((())) */
#endif</pre>
                                </blockquote>
                                <p>In srccore/code.c, function tokGetNext(), line
                                  351 begins a block of &quot;case&quot; statements
                                  begging with this:</p>
                                <blockquote>
                                  <pre> case UNICHR('%'): case UNICHR('&amp;'): case UNICHR('^'):</pre>
                                </blockquote>
                                <p>remove the two statements (line 359) for the
                                  characters '(' and ')' and move them to the
                                  top of the case block, so that case blocks begins
                                  at line 351 with this code:</p>
                                <blockquote>
                                  <pre>case UNICHR('('): case UNICHR(')'):
   #if defined(JSE_HTML_COMMENT_STYLE) &amp;&amp; (JSE_HTML_COMMENT_STYLE==1)
      call-&gt;Global-&gt;CompileStatus.paren_group_depth += ( theChar == UNICHR('(') ) ? 1 : -1 ;
   # endif</pre>
                                </blockquote>
                                <p>In the same function, at line 286, replace
                                  this code:</p>
                                <blockquote>
                                  <pre>case UNICHR('-'): Type = seTokDecrement; break;</pre>
                                </blockquote>
                                <p>with:</p>
                                <blockquote>
                                  <pre>case UNICHR('-'):
   #if defined(JSE_HTML_COMMENT_STYLE) &amp;&amp; (JSE_HTML_COMMENT_STYLE==1)
      /* comments in HTML are supposed to look like &quot;// --&gt;&quot; but sometimes
       * the code-writers forget that, and so HTML parsers commonly recognize
       * this error (because there's no valid &quot;--&gt;&quot; outside of () scoping.
       */
      if ( '&gt;' == JSECHARPTR_GETC(JSECHARPTR_NEXT(call-&gt;Global-&gt;CompileStatus.srcptr))
        &amp;&amp; 0 == call-&gt;Global-&gt;CompileStatus.paren_group_depth            )
      {
         goto EndOfSourceLine;
      }
   #endif
   Type = seTokDecrement; break;</pre>
                                </blockquote>
                                <p>Finally, in srccore/code.c, function CompileFromText(),
                                  at line and agin in the same function, at about
                                  line 87 (just after ...NowCompiling++) add this:</p>
                                <blockquote>
                                  <pre>#if defined(JSE_HTML_COMMENT_STYLE) &amp;&amp; (JSE_HTML_COMMENT_STYLE==1)
   call-&gt;Global-&gt;CompileStatus.paren_group_depth = 0;
endif</pre>
                                </blockquote>
                              </blockquote>
                              <p><a name="430dstrrepnofree"></a></p>
                              <ul>
                                <li><b>jseVariable not freed when string.replace()
                                  fails </b><br>
                                  (for ISDK/C 4.30d) </li>
                              </ul>
                              <blockquote>
                                <p> Problem: If there is an error parsing a regular-expression
                                  entry of String.prototype.replace(), then a
                                  variable may remain unfreed. An example of a
                                  script causing this error is this:</p>
                                <blockquote>
                                  <pre>var s = "foo?"; s.replace( "?", "bar" );</pre>
                                </blockquote>
                                <p><b>Fix</b>: In srclib/ecma/seobject.c, function
                                  string_search_helper(), there are two places
                                  where the function can return without freeing
                                  the &quot;String&quot; variable. At about line
                                  4368, replace this code:</p>
                                <blockquote>
                                  <pre>jseDestroyStack(jsecontext,stack);
return NULL;</pre>
                                </blockquote>
                                <p>with this:</p>
                                <blockquote>
                                  <pre>jseDestroyStack(jsecontext,stack);
jseDestroyVariable(jsecontext,string);
return NULL;</pre>
                                </blockquote>
                                <p>and at about line 4399 replace this code:</p>
                                <blockquote>
                                  <pre>if( jseQuitFlagged(jsecontext) ) return NULL; </pre>
                                </blockquote>
                                <p>with this:</p>
                                <blockquote>
                                  <pre>if( jseQuitFlagged(jsecontext) )
{
   jseDestroyVariable(jsecontext,string);
   return NULL;
}</pre>
                                </blockquote>
                              </blockquote>
                              <p><a name="430dcontnowhile"></a></p>
                              <ul>
                                <li><b>continue statement in do/while skips while
                                  </b><br>
                                  (for ISDK/C 4.30d) </li>
                              </ul>
                              <blockquote>
                                <p> Problem: continue used in a do/while loop
                                  not doing the while condition test, always going
                                  to top of loop</p>
                                <p><b>Fix</b>: In srccore/statemnt.c function
                                  secompileDo(), at the top of the function (about
                                  line 124) add this new local variable:</p>
                                <blockquote>
                                  <pre>ADDR_TYPE cont_addr; </pre>
                                </blockquote>
                                <p>In the middle of the function, right before
                                  this existing line (line 148):</p>
                                <blockquote>
                                  <pre>secompileAddItem(this,seContinueFunc,this->prevLineNumber);</pre>
                                </blockquote>
                                <p>add:</p>
                                <blockquote>
                                  <pre>cont_addr = secompileCurrentItem(this); </pre>
                                </blockquote>
                                <p>finally, at the bottom of the function, change
                                  this line (line 166):</p>
                                <blockquote>
                                  <pre>secompileEndLoop(this,secompileCurrentItem(this),top_of_loop,label);</pre>
                                </blockquote>
                                <p>to:</p>
                                <blockquote>
                                  <pre>secompileEndLoop(this,secompileCurrentItem(this),cont_addr,label);          </pre>
                                </blockquote>
                              </blockquote>
                              <p><a name="430dcvnotpbr"></a></p>
                              <ul>
                                <li><b>jseCreateVariable parameters not pass-by-reference
                                  </b><br>
                                  (for ISDK/C 4.30d) </li>
                              </ul>
                              <blockquote>
                                <p> Problem: When passing non-reference variables
                                  (i.e. ones created with jseCreateVariable as
                                  opposed to gotten via jseMember/et al) to a
                                  function by reference using jseCallFunction,
                                  the variables are not updated.</p>
                                <p><b>Fix</b>: In srccore/jselib.c, at about line
                                  2434, replace the entire jseCallFunctionEx/jseReallyCallFunctionEx
                                  routine with the one found at <a href="ftp://ftp.nombas.com/pub/isdkeval/se430/jsecallfunction.c">ftp://ftp.nombas.com/pub/isdkeval/se430/jsecallfunction.c</a>
                                </p>
                              </blockquote>
                              <p><a name="430dcppnofp"></a></p>
                              <ul>
                                <li><b>C++ compilation errors for JSE_FLOATING_POINT==0
                                  </b><br>
                                  (for ISDK/C 4.30d) </li>
                              </ul>
                              <blockquote>
                                <p> Problem: When compiling C++ files that defined
                                  JSE_FLOATING_POINT 0 there may be compile-time
                                  errors such as &quot;missing end of file&quot;
                                  or &quot;missplaced }&quot;.</p>
                                <p><b>Fix</b>: In incjse/sefp.h at about line
                                  57 change the order of a few statements so that:</p>
                                <blockquote>
                                  <pre>#  ifdef __cplusplus
      extern &quot;C&quot; {
#  endif
#  if (0!=JSE_FLOATING_POINT)</pre>
                                </blockquote>
                                <p>is instead</p>
                                <blockquote>
                                  <pre>#  if (0!=JSE_FLOATING_POINT)
#  ifdef __cplusplus
      extern "C" {
#  endif</pre>
                                </blockquote>
                                <p>&nbsp;</p>
                              </blockquote>
                              </font>
                              <hr width="90%">
                              <font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                              <p><b>for 4.30c --</b> (may apply to earlier versions)</p>
                              <p><a name="430cuniswap"></a></p>
                              <ul>
                                <li><b>Unicode characters byte-swapped with pre-compiled
                                  source </b><br>
                                  (for ISDK/C 4.30c) </li>
                              </ul>
                              <blockquote>
                                <p> Bug: With some compilers and options, unicode
                                  character can be byte-swapped while reading
                                  in from buffers created with jseCreateCodeTokenBuffer().</p>
                                <p><b>Fix</b>: In srccore/token.c, function tokenReadString()
                                  at line 460 replace this code:</p>
                                <blockquote>
                                  <pre>c = (jsechar) (tokenReadByte(this) | (tokenReadByte(this) &lt;&lt; 8));</pre>
                                </blockquote>
                                <p>with</p>
                                <blockquote>
                                  <pre>c = (jsechar) tokenReadByte(this);
c |= (jsechar) (tokenReadByte(this) &lt;&lt; 8 );</pre>
                                </blockquote>
                              </blockquote>
                              <p><a name="430caddfnames"></a></p>
                              <ul>
                                <li><b>multiple interprets multiply add filenames,
                                  use memory </b><br>
                                  (for ISDK/C 4.30c) </li>
                              </ul>
                              <blockquote>
                                <p> Problem: If JSE_GETFILENAMELIST is not disabled,
                                  then each time a file is interpreted it will
                                  add names to the global list of files. These
                                  names are never removed from the list until
                                  jseTerminateExternalLink() is called. The result
                                  is that if a long-running promise repeatedly
                                  interprets then it will continue to use a little
                                  extra memory each time, and that memory is not
                                  freed until jseTerminateExternalLink().</p>
                                <p> <b>Fix</b>: These problem will not be fixed
                                  until the 4.40 release, and so if you are running
                                  many many interprets and this is a problem rebuild
                                  with &quot;#define JSE_GETFILENAMELIST 0&quot;
                                  Built in the way the only API functions missing
                                  will be jseGetFileNameList().</p>
                              </blockquote>
                              <p><a name="430cslocomp"></a></p>
                              <ul>
                                <li><b>compilation of large scripts slow on some
                                  systems </b><br>
                                  (for ISDK/C 4.30c) </li>
                              </ul>
                              <blockquote>
                                <p> Problem: On systems with inefficient memory
                                  allocators compilation of large scripts, and
                                  saving compiled scripts with jseCreateCodeTokenBuffer(),
                                  can be extremely slow.</p>
                                <p><b>Fix</b>: In srccore/expressn.c, function
                                  secompileAddItem() at line 216, replace this
                                  line:</p>
                                <blockquote>
                                  <pre>This->opcodesAlloced += 100; </pre>
                                </blockquote>
                                <p>with this:</p>
                                <blockquote>
                                  <pre>This->opcodesAlloced *= 2;</pre>
                                </blockquote>
                                <p>and replace the structures and functions in
                                  srccore/token.h and srccore/token.c with those
                                  found at <a href="ftp://ftp.nombas.com/pub/isdkeval/se430/token.txt">ftp://ftp.nombas.com/pub/isdkeval/se430/token.txt</a></p>
                              </blockquote>
                              <p><a name="430cbufobjworng"></a></p>
                              <ul>
                                <li><b>Buffer Object incorrectly detected </b><br>
                                  (for ISDK/C 4.30c) </li>
                              </ul>
                              <blockquote>
                                <p> Bug: Library functions attempting to determine
                                  if a variable<br>
                                  is a Buffer Object will get incorrect False
                                  returns.</p>
                                <p><b>Fix</b>: In srclib/common/sedyna.c, function
                                  isBufferObject() change line 41 from:</p>
                                <blockquote>
                                  <pre>temp = jseGetMember(jsecontext,var,UNISTR(&quot;class&quot;));</pre>
                                </blockquote>
                                <p>to:</p>
                                <blockquote>
                                  <pre>temp = jseGetMember(jsecontext,var, CLASS_PROPERTY);</pre>
                                </blockquote>
                              </blockquote>
                              <p><a name="430cborl16"></a></p>
                              <ul>
                                <li><b>16-bit Borland Compiler crashes </b><br>
                                  (for ISDK/C 4.30c) </li>
                              </ul>
                              <blockquote>
                                <p> Problem: Many operations can crash on 16-bit
                                  builds created with the Borland compiler, due
                                  to invalid shortcuts when comparing segmented
                                  memory pointers.</p>
                                <p> <b>Fix</b>: This is fixed in the 4.30d release.</p>
                              </blockquote>
                              <p><a name="430cinterevalcrash"></a></p>
                              <ul>
                                <li><b>potential crash during eval() and other
                                  jseInterpret </b><br>
                                  (for ISDK/C 4.30c) </li>
                              </ul>
                              <blockquote>
                                <p> Bug: Using jseInterpret can cause a crash
                                  if garbage collection hits at the wrong time.
                                  eval() uses this call underneath, so it will
                                  happen most often in eval().</p>
                                <p><b>Fix</b>: in srccore/call.c, the function
                                  callInterpret(), line 1059, delete these two
                                  lines:</p>
                                <blockquote>
                                  <pre>call-&gt;ScopeChain = NULL; /* for if we collect trying to allocate one */
call-&gt;ScopeChain = seobjNewUnordered(call);</pre>
                                </blockquote>
                                <p>Next, in the same function, at the top of the
                                  function, line 997 locate:</p>
                                <blockquote>
                                  <pre>call = jseMustMalloc(struct Call,sizeof(struct Call));
#  if ( 2 &lt;= JSE_API_ASSERTLEVEL )
   call-&gt;cookie = (uword8) jseContext_cookie;
#  endif</pre>
                                </blockquote>
                                <p>right after these lines, add:</p>
                                <blockquote>
                                  <pre>call-&gt;ScopeChain = seobjNewUnordered(this);</pre>
                                </blockquote>
                              </blockquote>
                              <p><a name="430cdestr2"></a></p>
                              <ul>
                                <li><b>jseObjectCallbacks destructors called twice
                                  </b><br>
                                  (for ISDK/C 4.30c) </li>
                              </ul>
                              <blockquote>
                                <p> Bug: destructors declared using the object
                                  callbacks (rather than by the &quot;_delete&quot;
                                  member) can be called twice.</p>
                                <p><b>Fix</b>: srccore/garbage.c, function destructors(),
                                  after this code at line 815</p>
                                <blockquote>
                                  <pre>todestroy-&gt;flags &amp;= ~HAS_DELETE_PROP;</pre>
                                </blockquote>
                                <p>add this:</p>
                                <blockquote>
                                  <pre>#if JSE_DYNAMIC_OBJS!=0
   todestroy-&gt;callbacks = NULL;
#endif</pre>
                                </blockquote>
                              </blockquote>
                              <p><a name="430cendquotenull"></a></p>
                              <ul>
                                <li><b>Compilation error message not terminated
                                  when end-quote missing </b><br>
                                  (for ISDK/C 4.30c) </li>
                              </ul>
                              <blockquote>
                                <p> Bug: If a long literal string is missing its
                                  end-quote then the error message generated will
                                  not be null-terminated.</p>
                                <p><b>Fix</b>: In srccore/codeprt2.c, function
                                  CompileStringToken, insert a memcpy line between
                                  these two lines at 189</p>
                                <blockquote>
                                  <pre>jsechar ErrorBuf[80];
strncpy_jsechar((jsecharptr)ErrorBuf,src,(sizeof(ErrorBuf)/sizeof(jsechar))-1);</pre>
                                </blockquote>
                                <p>resulting in</p>
                                <blockquote>
                                  <pre>jsechar ErrorBuf[80];
memset(ErrorBuf,0,sizeof(ErrorBuf));
strncpy_jsechar((jsecharptr)ErrorBuf,src,(sizeof(ErrorBuf)/sizeof(jsechar))-1);</pre>
                                </blockquote>
                                <p>so the buffer will always be null-terminated.</p>
                              </blockquote>
                              <p><a name="430ccplush"></a></p>
                              <ul>
                                <li><b>Cannot compile headers from C++ </b><br>
                                  (for ISDK/C 4.30c) </li>
                              </ul>
                              <blockquote>
                                <p> Error: C++ compilers fail on some header files.</p>
                                <p>Fix: in srcapp/sesecure.h and srclib/selib/selib.h
                                  add these lines to the end of the file:</p>
                                <blockquote>
                                  <pre>#ifdef __cplusplus
   extern &quot;C&quot; {
#endif </pre>
                                </blockquote>
                              </blockquote>
                              <p><a name="430cstr100"></a></p>
                              <ul>
                                <li><b>jseStrings invalid if more than 100 are
                                  used </b><br>
                                  (for ISDK/C 4.30c) </li>
                              </ul>
                              <blockquote>
                                <p> Bug: using too many API jseStrings at once
                                  breaks (over 100).</p>
                                <p> <b>Fix</b>: There were many changes in call.h,
                                  util.c, garbage.c, and jselib.c to fix this.
                                  Those changes will be released with 4.30d. A
                                  workaround for this is to increase the value
                                  in srccore/util.c function callApiStringEntry()
                                  at line 259 from 100 to the maximum number of
                                  strings your system will use.</p>
                              </blockquote>
                              <p><a name="430cmulterr"></a></p>
                              <ul>
                                <li><b>MBCS errors on little-endian processors
                                  </b><br>
                                  (for ISDK/C 4.30c) </li>
                              </ul>
                              <blockquote>
                                <p> Problem: assert failure when printing an error
                                  in a context that has already had an error printed.
                                  This can happen when atexit/destructors are
                                  called, and there is a consistent problem in
                                  them such as not enough stack space.</p>
                                <p><b>Fix</b>: In srccore/util.c, function callPrintError()
                                  at line 1781 change</p>
                                <blockquote>
                                  <pre>call-&gt;state = 0;

/* Just convert the error to a string and print it */

if( call-&gt;errorPrinted ) return;</pre>
                                </blockquote>
                                <p>to</p>
                                <blockquote>
                                  <pre>/* Just convert the error to a string and print it */

if( call-&gt;errorPrinted ) return;

call-&gt;state = 0;</pre>
                                </blockquote>
                              </blockquote>
                              <p><a name="430clittlembcs"></a></p>
                              <ul>
                                <li><b>MBCS errors on little-endian processors
                                  </b><br>
                                  (for ISDK/C 4.30c) </li>
                              </ul>
                              <blockquote>
                                <p> Bug: Some of the built-in macros and function
                                  do not handle MBCS characters correctly on little-endian
                                  processors.</p>
                                <p><b>Fix</b>: In srcmisc/seuni.h at line 345
                                  replace this:</p>
                                <blockquote>
                                  <pre>size_t sizeof_jsechar(jsechar c);</pre>
                                </blockquote>
                                <p>with</p>
                                <blockquote>
                                  <pre>#define sizeof_jsechar(jsechar c) ( ((uint)c &lt; 256) ? 1 : 2 )</pre>
                                </blockquote>
                                <p>and in srcmisc/utilstr.c t line 218 remove
                                  the sizeof_jsechar() function, and at line 283
                                  replace the JSECHARPTR_PUTC() function with
                                  this:</p>
                                <blockquote>
                                  <pre>void JSECHARPTR_PUTC(jsecharptr str, jsechar c)
{
   assert( (uword32)c &lt; 0x10000 );
   if ( 255 &lt; (uint)c )
   {
      *((unsigned char *)str)++ = c &gt;&gt; 8;
   }
   *(unsigned char *)str = c &amp; 0xFF;
}</pre>
                                </blockquote>
                              </blockquote>
                              <p><a name="430conestringtable"></a></p>
                              <ul>
                                <li><b>JSE_ONE_STRING_TABLE not supported </b><br>
                                  (for ISDK/C 4.30c) </li>
                              </ul>
                              <blockquote>
                                <p> Problem: Compile-time option JSE_ONE_STRING_TABLE
                                  is not supported in the 4.30c release with multiple
                                  jsecontext's.</p>
                                <p>Fix: Disabling JSE_ONE_STRING_TABLE will work
                                  fine if your contexts are not sharing VarName's.
                                  If you must use JSE_ONE_STRING_TABLE then in
                                  srccore/util.c, function callCleanupGlobal()
                                  the block beginning with</p>
                                <blockquote>
                                  <pre>for( i = 0; i &lt; hashSize; i++ )</pre>
                                </blockquote>
                                <p>at about line 904 should be within the same
                                  JSE_ONE_STRING_TABLE ifdefs as the lines preceding
                                  and following that block. Furthermore, this
                                  same block of code should be added to the freeGlobalStringTable()
                                  function.</p>
                              </blockquote>
                              <p><a name="430coldglobnewglob"></a></p>
                              <ul>
                                <li><b>jseInterpret finds old globals before new
                                  globals </b><br>
                                  (for ISDK/C 4.30c) </li>
                              </ul>
                              <blockquote>
                                <p> Error: When using jseInterpret and seeing
                                  old variables, old globals appear before new
                                  globals rather than after them.</p>
                                <p>Fix: In srccore/call.c:374, remove this block:</p>
                                <blockquote>
                                  <pre>if( CALL_GLOBAL(call-&gt;prev)!=CALL_GLOBAL(call) )
{
   seObjectMem mem = SEOBJ_CREATE_MEMBER(call,call-&gt;ScopeChain,NULL);
   SEVAR_INIT_OBJECT(&amp;(mem-&gt;value),CALL_GLOBAL(call));
}</pre>
                                </blockquote>
                                <p>in srccore/call.c:441, remove this block:</p>
                                <blockquote>
                                  <pre>#                 if JSE_CACHE_GLOBAL_VARS==1
                     /* actually copied something before the global in the
                      * scope chain, so cannot use cache.
                      */
                     call-&gt;useCache = False;
#                 endif</pre>
                                </blockquote>
                                <p>then right after that last block there are
                                  4 closing '}'s:</p>
                                <blockquote>
                                  <pre>               }
            }
         }
      }</pre>
                                  <pre>Change that to:</pre>
                                  <pre>               }
            }
         }

         if( call-&gt;ScopeChain-&gt;used!=0 &amp;&amp;
             CALL_GLOBAL(call)!=CALL_GLOBAL(call-&gt;prev))
         {
            /* we can see old scope chain entries, should not take
             * precedence over the new global object, so add that
             * to the scope chain now.
             */
            seObjectMem mem = SEOBJ_CREATE_MEMBER(call,call-&gt;ScopeChain,NULL);
            SEVAR_INIT_OBJECT(&amp;(mem-&gt;value),CALL_GLOBAL(call));
         }
      } </pre>
                                </blockquote>
                              </blockquote>
                              <p><a name="430cstacktest"></a></p>
                              <ul>
                                <li><b>stack-space test misses local variables
                                  </b><br>
                                  (for ISDK/C 4.30c) </li>
                              </ul>
                              <blockquote>
                                <p> Bug: local variable stack space not properly
                                  accounted for when determining if a function
                                  will run out of stack space.</p>
                                <p><b>Fix</b>: In srccore/call.c, function callFunction(),
                                  at about line 255 change this code:</p>
                                <blockquote>
                                  <pre>if ( isinit )
{
   /* locals go in global object for init function, not on stack */</pre>
                                </blockquote>
                                <p>to this:</p>
                                <blockquote>
                                  <pre>if ( !isinit )
{
   /* locals go in global object for init function, not on stack */</pre>
                                </blockquote>
                              </blockquote>
                              <p><a name="430cregexpcomperror"></a></p>
                              <ul>
                                <li><b>Compilation error for incomplete regular
                                  expressions </b><br>
                                  (for ISDK/C 4.30c) </li>
                              </ul>
                              <blockquote>
                                <p> Bug: Compilation error if unfinished regular
                                  expression (e.g. &quot;/a&quot;) appears at
                                  the end of a file or text.</p>
                                <p><b>Fix</b>: in CODEPRT2.C, function CompileRegExpLiteral()
                                  change the two instances (lines 65 and 76) of</p>
                                <blockquote>
                                  <pre>if( c=='\r' || c=='\n' )</pre>
                                </blockquote>
                                <p>to be</p>
                                <blockquote>
                                  <pre>if( c=='\r' || c=='\n' || c=='\0' )</pre>
                                </blockquote>
                              </blockquote>
                              <p><a name="430ctokereffailure"></a></p>
                              <ul>
                                <li><b>current token being referenced on failure
                                  </b><br>
                                  (for ISDK/C 4.30c) </li>
                              </ul>
                              <blockquote>
                                <p> Problem: If there is an error during the compilation
                                  of a function, SECOMPILE_CURRENT_TOKEN() is
                                  still called even though the tokens used for
                                  that function may be 0.</p>
                                <p><b>Fix</b>: in srccore/expressn.c, function
                                  secompileFunctionBody() at the beginning (line
                                  1311) change this line:</p>
                                <blockquote>
                                  <pre>jsebool success = False;</pre>
                                </blockquote>
                                <p>to be</p>
                                <blockquote>
                                  <pre>jsebool success = init_func;</pre>
                                </blockquote>
                                <p>and in the same function around line 1471 put
                                  this line</p>
                                <blockquote>
                                  <pre>*next_token = *SECOMPILE_CURRENT_TOKEN(&amp;This);</pre>
                                </blockquote>
                                <p>within &quot;if(success)&quot; so it becomes</p>
                                <blockquote>
                                  <pre>if ( success ) *next_token = *SECOMPILE_CURRENT_TOKEN(&amp;This);</pre>
                                </blockquote>
                              </blockquote>
                              <p><a name="430cdebugthrowcrash"></a></p>
                              <ul>
                                <li><b>Debugger crashes for some error messages
                                  </b><br>
                                  (for ISDK/C 4.30c) </li>
                              </ul>
                              <blockquote>
                                <p> Problem: The debugger would crash on most
                                  errors messages thrown in a script using the
                                  &quot;throw&quot; keyword.</p>
                                <p><b>Fix</b>: The problem was due to some string
                                  handling of the error message in sedbgw32\jsedbug.cpp
                                  that didn't check the return of some string
                                  parsing functions, due to an assumption regarding
                                  the format of the error text. This would result
                                  in a null pointer exception at runtime. Proper
                                  checking of those function returns has been
                                  inserted, and new builds (4.30d) of the debugger
                                  will include this fix.</p>
                              </blockquote>
                              <p><a name="430cmbcsmsvc6err"></a></p>
                              <ul>
                                <li><b>MBCS errors with MSVC6 built-in functions
                                  </b><br>
                                  (for ISDK/C 4.30c) </li>
                              </ul>
                              <blockquote>
                                <p> Bug: On MSVC6 builds, using the default Microsoft
                                  MBCS macros and library translations, there
                                  are errors with getting and putting two-byte
                                  characters.</p>
                                <p><b>Fix</b>: In srcmisc\seuni.h, make the macro
                                  for sizeof_jsechar() at about line 345, be this:</p>
                                <blockquote>
                                  <pre>#define sizeof_jsechar(c) ( ((uint)(c) &lt; 256) ? 1 : 2 )</pre>
                                </blockquote>
                                <p>and in the same file change the JSECHARPTR_PUTC()
                                  macro, at about line 336, to this function declaration:</p>
                                <blockquote>
                                  <pre>void JSECHARPTR_PUTC(jsecharptr ptr, jsechar c);</pre>
                                </blockquote>
                                <p>Also in srcmsic\seuni.h, for MSVC6 the macro
                                  for JSECHARPTR_GETC(), at about line 335, should
                                  be this:</p>
                                <blockquote>
                                  <pre>#define JSECHARPTR_GETC(JSECHAR) \
           ((jsechar)_mbsnextc((unsigned char *)(JSECHAR)))</pre>
                                </blockquote>
                                <p>Then in srcmisc/utilstr.c, in the MBCS section,
                                  after line 215, add this function:</p>
                                <blockquote>
                                  <pre>void JSECHARPTR_PUTC(jsecharptr str, jsechar c)
{
   assert( (uword32)c &lt; 0x10000 ); /* if wrong then expand */
   if ( 255 &lt; (uint)c )
   {
      *(unsigned char *)str = c &gt;&gt; 8;
      str = (jsecharptr)(((char *)str) + 1);
   }
   *(unsigned char *)str = c &amp; 0xFF;
}</pre>
                                </blockquote>
                              </blockquote>
                              <p><a name="430cmbcscfuncfree"></a></p>
                              <ul>
                                <li><b>Memory leak for MBCS cfunction string insertion
                                  </b><br>
                                  (for ISDK/C 4.30c) </li>
                              </ul>
                              <blockquote>
                                <p> Bug: If JSE_C_EXTENSIONS and JSE_MBCS are
                                  both enabled, and if the script is within a
                                  cfunction performance an operation that must
                                  insert a character into a string (e.g. str[4]='c'),
                                  then some memory will not be freed.</p>
                                <p><b>Fix</b>: In srccore/var.c, function seobjPutIntoString(),
                                  at about line 433 where the string data is assigned
                                  with this line:</p>
                                <blockquote>
                                  <pre>str-&gt;data.string_val.data-&gt;data = tmp;</pre>
                                </blockquote>
                                <p>insert a statement to free the previous pointer,
                                  so it is:</p>
                                <blockquote>
                                  <pre>jseMustFree(str-&gt;data.string_val.data-&gt;data);
str-&gt;data.string_val.data-&gt;data = tmp;</pre>
                                </blockquote>
                              </blockquote>
                              <p><a name="430cmbcsregfree"></a></p>
                              <ul>
                                <li><b>MBCS and UNICODE data not freed in regular
                                  expressions library </b><br>
                                  (for ISDK/C 4.30c) </li>
                              </ul>
                              <blockquote>
                                <p> Bug: An allocated string may remain unfreed
                                  when using regular expressions in unicode and
                                  MBCS builds.</p>
                                <p><b>Fix</b>: In srclib/ecma/seregexp.c function
                                  RegExp_ExecOrCallOrTest(), at about line 621,
                                  this line</p>
                                <blockquote>
                                  <pre>FreeJsecharString(asciiInput);</pre>
                                </blockquote>
                                <p>should be</p>
                                <blockquote>
                                  <pre>FreeAsciiString(asciiInput);</pre>
                                </blockquote>
                              </blockquote>
                              <p><a name="430cmbcscompare"></a></p>
                              <ul>
                                <li><b>Comparisons of MBCS strings may be incorrect
                                  </b><br>
                                  (for ISDK/C 4.30c) </li>
                              </ul>
                              <blockquote>
                                <p> Bug: If two MBCS string are of a different
                                  physical length, comparisons may not include
                                  all characters, and so the results may be incorrect.</p>
                                <p><b>Fix</b>: In srccore/varutil.c function sevarECMACompareEquality(),
                                  step 11 at about line 1056 insert code between
                                  these lines:</p>
                                <blockquote>
                                  <pre>                           lx *= sizeof(jsechar);
#                 endif</pre>
                                </blockquote>
                                <p>resulting in this code:</p>
                                <blockquote>
                                  <pre>                           lx *= sizeof(jsechar);
#                 elif defined(JSE_MBCS) &amp;&amp; (0!=JSE_MBCS)
                        lx = BYTECOUNT_FROM_STRLEN(sx,lx);
                        if( lx!=BYTECOUNT_FROM_STRLEN(sy,ly) )
                           result = FALSE;
                        else
#                 endif</pre>
                                </blockquote>
                                <p>Also srcmisc/utilstr.c, function jsecharCompare(),
                                  line 355, extend the preprocessor directive
                                  for JSE_UNICODE so it also include JSE_MBCS,
                                  as in:</p>
                                <blockquote>
                                  <pre>#if (defined(JSE_UNICODE) &amp;&amp; (0!=JSE_UNICODE)) \
 || (defined(JSE_MBCS) &amp;&amp; (0!=JSE_MBCS))</pre>
                                </blockquote>
                              </blockquote>
                              <p><a name="430cmbcsalign"></a></p>
                              <ul>
                                <li><b>alignment problem terminating MBCS strings
                                  with null character </b><br>
                                  (for ISDK/C 4.30c) </li>
                              </ul>
                              <blockquote>
                                <p> Bug: On systems with word-alignment restrictions
                                  the final null character for MBCS systems may
                                  cause abort.</p>
                                <p><b>Fix</b>: In srccore/garbage.c, function
                                  sestrCreate(), at about line 1256 this line</p>
                                <blockquote>
                                  <pre>*(jsechar *)(((ubyte *)newmem)+bytelen) = '\0';</pre>
                                </blockquote>
                                <p>should be</p>
                                <blockquote>
                                  <pre>*(jsecharptrdatum *)(((ubyte *)newmem)+bytelen) = '\0';</pre>
                                </blockquote>
                                <p>Also, in srccore/extlib.c, function extensionLibraryStartup()
                                  this line</p>
                                <blockquote>
                                  <pre>FullLibraryPath[0]=='\0'</pre>
                                </blockquote>
                                <p>should be</p>
                                <blockquote>
                                  <pre>JSECHARPTR_GETC(FullLibraryPath)=='\0'</pre>
                                </blockquote>
                              </blockquote>
                              <p><a name="430cmbcsstrcat"></a></p>
                              <ul>
                                <li><b>string concatenation errors in MBCS builds
                                  </b><br>
                                  (for ISDK/C 4.30c) </li>
                              </ul>
                              <blockquote>
                                <p> Bug: In MBCS builds, any operation which causes
                                  string concatenation, such as &quot;what&quot;+&quot;up&quot;
                                  can use too much memory, create invalid results,
                                  or crash.</p>
                                <p><b>Fix</b>: In srccore/varutil.c function ConcatenateStrings(),
                                  at about line 61 this code</p>
                                <blockquote>
                                  <pre>JSE_POINTER_UINDEX bytelen2 = BYTECOUNT_FROM_STRLEN(mem1,len2);</pre>
                                </blockquote>
                                <p>should be</p>
                                <blockquote>
                                  <pre>JSE_POINTER_UINDEX bytelen2 = BYTECOUNT_FROM_STRLEN(mem2,len2);</pre>
                                </blockquote>
                                <p>&nbsp;</p>
                              </blockquote>
                              </font>
                              <hr width="90%">
                              <font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                              <p><b>for 4.30b --</b> (may apply to earlier version)</p>
                              <p><a name="430bglobgetcache"></a></p>
                              <ul>
                                <li><b>Adding global _get does not remove global
                                  cache </b><br>
                                  (for ISDK/C 4.30b) </li>
                              </ul>
                              <blockquote>
                                <p> Problem: assigning an _get to the global doesn't
                                  turn off the global cache for the executing
                                  function. Thus, the _get is not called everytime,
                                  but rather the value is cached.</p>
                                <p><b>Fix</b>: In srccore/varutil.c, function
                                  seobjCreateMemberGeneric(), at line 1359 find
                                  this section:</p>
                                <blockquote>
                                  <pre>{<br>   this-&gt;flags |= DynamicHashListFromName(name)-&gt;HasFlag;<br>   if( name!=global-&gt;global_strings[prototype_entry] )<br>      this-&gt;flags |= OBJ_IS_DYNAMIC;<br>}</pre>
                                </blockquote>
                                <p>and change it to this, just adding the last
                                  if-statement:</p>
                                <p></p>
                                <blockquote>
                                  <pre>{
   this-&gt;flags |= DynamicHashListFromName(name)-&gt;HasFlag;
   if( name!=global-&gt;global_strings[prototype_entry] )
      this-&gt;flags |= OBJ_IS_DYNAMIC;
   if( name==global-&gt;global_strings[get_entry]<br>   &amp;&amp; this==call-&gt;GlobalObject )
           call-&gt;useCache = False;
}</pre>
                                </blockquote>
                                <p>and in the same file and fucntion at line 1372
                                  change this block:</p>
                              </blockquote>
                              <blockquote>
                                <blockquote>
                                  <pre>else if( name==global-&gt;global_strings[get_entry] )
{
   this-&gt;flags |= HAS_GET_PROP|OBJ_IS_DYNAMIC;
}</pre>
                                </blockquote>
                                <pre>is changed to this block:</pre>
                                <blockquote>
                                  <pre>else if( name==global-&gt;global_strings[get_entry] )
{
   if( this==call-&gt;GlobalObject )
      call-&gt;useCache = False;<br>   this-&gt;flags |= HAS_GET_PROP|OBJ_IS_DYNAMIC;
}</pre>
                                </blockquote>
                              </blockquote>
                              <p><a name="430bvobjcrashinterp"></a></p>
                              <ul>
                                <li><b>Crash using VariableObject on sub-interprets
                                  </b><br>
                                  (for ISDK/C 4.30b) </li>
                              </ul>
                              <blockquote>
                                <p> Bug: In some conditions, when calling an interpret()
                                  function from within another interpret, the
                                  program will crash while accessing VariableObject.</p>
                                <p><b>Fix</b>: In srccore/call.c, function callInterpret(),
                                  at about line 1023, this code fragment:</p>
                                <blockquote>
                                  <pre>&amp;&amp; this-&gt;prev!=NULL</pre>
                                </blockquote>
                                <p>should be changed to:</p>
                                <blockquote>
                                  <pre>&amp;&amp; this-&gt;VariableObject!=NULL</pre>
                                </blockquote>
                              </blockquote>
                              <p><a name="430bdynundefwrong"></a></p>
                              <ul>
                                <li><b>SEOBJ_DYNAMIC_UNDEFINED logic incorrect
                                  </b><br>
                                  (for ISDK/C 4.30b) </li>
                              </ul>
                              <blockquote>
                                <p> Error: There are a couple of problems with
                                  the logic in the SEOBJ_DYNAMIC_UNDEFINED behavior
                                  in the seobjCallDynamicProperty() function.
                                  First, if the property exists but is jseTypeUndefined
                                  the dynamic functions were not being called.
                                  Second, the _prototype chain was not be checked
                                  in those cases where it should be.</p>
                                <p><b>Fix</b>: This logic has been fixed in 4.30c
                                  in srccore/varutil.c function seobjCallDynamicProperty()
                                  by rewriting the block that begins:</p>
                                <blockquote>
                                  <pre>if( (obj-&gt;flags &amp; SEOBJ_DYNAMIC_UNDEFINED)!=0</pre>
                                </blockquote>
                              </blockquote>
                              <p><a name="430blonglivewarnings"></a></p>
                              <ul>
                                <li><b>Warnings missing about long-lived temporary
                                  variables </b><br>
                                  (for ISDK/C 4.30b) </li>
                              </ul>
                              <blockquote>
                                <p> Problem: Previous releases had a !NDEBUG message
                                  generated in the JSEDEBUG.LOG file to help track
                                  down long-lived temporary variables.</p>
                                <p>Fix: In srccore/jselib.c, function seapiCopyAndReturn(),
                                  at about line 360, before this line:</p>
                                <blockquote>
                                  <pre>if( call-&gt;tempvars!=NULL )</pre>
                                </blockquote>
                                <p>add this code:</p>
                                <blockquote>
                                  <pre>#ifndef NDEBUG
if ( call-&gt;prev==NULL &amp;&amp; FRAME == NULL )
   DebugPrintf(UNISTR(&quot;temporary variable reference created &quot;)\
               UNISTR(&quot;on non-wrapper frame.\n&quot;)\
               UNISTR(&quot;This can be inefficient. Use \&quot;create\&quot; or &quot;)\
               UNISTR(&quot;\&quot;jseCreateVar\&quot; version of call.\n&quot;));
#endif</pre>
                                </blockquote>
                              </blockquote>
                              <p><a name="430bsthack"></a></p>
                              <ul>
                                <li><b>source string memory not released in run
                                  compiled code </b><br>
                                  (for ISDK/C 4.30b) </li>
                              </ul>
                              <blockquote>
                                <p> Problem: When interpreting from compiled code,
                                  memory used for strings in the source text are
                                  not freed after the code is loaded.</p>
                                <p><b>Fix</b>: Update to 4.30c, and #define the
                                  new preprocessor directive TOKEN_STRINGTABLE_HACK
                                  to workaround this problem.</p>
                              </blockquote>
                              <p><a name="430bhashseg"></a></p>
                              <ul>
                                <li><b>HashListFromName() can crash memory-segment
                                  environments </b><br>
                                  (for ISDK/C 4.30b) </li>
                              </ul>
                              <blockquote>
                                <p> Error: In segmented-memory environments (such
                                  as win16), HashListFromName() macro may cause
                                  crashes if applied to numeric entries.</p>
                                <p><b>Fix</b>: In util.c, functions LockedStringTableEntry(),
                                  GrabStringTableEntry(), and ReleaseStringTableEntry(),
                                  move HashListFromName() macro to follow checks
                                  on whether a VarName is odd (i.e. is a numeric
                                  entry).</p>
                              </blockquote>
                              <p><a name="430bgnmdyna"></a></p>
                              <ul>
                                <li><b>NO_DEFAULT_VALUE message fails in MBCS
                                  builds </b><br>
                                  (for ISDK/C 4.30b) </li>
                              </ul>
                              <blockquote>
                                <p> Problem: Dynamic object enumeration is broken
                                  when using jseGetNextMember and our 'create
                                  undefined placeholder members' method.</p>
                                <p><b>Fix</b>: Many small changes are required
                                  to fix this problem. Upgrade to 4.30c.</p>
                              </blockquote>
                              <p><a name="430bnodefmbcs"></a></p>
                              <ul>
                                <li><b>NO_DEFAULT_VALUE message fails in MBCS
                                  builds </b><br>
                                  (for ISDK/C 4.30b) </li>
                              </ul>
                              <blockquote>
                                <p> Bug: NO_DEFAULT_VALUE builds string incorrectly
                                  for MBCS builds</p>
                                <p>Fix: in srccore/varutil.c function sevarDefaultValue()
                                  near the end of the function replace this code:</p>
                                <blockquote>
                                  <pre>if ( FindNames(call,this,JSECHARPTR_NEXT((jsecharptr)VarName),
               sizeof(VarName)/sizeof(VarName[0])-5,UNISTR(&quot;&quot;)) )
{
   VarName[0] = '(';
   strcat_jsechar((jsecharptr)VarName,UNISTR(&quot;) &quot;));
}</pre>
                                </blockquote>
                                <p>with this code</p>
                                <blockquote>
                                  <pre>JSECHARPTR_PUTC(VarName,'(');
if ( FindNames(call,this,JSECHARPTR_NEXT((jsecharptr)VarName),
               sizeof(VarName)/sizeof(VarName[0])-5,UNISTR(&quot;&quot;)) )
   strcat_jsechar((jsecharptr)VarName,UNISTR(&quot;) &quot;));
else
   JSECHARPTR_PUTC(VarName,'\0');</pre>
                                </blockquote>
                              </blockquote>
                              <p><a name="430bincdecreversed"></a></p>
                              <ul>
                                <li><b>"++" and "--" are reversed when printing
                                  function variables </b><br>
                                  (for ISDK/C 4.30b) </li>
                              </ul>
                              <blockquote>
                                <p> Bug: When converting a function to text, as
                                  in ToSource on a function, the decrement will
                                  appear as &quot;++&quot; and increment will
                                  appear as &quot;--&quot;.</p>
                                <p><b>Fix</b>: In srccore/function.c, tok_text
                                  table, at about line 114, the '++' and '--'
                                  entries in the table are swapped. '--' should
                                  be before '++' not the other way around.</p>
                              </blockquote>
                              <p><a name="430bcfunccat"></a></p>
                              <ul>
                                <li><b>assert failures concatenting C-strings
                                  </b><br>
                                  (for ISDK/C 4.30b)
                                  <p> Problem: if you generate a C-function string
                                    that is offsetted, such as 'var a = &quot;foobar&quot;+3;',
                                    and then use that in a string concatenation,
                                    you'll get assert failures and wrong results.</p>
                                  <p><b>Fix</b>: In srccore/varutil.c, replace
                                    the ConcatenateStrings() function with the
                                    code released in 4.30c.</p>
                              </ul>
                              <p><a name="430bdyndefnooverload"></a></p>
                              <ul>
                                <li><b>DYN_DEFAULT global variable invalid if
                                  no JSE_OPERATOR_OVERLOADING </b><br>
                                  (for ISDK/C 4.30b)
                                  <p> Error: DYN_DEFAULT global variable invalid
                                    if no JSE_OPERATOR_OVERLOADING</p>
                                  <p><b>Fix</b>: in srccore/call.c, function callNewGlobalVariable()
                                    move this chunk of code:</p>
                                  <blockquote>
                                    <pre>if( call-&gt;prev==NULL )
{
   call-&gt;DynamicDefault = seobjNew(call);
}
else
{
   assert( call-&gt;DynamicDefault==call-&gt;prev-&gt;DynamicDefault);
   assert( call-&gt;DynamicDefault!=NULL );
}</pre>
                                  </blockquote>
                                  <p>in front of this line (instead of inside
                                    the block)</p>
                                  <blockquote>
                                    <pre># if defined(JSE_OPERATOR_OVERLOADING) &amp;&amp; (0!=JSE_OPERATOR_OVERLOADING)</pre>
                                  </blockquote>
                              </ul>
                              <p><a name="430bdivoverstack"></a></p>
                              <ul>
                                <li><b>DescribeInvalidVar() overruns stack </b><br>
                                  (for ISDK/C 4.30b)
                                  <p> Error: DescribeInvalidVar() may overrun
                                    stack for MBCS or UNICODE.</p>
                                  <p><b>Fix</b>: In srccore.util.c, function DescribeInvalidVar(),
                                    replace one instance of: </p>
                                  <blockquote>
                                    <pre>sizeof(BadDesc-&gt;VariableWanted)</pre>
                                  </blockquote>
                              </ul>
                              <blockquote>
                                <p>with </p>
                              </blockquote>
                              <ul>
                                <blockquote>
                                  <pre>sizeof(BadDesc-&gt;VariableWanted)/sizeof(jsechar)</pre>
                                </blockquote>
                              </ul>
                              <blockquote>
                                <p>and replace one instance of </p>
                              </blockquote>
                              <ul>
                                <blockquote>
                                  <pre>sizeof(BadDesc-&gt;VariableName)</pre>
                                </blockquote>
                              </ul>
                              <blockquote>
                                <p>with </p>
                                <blockquote>
                                  <pre>sizeof(BadDesc-&gt;VariableName)/sizeof(jsechar)</pre>
                                </blockquote>
                              </blockquote>
                              <p><a name="430biteratepassref"></a></p>
                              <ul>
                                <li><b>Iterating through activation object for
                                  pass-by-reference crashes </b><br>
                                  (for ISDK/C 4.30b)
                                  <p> Bug: If a script function has pass-by-reference
                                    parameters, or is a cfunction, and if you
                                    iterate through the results of jseActivationObject()
                                    via jseGetNextMember(), you'll get asserts
                                    and crashes.</p>
                                  <p><b>Fix</b>: In srccore/jselib.c, function
                                    seapiGetValue, at about line 179 is this code:</p>
                                  <blockquote>
                                    <pre>SEVAR_COPY(&amp;(var-&gt;last_access),&amp;(var-&gt;value));
SEVAR_DEREFERENCE(call,&amp;(var-&gt;last_access));</pre>
                                  </blockquote>
                                  <p>which should be replaced with this: </p>
                                  <blockquote>
                                    <pre>SEVAR_COPY(&amp;(var-&gt;last_access),&amp;(var-&gt;value));
if ( var-&gt;last_access.type==VReferenceIndex
  &amp;&amp; !SEOBJ_IS_DYNAMIC(var-&gt;last_access.data.ref_val.base) )
{
   SEVAR_COPY(&amp;(var-&gt;last_access),
      seobjIndexMember(call,var-&gt;last_access.data.ref_val.base,
         (MemCountUInt)(JSE_POINTER_UINT)
         (var-&gt;last_access.data.ref_val.reference)));
}
SEVAR_DEREFERENCE(call,&amp;(var-&gt;last_access));</pre>
                                  </blockquote>
                              </ul>
                              <p><a name="430bwrongmbcsassert"></a></p>
                              <ul>
                                <li><b>Invalid assert() in MBCS builds </b><br>
                                  (for ISDK/C 4.30b)
                                  <p> Problem: Invalid assert() in MBCS version
                                    of sevarDuplicateString().</p>
                                  <p><b>Fix</b>: In srccore/garbage.c, function
                                    sevarDuplicateString(), at about line 1161
                                    is this assert statement:</p>
                                  <blockquote>
                                    <pre>assert( '\0' == JSECHARPTR_GETC(JSECHARPTR_OFFSET((jsecharptr)newmem,len)) );            </pre>
                                  </blockquote>
                              </ul>
                              <blockquote>
                                <p> That assert statement should be removed.</p>
                              </blockquote>
                              <p><a name="430bdebugalot"></a></p>
                              <ul>
                                <li><b>Many problems in ScriptEase local and remote
                                  debugger </b><br>
                                  (for ISDK/C 4.30b)
                                  <p> Errors: There were many problems with the
                                    4.30b debugger, including invalid display
                                    of null variables, invalid display of variable
                                    types, breakpoint colors inconsistent, no
                                    distinction between step-into/stop-over/step-out,
                                    and other sever and cosmetic problems.</p>
                                  <p><b>Fix</b>: Download SE:ISDK/C 4.30b, which
                                    includes the improved debugger.</p>
                              </ul>
                              <p><a name="430bbreakpointinc"></a></p>
                              <ul>
                                <li><b>seBreakpointTest() misses global code after
                                  #include </b><br>
                                  (for ISDK/C 4.30b)
                                  <p> Error: After stepping into code within an
                                    #include statement, and then returning to
                                    global code in the main file, the internal
                                    lines still report that they are in the #included
                                    file.</p>
                                  <p><b>Fix</b>: In srccore/statemnt.c, function
                                    secompileStatement() at about line 776, add
                                    this block before the &quot;break;&quot; statement
                                    for &quot;case seTokFunction: case seTokCFunction:&quot;</p>
                                  <blockquote>
                                    <pre>{
   uword8 tmp;
   VarName file = GrabStringTableEntry(
      this-&gt;call,
      this-&gt;call-&gt;Global-&gt;CompileStatus.CompilingFileName,
      strlen_jsechar(this-&gt;call-&gt;Global-&gt;CompileStatus.CompilingFileName),
      &amp;tmp);
   secompileAddItem(this,seFilename,file);
   ReleaseStringTableEntry(file,tmp);
}</pre>
                                  </blockquote>
                              </ul>
                              <p><a name="430barrayzeroprob"></a></p>
                              <ul>
                                <li><b>Cannot set Array length to zero </b><br>
                                  (for ISDK/C 4.30b)
                                  <p> Bug: Setting Array length to 0 makes the
                                    length property go to 1.</p>
                                  <p> <b>Fix</b>: In srccore/varutil.c, function
                                    seobjDeleteMember(), change this<br>
                                    code at about line 2321 change this line</p>
                                  <blockquote>
                                    <pre>MaxIdx = 0;</pre>
                                  </blockquote>
                                  <p> to</p>
                                  <blockquote>
                                    <pre>MaxIdx = -1;</pre>
                                  </blockquote>
                              </ul>
                              <p><a name="430bvarreqignored"></a></p>
                              <ul>
                                <li><b>jseOptReqVarKeyword ignored in some cases
                                  </b><br>
                                  (for ISDK/C 4.30b)
                                  <p> Bug: 'cannot assign to lvalue' is wrongly
                                    reported in certain cases when working with
                                    objects with a dynamic _get. This may also
                                    present as &quot;with&quot; not working on
                                    object returned by _get().</p>
                                  <p><b>Fix</b>: In srccore/secode.c, case sePushGlobalParam,
                                    at about line 1324 modify this code:</p>
                                  <blockquote>
                                    <pre>if( !callFindAnyVariable(call,mem,False,(t!=sePushGlobal)) )
{
   if( t==sePushGlobal )</pre>
                                  </blockquote>
                              </ul>
                              <blockquote>
                                <p> with a conditional check as follows:</p>
                                <blockquote>
                                  <pre> if( !callFindAnyVariable(call,mem,False,(t!=sePushGlobal)) )
 {
    if( jseOptReqVarKeyword &amp; call-&gt;Global-&gt;ExternalLinkParms.options )
    {
       callQuit(call,textcoreFUNC_OR_VAR_NOT_DECLARED,mem);
      break;
   }
   if( t==sePushGlobal )</pre>
                                </blockquote>
                              </blockquote>
                              <p><a name="430bcachenogetput"></a></p>
                              <ul>
                                <li><b>get and put not called on cached global
                                  variables </b><br>
                                  (for ISDK/C 4.30b)
                                  <p> Problem: dynamic globals are being cached,
                                    when the dynamic property ought to be called
                                    for each access.</p>
                                <li> Fix: In srccore/call.c function callFunction
                                  (near line 343) find this block:
                              </ul>
                              <blockquote>
                                <blockquote>
                                  <pre>/* If not using same global, turn off cache */
if( CALL_GLOBAL(call)!=call-&gt;GlobalObject )
   call-&gt;useCache = False; </pre>
                                </blockquote>
                                <p>and replace with this block: </p>
                              </blockquote>
                              <ul>
                                <blockquote>
                                  <pre>/* If not using same global, turn off cache */
/* turn off cache if dynamic as well */
if( CALL_GLOBAL(call)!=call-&gt;GlobalObject ||
    SEOBJ_IS_DYNAMIC(call-&gt;GlobalObject) )
   call-&gt;useCache = False; </pre>
                                </blockquote>
                              </ul>
                              <p><a name="430bmayifalse"></a></p>
                              <ul>
                                <li><b>jseInterpret() error if MayIContinue only
                                  returns False </b><br>
                                  (for ISDK/C 4.30b)
                                  <p> Error: If MayIContinue() callback returns
                                    False, without setting an error message, then
                                    jseInterpret() return status is inconsistent.</p>
                                  <p><b>Fix</b>: To match future behavior, have
                                    your MayIContinue function first call</p>
                              </ul>
                              <blockquote>
                                <blockquote>
                                  <pre>jseLibErrorPrintf(jsecontext,&quot;!InternalError 8001: do not continue&quot;);            </pre>
                                </blockquote>
                                <p>before returning False</p>
                              </blockquote>
                              <p><a name="430bdbglarge"></a></p>
                              <ul>
                                <li><b>remote debugging hangs while transferring
                                  large files </b><br>
                                  (for ISDK/C 4.30b)
                                  <p> Error: The proxy may hang during the &quot;connecting...&quot;
                                    message while debugging large files. The size
                                    that becomes a problem may depend on the relative
                                    speed of the two systems and their communication
                                    link.</p>
                                  <p><b>Fix</b>: If this is a problem on your
                                    system then send a message to isdk_support
                                    requesting updates to these files: srcdbg/debugme.c,
                                    srcdbg/proxy.c, and proxy/winproxy.cpp.</p>
                              </ul>
                              <p><a name="430bjselocnull"></a></p>
                              <ul>
                                <li><b>jseLocateSource() is never returning NULL
                                  </b><br>
                                  (for ISDK/C 4.30b)
                                  <p> Problem: jseLocateSource() should return
                                    NULL when interpreting text that has no associated
                                    filename, such as when interpreting in-line
                                    code or when processing &quot;#if&quot; statements.
                                    Instead the function is returning &quot;no
                                    filename&quot;.</p>
                                  <p><b>Fix</b>: In srccore/util.c, function jseLocateSource(),
                                    add this as the last statement before &quot;return
                                    FileName;&quot;.</p>
                                  <blockquote>
                                    <pre>if ( FileName &amp;&amp; !strcmp_jsechar(FileName,&quot;no filename&quot;) )
   FileName = NULL;</pre>
                                  </blockquote>
                              </ul>
                              <p><a name="430bvarneedtoomuch"></a></p>
                              <ul>
                                <li><b>jseFuncVarNeed() error if offset exceeds
                                  parameter count </b><br>
                                  (for ISDK/C 4.30b)
                                  <p> Bug: jseFuncVarNeed behavior is undefined
                                    if the requested parameter offset exceeds
                                    the number of parameters passed to the funcion.</p>
                                  <p><b>Fix</b>: In srccore\jselib.c function
                                    jseFuncVarNeed() change this line:</p>
                                  <blockquote>
                                    <pre>wSEVar dest = STACK_PUSH;</pre>
                                  </blockquote>
                                  <p>to this</p>
                                  <blockquote>
                                    <pre>wSEVar dest;</pre>
                                  </blockquote>
                                  <p>and after the &quot;assert( call-&gt;next==NULL
                                    );&quot; statement add this code:</p>
                                  <blockquote>
                                    <pre>if( call-&gt;num_args &lt;= parameterOffset )
{
   callError(call,textcoreFUNCPARAM_NOT_PASSED,1 + parameterOffset,
             callCurrentName(call));
             return NULL;
}
dest = STACK_PUSH;</pre>
                                  </blockquote>
                              </ul>
                              <p><a name="430bgetfuncinherit"></a></p>
                              <ul>
                                <li><b>jseGetFunction not finding inherited methods
                                  </b><br>
                                  (for ISDK/C 4.30b)
                                  <p> Bug: jseGetFunction() is not searching ._prototype
                                    chains to locate named functions.</p>
                                  <p><b>Fix</b>: In srccore\jselib.c function
                                    jselibFindFunction() replace this line:</p>
                                  <blockquote>
                                    <pre>ret = seobjGetMember(call,look,funcname);</pre>
                                  </blockquote>
                                  <p>with these two lines:</p>
                                  <blockquote>
                                    <pre>seObjectMem retMem = seobjChildMemberStruct(call,look,funcname);
ret = retMem ? &amp;(retMem-&gt;value) : NULL ;</pre>
                                  </blockquote>
                              </ul>
                              <p><a name="430bembedfuncerr"></a></p>
                              <ul>
                                <li><b>embedded function error if not last local
                                  variable </b><br>
                                  (for ISDK/C 4.30b)<b> </b>
                                  <p>Problem: when saving call chain for embedded
                                    functions, when the function embedded is not
                                    the last local variable declared, it was not
                                    working correctly.</p>
                                  <p><b>Fix</b>: In srccore/call.c, function callFunction()
                                    before this line (at about line 476)</p>
                                  <blockquote>
                                    <pre>/* all variables are initialized...</pre>
                                  </blockquote>
                              </ul>
                              <blockquote>
                                <p>insert this block of code (remember, this goes
                                  before the preceding comment):</p>
                                <blockquote>
                                  <pre>/* First pass, make space for locals */
if( !isinit )
{
   for( count = 0;count&lt;lfunc-&gt;num_locals;count++ )
   {
      seVar newloc = STACK_PUSH;
      SEVAR_INIT_UNDEFINED(newloc);
   }
}</pre>
                                </blockquote>
                                <p>further in the same function, at about line
                                  556, replace this block:</p>
                                <blockquote>
                                  <pre>else
{
   /* make space for the local variable on the stack */
   seVar v = STACK_PUSH;
   if( if_func!=NULL )
   {
      SEVAR_INIT_OBJECT(v,if_func);
      v-&gt;data.object_val.savedScopeChain =
      SEVAR_GET_OBJECT(&amp;(call-&gt;new_scope_chain));
   }
   else
   {
      SEVAR_INIT_UNDEFINED(v);
   }
}</pre>
                                </blockquote>
                                <p>with this:</p>
                              </blockquote>
                              <ul>
                                <blockquote>
                                  <pre>else if( if_func!=NULL )
{
   seVar v = CALL_LOCAL(count+1);
   seVar tmp = STACK_PUSH;
   SEVAR_INIT_OBJECT(tmp,if_func);
   tmp-&gt;data.object_val.savedScopeChain =
   SEVAR_GET_OBJECT(&amp;(call-&gt;new_scope_chain));
   SEVAR_DO_PUT(call,v,tmp);
   STACK_POP;
}</pre>
                                </blockquote>
                              </ul>
                              <p><a name="430bgetnolvalue"></a></p>
                              <ul>
                                <li><b>"cannot assign to lvalue" or apply "with"
                                  error on dynamic _get </b><br>
                                  (for ISDK/C 4.30b)<b> </b>
                                  <p>Bug: 'cannot assign to lvalue' is wrongly
                                    reported in certain cases when working with
                                    objects with a dynamic _get. This may also
                                    present as &quot;with&quot; not working on
                                    object returned by _get().</p>
                                  <p><b>Fix</b>: In srccore/varutil.c, function
                                    seobjHasProperty, change this code (if your
                                    code does not look like this see <i><a href="#430bgetnohas">Object
                                    with _get but no _hasProperty always has the
                                    property</a></i>):</p>
                                  <blockquote>
                                    <pre>if( seobjCallDynamicProperty(call,obj,OFF_GET_PROP,propname,False,dest) )
{
   jsebool ret = (SEVAR_GET_TYPE(dest)!=VUndefined) || handled;
   STACK_POP;
   return ret;
}</pre>
                                  </blockquote>
                                  <p>to this code (the difference is the added
                                    &quot;if&quot; block): </p>
                                  <blockquote>
                                    <pre>if( seobjCallDynamicProperty(call,obj,OFF_GET_PROP,propname,False,dest) )
{
   jsebool ret = (SEVAR_GET_TYPE(dest)!=VUndefined) || handled;
   STACK_POP;
   if( ret &amp;&amp; ref )
   {
      SEVAR_INIT_REFERENCE(dest,obj,propname);
   }
   return ret;
}</pre>
                                  </blockquote>
                              </ul>
                              <p><a name="430binterpglobal"></a></p>
                              <ul>
                                <li><b>jseInterpret() may load functions into
                                  the wrong global space </b><br>
                                  (for ISDK/C 4.30b)<b> </b>
                                  <p>Bug: If jseInterpret() is called from within
                                    a library wrapper function, and if JSE_MULTIPLE_GLOBAL
                                    is enabled, then those properties and function
                                    loaded with jseInterpret() may not be attached
                                    to the correct global.</p>
                                  <p><b>Fix</b>: In srccore\call.c, function callInterpret(),
                                    change this line:</p>
                                  <blockquote>
                                    <pre>call-&gt;GlobalObject = this-&gt;GlobalObject;</pre>
                                  </blockquote>
                                  <p>to this:</p>
                                  <blockquote>
                                    <pre>call-&gt;GlobalObject = CALL_GLOBAL(this);</pre>
                                  </blockquote>
                                  <p>and in srccore\call.h, update the JSE_MULTIPLE_GLOBAL
                                    version of the CALL_SET_GLOBAL() macro to
                                    be this:</p>
                                  <blockquote>
                                    <pre># define CALL_SET_GLOBAL(c,g) \
     if ( (c)-&gt;funcptr &amp;&amp; (c)-&gt;funcptr-&gt;global_object ) \
        (c)-&gt;funcptr-&gt;global_object=(g); \
     else \
        (c)-&gt;GlobalObject = (g)</pre>
                                  </blockquote>
                              </ul>
                              <p><a name="430bcallstackinfo"></a></p>
                              <ul>
                                <li><b>variables of type undefined not initialized
                                  in scope chain </b><br>
                                  (for ISDK/C 4.30b)<b> </b>
                                  <p>Bug: Variables in the scope chain that should
                                    be of type undefined may not be initialized.<br>
                                    <br>
                                    <b>Fix</b>: In srccore/call.c, function 'callFunction'
                                    line 526, are these statements:</p>
                              </ul>
                              <blockquote>
                                <blockquote>
                                  <pre>GetDotNamedVar(call,loc,ourname,False);
if( if_func!=NULL )</pre>
                                </blockquote>
                                <p>this &quot;else&quot; block should be added
                                  to follow that &quot;if&quot; block:</p>
                                <blockquote>
                                  <pre>else
{
   SEVAR_INIT_UNDEFINED(tmp);
   SEVAR_DO_PUT(call,loc,tmp);
}</pre>
                                </blockquote>
                              </blockquote>
                              <p><a name="430bcallstackinfo"></a></p>
                              <ul>
                                <li><b>JSE_GROWABLE_STACK is not recommended </b><br>
                                  (for ISDK/C 4.30b)<b> </b>
                                  <p>Problem: JSE_GROWABLE_STACK options is buggy
                                    and doesn't provide much savings in memory
                                    or performance.<br>
                                    <br>
                                    <b>Fix</b>: We recommend disabling JSE_GROWABLE_STACK
                                    in all cases. It is already off by default
                                    unless JSE_MIN_MEMORY is enabled. To disable
                                    in all cases simply comment out this line:</p>
                                  <blockquote>
                                    <pre># define JSE_GROWABLE_STACK 1</pre>
                                  </blockquote>
                                  <p>so that it is:</p>
                                  <blockquote>
                                    <pre>/* # define JSE_GROWABLE_STACK 1 */</pre>
                                  </blockquote>
                              </ul>
                              <p><a name="430bcallstackinfo"></a></p>
                              <ul>
                                <li><b>jseCallStackInfo can crash </b><br>
                                  (for ISDK/C 4.30b)<b> </b>
                                  <p>Bug: jseCallStackInfo may crash.
                                  <p><b>Fix</b>: In srccore/jselib.c function
                                    jseCallStackInfo() change this line:</p>
                                  <blockquote>
                                    <pre>MemCountUInt scope_chain_loc = call-&gt;ScopeChain-&gt;used-1;</pre>
                                  </blockquote>
                                  <p> to:</p>
                                  <blockquote>
                                    <pre>sint scope_chain_loc = (sint)call-&gt;ScopeChain-&gt;used-1;</pre>
                                  </blockquote>
                                  <p> and change this line:</p>
                                  <blockquote>
                                    <pre>if( scope_chain_loc&gt;=call-&gt;ScopeChain-&gt;used ||</pre>
                                  </blockquote>
                                  <p> to:</p>
                                  <blockquote>
                                    <pre>if( scope_chain_loc&gt;=(sint)call-&gt;ScopeChain-&gt;used ||</pre>
                                  </blockquote>
                              </ul>
                              <p><a name="430breturnthrowsemi"></a></p>
                              <ul>
                                <li><b>"return" and "throw" problems with auto-semicolon
                                  insertion </b><br>
                                  (for ISDK/C 4.30b)<b> </b>
                                  <p>Error: Automatic insertion of semicolon misplaced
                                    with some &quot;throw&quot; and &quot;return&quot;
                                    statements.
                                  <p><b>Fix</b>: In srccore/textcore.h:329, add:</p>
                                  <blockquote>
                                    <pre>TC_RESOURCE(textcoreTHROW_NO_NEWLINE,SYNTAX_EXCEPTION,&quot;1223&quot;,
   &quot;Throw expression must appear on the same line as the throw statement.&quot;)</pre>
                                  </blockquote>
                                  <p> In srccore/statement.c:779, change the beginning
                                    of the case 'seTokThrow' to:</p>
                                  <blockquote>
                                    <pre>case seTokThrow:
{
   struct tok tok;</pre>
                                    <pre>   tokLookAhead(this-&gt;call,this-&gt;locfunc,&amp;tok);
   /* handle 'no line terminator here' in the production */
   if( tokType(&amp;tok)==seTokEOL )
   {
      callQuit(this-&gt;call,textcoreTHROW_NO_NEWLINE);
      success = False;
      break;
   }</pre>
                                  </blockquote>
                                  <p> same file, line 814, change the if test
                                    which looks like this:</p>
                                  <blockquote>
                                    <pre>if( tokType(&amp;tok)==seTokEOL )</pre>
                                  </blockquote>
                                  <p> to this:</p>
                                  <blockquote>
                                    <pre>if( tokType(&amp;tok)==seTokEOL || tokType(&amp;tok)=='}' )</pre>
                                  </blockquote>
                              </ul>
                              <p><a name="430bfunccallwrongthis"></a></p>
                              <ul>
                                <li><b>functions called implicitly may have wrong
                                  "this" variable </b><br>
                                  (for ISDK/C 4.30b)<b> </b>
                                  <p>Bug: Functions called implicitly may have
                                    the wrong 'this'. In other words, if you do:
                                  <blockquote>
                                    <pre>var a = new Object();
a.foo = &lt;some function&gt;;
with( a )
   foo();</pre>
                                  </blockquote>
                                  <p> That is supposed to work like you did 'a.foo()',
                                    and therefore 'a' should be the 'this' value
                                    for 'foo'. This errata fixes the problem with
                                    this not working.</p>
                                  <p> <b>Fix</b>: In srccore\secode.h, find the
                                    END_SEOP_32BITS and make it and the next line
                                    into these 3: This just means adding the middle
                                    value and renumbering the last one.</p>
                                  <blockquote>
                                    <pre>#define END_SEOP_32BITS seBitAnd
#define seThisAndValue 107
#define NUM_SECODES 108</pre>
                                  </blockquote>
                                  <p> In srccore\expressn.c, right after this
                                    line:</p>
                                  <blockquote>
                                    <pre>{ &quot;seBitAnd&quot;, 0, 0 },</pre>
                                  </blockquote>
                                  <p> add this line:</p>
                                  <blockquote>
                                    <pre>{ &quot;seThisAndValue&quot;, 0, 0 },</pre>
                                  </blockquote>
                                  <p> in same file (expressn.c), line 1922, add
                                    this:</p>
                                  <blockquote>
                                    <pre>else if( this-&gt;expr.type==EXPR_GLOBAL )
{
   secompileAddItem(this,sePushGlobalParam,this-&gt;expr.name);
   secompileAddItem(this,seThisAndValue);
   this-&gt;expr.type = EXPR_STACKTOP;
}</pre>
                                  </blockquote>
                                  <p> it should appear as a new else-arm in the
                                    existing code. Here is<br>
                                    the block before and after with it, so you
                                    can make sure to put it<br>
                                    in the right place:</p>
                                  <blockquote>
                                    <pre>else if( this-&gt;expr.type==EXPR_STACKTOP )
{
   /* top of stack is expression, we need to
    * get the 'this' (global object) underneath
    * it on the stack.
    */
   secompileAddItem(this,sePushGlobalObject);
   secompileAddItem(this,seSwap);
}
else if( this-&gt;expr.type==EXPR_GLOBAL )
{
   secompileAddItem(this,sePushGlobalParam,this-&gt;expr.name);
   secompileAddItem(this,seThisAndValue);
   this-&gt;expr.type = EXPR_STACKTOP;
}
else
{
   secompileAddItem(this,sePushGlobalObject);
}</pre>
                                  </blockquote>
                                  <p> finally, at the end of secode.c, right before
                                    this block (the very<br>
                                    bottom of the file):</p>
                                  <blockquote>
                                    <pre>#        ifndef NDEBUG
            /* catch bad opcodes */
         default: assert( False ); break;
#        endif</pre>
                                  </blockquote>
                                  <p> add this:</p>
                                  <blockquote>
                                    <pre>case seThisAndValue:
{
   seVar lhs = STACK0;
   seVar rhs = STACK_PUSH;

   SEVAR_COPY(rhs,lhs);
   SEVAR_DEREFERENCE(call,rhs);
   if( SEVAR_GET_TYPE(lhs)==VReference )
      SEVAR_INIT_OBJECT(lhs,lhs->data.ref_val.base);
   else
      SEVAR_INIT_OBJECT(lhs,CALL_GLOBAL(call));
   break;
} </pre>
                                  </blockquote>
                              </ul>
                              <p><a name="430bsetglobalbad"></a></p>
                              <ul>
                                <li><b>jseSetGlobalObject() corrupts the internal
                                  opcode stack </b><br>
                                  (for ISDK/C 4.30b)<b> </b>
                                  <p>Bug: jseGlobalObject() can mess up the internal
                                    stack, causing weird bugs.
                                  <p> <b>Fix</b>: In srccore/util.c, function
                                    jseGlobalObjectEx(), the old version never
                                    did a STACK_POP for its STACK_PUSH, so change
                                    the final line of jseGlobalObjectEx() from:
                                  </p>
                                  <blockquote>
                                    <pre>return SEAPI_RETURN(call,g,(flags &amp; jseCreateVar)?True:False,
                    UNISTR(&quot;jseGlobalObjectEx&quot;));</pre>
                                  </blockquote>
                              </ul>
                              <blockquote>
                                <p> to this code:</p>
                              </blockquote>
                              <ul>
                                <blockquote>
                                  <pre>{
   jseVariable ret;
   ret = SEAPI_RETURN(call,g,(flags &amp; jseCreateVar)?True:False,
                      UNISTR(&quot;jseGlobalObjectEx&quot;));
   STACK_POP;
   return ret;
}</pre>
                                </blockquote>
                              </ul>
                              <p><a name="430bgetputnoconv"></a></p>
                              <ul>
                                <li><b>Dynamic get/put ignored when converting
                                  properties to objects </b><br>
                                  (for ISDK/C 4.30b)<b> </b>
                                  <p>Bug: Dynamic get/put was being ignored in
                                    some cases involving auto-conversion to object.
                                    For example, in the statement &quot;foo.goo.zoo&quot;
                                    where &quot;foo&quot; is a dynamic object,
                                    get/put are ignore if &quot;goo&quot; is auto-converted
                                    to be an object.<br>
                                    <br>
                                    <b>Fix</b>: In srccore/secode.c replace function
                                    do_op_member(() with the code found at <a href="ftp://ftp.nombas.com/pub/isdkeval/se430/do_op_member.c">ftp://ftp.nombas.com/pub/isdkeval/se430/do_op_member.c</a></p>
                                </li>
                              </ul>
                              <p><a name="430bgetnohas"></a></p>
                              <ul>
                                <li><b>Object with _get but no _hasProperty always
                                  has the property </b><br>
                                  (for ISDK/C 4.30b)<b> </b>
                                  <p>Problem: For a dynamic object with a get
                                    but no hasProperty in the scope chain, undefined
                                    was being accepted as 'has the property',
                                    so that object ALWAYS was considered to have
                                    the property.
                                  <p> <b>Fix</b>: In srccore/varutil.c, function
                                    seobjHasProperty() change this code: </p>
                                  <blockquote>
                                    <pre>if( dest==NULL ) dest = rhs;
if( sevarGetValue(call,rhs,propname,dest) )
{
   if( ref &amp;&amp; dest!=rhs )
   {
      SEVAR_INIT_REFERENCE(dest,obj,propname);
   }
   STACK_POP;
   return True;
}
else
{
   return False;
}</pre>
                                  </blockquote>
                              </ul>
                              <blockquote>
                                <p> to this code:</p>
                              </blockquote>
                              <ul>
                                <blockquote>
                                  <pre>if( seobjCallDynamicProperty(call,obj,OFF_GET_PROP,propname,False,dest) )
{
   jsebool ret = (SEVAR_GET_TYPE(dest)!=VUndefined) || handled;
   STACK_POP;
   return ret;
}
STACK_POP;</pre>
                                </blockquote>
                              </ul>
                              <blockquote>
                                <p> and remove &quot;else&quot; from this line:</p>
                              </blockquote>
                              <ul>
                                <blockquote>
                                  <pre>else if( (it = seobjChildMember(call,obj,propname))!=NULL ) </pre>
                                </blockquote>
                              </ul>
                              <p><a name="430bsetglobalnoglobal"></a></p>
                              <ul>
                                <li><b>jseSetGlobal fails when combined with with
                                  jseFunc_NoGlobalSwitch </b><br>
                                  (for ISDK/C 4.30b)<b> </b>
                                  <p>Bug: If you're in a wrapper function that
                                    is not flagged with jseFunc_NoGlobalSwitch,
                                    and if jseSetGlobal() is called, the global
                                    variable will not really change:<br>
                                    <br>
                                    <b>Fix</b>: In CALL.H change the CALL_SET_GLOBAL
                                    macro to this:
                                  <blockquote>
                                    <pre>#if 0 != JSE_MULTIPLE_GLOBAL

# define CALL_SET_GLOBAL(c,g) \
     if ( (c)-&gt;funcptr &amp;&amp; (c)-&gt;funcptr-&gt;global_object ) \
        (c)-&gt;funcptr-&gt;global_object=(g); \
     else \
        (c)-&gt;GlobalObject = (g)
#else
# define CALL_SET_GLOBAL(c,g) ((c)-&gt;GlobalObject = (g))
#endif </pre>
                                  </blockquote>
                              </ul>
                              <p><a name="430bfuncarg"></a></p>
                              <ul>
                                <li><b>function.arguments is not always available
                                  </b><br>
                                  (for ISDK/C 4.30b)<b> </b>
                                  <p> Problem: The &quot;function.arguments&quot;
                                    syntax is not part of the ECMAScript specification.
                                    But many JavaScript books describe this feature
                                    and most browsers implement it, so your users
                                    may expect this capability.
                                  <p> <b>Fix</b>: First, change every existing
                                    instance of </p>
                                  <blockquote>
                                    <pre>callCreateVariableObject(XXX)</pre>
                                  </blockquote>
                                  <p> to</p>
                                  <blockquote>
                                    <pre>callCreateVariableObjext(XXX,NULL)</pre>
                                  </blockquote>
                                  <p> Then in srccore/var.c, add this code to
                                    the very beginning of function seobjGetMemberStructEx().</p>
                                  <blockquote>
                                    <pre>if( Name==call-&gt;Global-&gt;global_strings[arguments_entry]
 &amp;&amp; SEOBJ_GET_FUNCTION(this)!=NULL )
{
   callCreateVariableObject(call,SEOBJ_GET_FUNCTION(this));
}</pre>
                                  </blockquote>
                                  <p> Finally, in srccore/call.c replace function
                                    callCreateVariableObject() with the code found
                                    at ftp://ftp.nombas.com/pub/isdkeval/se430/callcreatevariableobject.c
                                    and change the prototype in call.h accordingly.</p>
                              </ul>
                              <p><a name="430bglobputassert"></a></p>
                              <ul>
                                <li><b>assert() failure when global variable has
                                  dynamic _put </b><br>
                                  (for ISDK/C 4.30b)<b> </b>
                                  <p> Bug: If the global variable has a dynamic
                                    _put function or put callback then there can
                                    be problems, first indicated by this assert
                                    statement in the callFunction() function of
                                    call.c
                                  <blockquote>
                                    <pre>assert( SEVAR_GET_TYPE(&amp;(call-&gt;new_scope_chain))==VUndefined );</pre>
                                  </blockquote>
                                  <p> <b>Fix</b>: In CALL.H change this block
                                    of code</p>
                                  <blockquote>
                                    <pre># define FUNC_OFFSET 7
# define THIS_OFFSET 8
# define USE_CACHE_OFFSET 6
# define OLD_USE_CACHE (FRAME-USE_CACHE_OFFSET)
#else
# define FUNC_OFFSET 6
# define THIS_OFFSET 7</pre>
                                  </blockquote>
                                  <p> to this</p>
                                  <blockquote>
                                    <pre># define FUNC_OFFSET 8
# define THIS_OFFSET 9
# define USE_CACHE_OFFSET 7
# define OLD_USE_CACHE (FRAME-USE_CACHE_OFFSET)
#else
# define FUNC_OFFSET 7
# define THIS_OFFSET 8</pre>
                                  </blockquote>
                                  <p> then add these to lines to that same section
                                    of CALL.H</p>
                                  <blockquote>
                                    <pre>#define NEW_SCOPE_OFFSET 6
#define OLD_NEW_SCOPE (FRAME-NEW_SCOPE_OFFSET)</pre>
                                  </blockquote>
                                  <p> then change this line</p>
                                  <blockquote>
                                    <pre># define PARAM_START RETURN_OFFSET</pre>
                                  </blockquote>
                                  <p> to this</p>
                                  <blockquote>
                                    <pre># define PARAM_START NEW_SCOPE_OFFSET</pre>
                                  </blockquote>
                                  <p> this in CALL.C callFunction() get rid of
                                    the first assert:</p>
                                  <blockquote>
                                    <pre>assert( SEVAR_GET_TYPE(&amp;(call-&gt;new_scope_chain))==VUndefined );</pre>
                                  </blockquote>
                                  <p> then find this block</p>
                                  <blockquote>
                                    <pre>#  if defined(JSE_CACHE_GLOBAL_VARS) &amp;&amp; JSE_CACHE_GLOBAL_VARS==1
   tmp = STACK_PUSH;
   SEVAR_INIT_STORAGE_LONG(tmp,(ulong)call-&gt;useCache);
#  endif</pre>
                                  </blockquote>
                                  <p> and add right after that:</p>
                                  <blockquote>
                                    <pre>tmp = STACK_PUSH;
SEVAR_COPY(tmp,&amp;(call-&gt;new_scope_chain));</pre>
                                  </blockquote>
                                  <p> finally, in CALL.C callReturnFromFunction()
                                    just before this line</p>
                                  <blockquote>
                                    <pre>call-&gt;iptr = SEVAR_GET_STORAGE_PTR(OLD_IPTR);</pre>
                                  </blockquote>
                                  <p> add this line (remember, just before the
                                    previous line)</p>
                                  <blockquote>
                                    <pre>SEVAR_COPY(&amp;(call-&gt;new_scope_chain),OLD_NEW_SCOPE); </pre>
                                  </blockquote>
                              </ul>
                              <blockquote>
                                <p>&nbsp; </p>
                              </blockquote>
                              </font>
                              <hr width="90%">
                              <font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                              <p><b>for 4.30a --</b></p>
                              <p><a name="430aglobfunccache"></a></p>
                              <ul>
                                <li><b>wrong global variable cached if function
                                  uses different global </b><br>
                                  (for ISDK/C 4.30a)<b> </b>
                                  <p> Bug: The wrong global variable cache is
                                    used when a function is called<br>
                                    that switches the global.
                                  <p> <b>Fix</b>: In call.c function callFunction(),
                                    at about line 341, after this line</p>
                                  <pre>   call-&gt;useCache = ((FUNCVAR)-&gt;data.object_val.savedScopeChain == NULL);</pre>
                                  <p> add</p>
                                  <pre>   if( CALL_GLOBAL(call)!=call-&gt;GlobalObject )
      call-&gt;useCache = False;</pre>
                              </ul>
                              <p><a name="430adestcallback"></a></p>
                              <ul>
                                <li><b>destructor not using object callback delete
                                  </b><br>
                                  (for ISDK/C 4.30a)<b> </b>
                                  <p> Bug: Object destructors are ignoring the
                                    deleteFunc member of the jseObjectCallbacks
                                    structure.
                                  <p> <b>Fix</b>: This is fixed in release 4.30b</p>
                              </ul>
                              <p><a name="430aglobput"></a></p>
                              <ul>
                                <li><b>dynamic _put is ignored when creating members
                                  on the global object </b><br>
                                  (for ISDK/C 4.30a)<b> </b>
                                  <p> Bug: If the global object has a dynamic
                                    _put function then that _put functions is
                                    ignored while creating global variables.
                                  <p> <b>Fix</b>: This is fixed in release 4.30b.</p>
                              </ul>
                              <p><a name="430acfunccomp"></a></p>
                              <ul>
                                <li><b>crash reading compiled cfunction if cfunction
                                  is disabled </b><br>
                                  (for ISDK/C 4.30a)<b> </b>
                                  <p> Bug: If a script is compiled (tokenized)
                                    by a version that supports<br>
                                    the &quot;cfunction&quot; option, then it
                                    may crash when executed by a version<br>
                                    that does not support the &quot;cfunction&quot;
                                    option.
                                  <p> <b>Fix</b>: In srccore/loclfunc.c function
                                    localTokenRead() at about line 325 this<br>
                                    block:</p>
                                  <pre>   #  else
      func = localNew(call,varname,dest);
   #  endif</pre>
                                  <p> needs to be:</p>
                                  <pre>   #  else
      (void)tokenReadByte(tDst);
      func = localNew(call,varname,dest);
   #  endif</pre>
                              </ul>
                              <p><a name="430astackwo"></a></p>
                              <ul>
                                <li><b>secode-stack overflow on functions with
                                  very many parameters </b><br>
                                  (for ISDK/C 4.30a)<b> </b>
                                  <p> Bug: A large number of parameters to a function
                                    call can overflow the secode stack and get
                                    past our stack space check. This only affects
                                    functions with about 80+ parameters.<br>
                                    <br>
                                    <b>Fix</b>: Release 4.30b fixes this problem.
                              </ul>
                              <p><a name="430agcflag"></a></p>
                              <ul>
                                <li><b>garbage-collection bit clashes with object-mark
                                  bit </b><br>
                                  (for ISDK/C 4.30a)<b> </b>
                                  <p> Error: The mark bit used for recursive functions
                                    clashes with the same bit used for garbage
                                    collection. This may cause many assert() failures
                                    in debug builds, especially in compiled code
                                    buffers.<br>
                                    <br>
                                    <b>Fix</b>: In the 4.30b release the new flags
                                    SEOBJ_FLAG_BIT has been added to distinguish
                                    these recursive markers from the garbage-collector
                                    flags.
                              </ul>
                              <p><a name="430aminmemnot"></a></p>
                              <ul>
                                <li><b>minimum-memory options should release more
                                  memory </b><br>
                                  (for ISDK/C 4.30a)<b> </b>
                                  <p> Error: Some options related to minimizing
                                    memory use (JSE_MIN_MEMORY, JSE_CREATEFUNCTIONTEXTVARIABLE,
                                    JSE_COMPACT_LIBFUNCS) are not freeing all
                                    possible memory.
                                  <p> <b>Fix</b>: 4.30b release contains all of
                                    the fixes to these problems. Memory use can
                                    be minimized with these compile-time options.</p>
                              </ul>
                              <p><a name="430aerrorobjcrash"></a></p>
                              <ul>
                                <li><b>construction of incomplete error objects
                                  can crash </b><br>
                                  (for ISDK/C 4.30a)<b> </b>
                                  <p> Bug: If an error object is used to report
                                    a problem, and if that error object has an
                                    invalid constructor method, then a crash may
                                    occur while generating the error in unusual
                                    circumstanstances (such as if the global variable
                                    has a _put function).
                                  <p> <b>Fix</b>: This fix involves many changes
                                    to calls to and in sevarCallConstructor().
                                    Upgrade to 4.30b to obtain all of these fixes.</p>
                              </ul>
                              <p><a name="430abktestpack"></a></p>
                              <ul>
                                <li><b>jseBreakpointTest fails for JSE_PACK_SECODES
                                  </b><br>
                                  (for ISDK/C 4.30a)<b> </b>
                                  <p> Bug: If #define JSE_PACK_SECODES 1 (the
                                    default for non-aligned JSE_MIN_MEMORY builds,
                                    then the jseBreakpointTest may fail or crash.
                                  <p><b>Fix</b>: In srccore/brktest.c function
                                    callBreakpointTest() the two references to
                                    &quot;c[1]&quot; should be changed. In the
                                    first instance change &quot;(VarName)c[1]&quot;
                                    to &quot;SECODE_GET_ONLY(c+1,VarName)&quot;
                                    and change &quot;(uint)c[1]&quot; to &quot;SECODE_GET_ONLY(c+1,CONST_TYPE)&quot;.</p>
                              </ul>
                              <p><a name="430agetignoreundefined"></a></p>
                              <ul>
                                <li><b>_get ignoring return of jseTypeUndefined
                                  </b><br>
                                  (for ISDK/C 4.30a)<b> </b>
                                  <p> Error: If an object's _get function or jseObjectCallbacks->get
                                    function returns a variable of jseTypeUndefined
                                    then it will treat the variables is if it
                                    doesn't exist.
                                  <p><b>Fix</b>: In varutil.c in function seobjHasProperty()
                                    at about line 2901 change this code: </p>
                                  <pre>   ret = SEVAR_GET_TYPE(dest)!=VUndefined;</pre>
                                  <p>to</p>
                                  <pre>   ret = True; </pre>
                              </ul>
                              <p><a name="430anoargc"></a></p>
                              <ul>
                                <li><b>jseArgvLibraryFunction's not receiving
                                  the argc parameter </b><br>
                                  (for ISDK/C 4.30a)<b> </b>
                                  <p> Bug: With some callback methods (e.g. win16
                                    DLL), wrapper functions tagged with jseFunc_ArgvStyle
                                    are not receiving the argc parameter.
                                  <p><b>Fix</b>: In call.c, function callFunction(),
                                    at about line 630, replace:</p>
                                  <pre>   (void *)call,locals); </pre>
                              </ul>
                              <blockquote>
                                <p>with </p>
                                <pre>   (void *)call,call-&gt;num_args,locals);</pre>
                              </blockquote>
                              <p><a name="430aregclass"></a></p>
                              <ul>
                                <li><b>RegExp object overwrites Object.prototype._class
                                  </b><br>
                                  (for ISDK/C 4.30a)<b> </b>
                                  <p> Bug: Calling the RegExp constructor will
                                    overwrite Object.prototype._class, so that
                                    all objects seem to belong to the RegExp class.
                                  <p><b>Fix</b>: In srclib/ecma/seregexp.c, at
                                    about line 220, change</p>
                                  <pre>   tempMember = jseMemberEx(jsecontext,regexpObject,CLASS_PROPERTY,
                            jseTypeString,jseCreateVar);</pre>
                                  <p>to</p>
                                  <pre>   tempMember = jseMemberEx(jsecontext,regexpObject,CLASS_PROPERTY,
                            jseTypeString,jseCreateVar|jseDontSearchPrototype);           </pre>
                              </ul>
                              <p><a name="430aincnotfound"></a></p>
                              <ul>
                                <li><b>program may crash when #include file not
                                  found </b><br>
                                  (for ISDK/C 4.30a)<b> </b>
                                  <p> Bug: Systems with memory protection on static
                                    data may crash when processing an #include
                                    statement if the file cannot be found.
                                  <p><b>Fix</b>: in source.c, at about line 751,
                                    this block:</p>
                                  <pre>   if ( !sourceNextLine(*source,call,False,&amp;success) )
   {
      /* nothing was read at all */
      JSECHARPTR_PUTC((*source)-&gt;MemoryPtr,0);
   }</pre>
                                  <p>should be changed to</p>
                                  <pre>   if ( !sourceNextLine(*source,call,False,&amp;success) )
   {
      /* nothing was read at all */
      (*source)-&gt;MemoryPtr = UNISTR(&quot;&quot;);
   }</pre>
                              </ul>
                              <p><a name="430atosourceff"></a></p>
                              <ul>
                                <li><b>ToSource() returns incorrect value when
                                  used on hex value "\xFF" </b><br>
                                  (for ISDK/C 4.30a)<b> </b>
                                  <p> Problem: Calling:
                                  <pre>   ToSource("\xFF")</pre>
                                  <pre>returns:</pre>
                                  <pre>   "\xffffffff"</pre>
                                  <pre>instead of:</pre>
                                  <pre>   "\xff"</pre>
                                  <pre><b>Fix</b>: Change lines 219 and 220 of srclib/common/selibutl.c from:</pre>
                              </ul>
                              <blockquote>
                                <pre>   jsechar theChar = JSECHARPTR_GETC(current);
   jsechar buf[10]; </pre>
                                <p>to </p>
                                <pre>   ujsechar theChar = JSECHARPTR_GETC(current);
   ujsechar buf[10];
</pre>
                              </blockquote>
                              <p><a name="430afuncretlast"></a></p>
                              <ul>
                                <li><b>Functions returning last-expression if
                                  no return statement </b><br>
                                  (for ISDK/C 4.30a)<b> </b>
                                  <p> Problem: Functions with no explicit "return"
                                    statement are returning the results of the
                                    last evaluation in that function. They should
                                    be returning undefined.
                                  <p> <b>Fix</b>: in EXPRESSN.C function secompileFunctionBody(),
                                    at about line 1382 is a block of code like
                                    this:</p>
                                  <pre>   found = False;<br>   /* Return the last thing evaluated. Can't just check the last<br>    * entry, because it could be an extension value for a previous<br>    * opcode.<br>    */<br>   for( i=0;i&lt;This.opcodesUsed;i++ )<br>   {<br>      .... lots more code ...<br>   }<br>   if( !found )<br>      secompileAddItem(&amp;This,sePushUndefined);<br>   /* if we fall off the end of the function */<br>   secompileAddItem(&amp;This,seReturn);</pre>
                                  <p></p>
                                  <p> that code should be within another if block,
                                    so it becomes:</p>
                                  <pre>
   if( LOCAL_TEST_IF_INIT_FUNCTION(locfunc,This.call) )<br>   {<br>      found = False;<br>      /* Return the last thing evaluated. Can't just check the last<br>       * entry, because it could be an extension value for a previous<br>       * opcode.<br>       */<br>      for( i=0;i&lt;This.opcodesUsed;i++ )<br>      {<br>         .... lots more code ...<br>      }<br>      if( !found )<br>         secompileAddItem(&amp;This,sePushUndefined);<br>   }<br>   else<br>   {<br>      secompileAddItem(&amp;This,sePushUndefined);<br>   }<br>   /* if we fall off the end of the function */<br>   secompileAddItem(&amp;This,seReturn);</pre>
                              </ul>
                              <p><a name="430anovarfreetwice"></a></p>
                              <ul>
                                <li><b>Not reporting when variable is freed twice
                                  </b><br>
                                  (for ISDK/C 4.30a)<b> </b>
                                  <p> Problem: When running in debug mode (JSE_TRACKVARS==1)
                                    the engine will not detect and report when
                                    a variable has been freed twice.
                                  <p> <b>Fix</b>: In srccore/jselib.c function
                                    seapiDeleteVar(), at about line 265, add this
                                    line:</p>
                                  <pre>   var-&gt;alreadyFreed = True;</pre>
                                  <pre>before this line:</pre>
                                  <pre>   if( var-&gt;prev==NULL )</pre>
                              </ul>
                              <pre><a name="430agetvarglobalcrash"></a></pre>
                              <ul>
                                <li><b>jseGetVariableName() crashes when getting
                                  "global" variable </b><br>
                                  (for ISDK/C 4.30a)<b> </b>
                                  <p> Bug: jseGetVariableName() can crash when
                                    the global variable is being sought.
                                  <p> <b>Fix</b>: In srccore/varutil.c, FindNames()
                                    function at about line 209, change the 'look
                                    in locals' section to the following:</p>
                                  <pre>   /* look in locals */</pre>
                              </ul>
                              <blockquote>
                                <pre>   if( call-&gt;VariableObject==NULL ) callCreateVariableObject(call);
   if( call-&gt;VariableObject )
   {
      SEVAR_INIT_OBJECT(tmp,call-&gt;VariableObject);
      if( IsThisTheVariable(call,tmp,me,NULL,Buffer,BufferLength,False) )
         FoundName = True;
   }</pre>
                                <p> In srccore/util.c, jseGetVariableName(), at
                                  about line 2628, change the one main line in
                                  the function to the following:<br>
                                </p>
                                <pre>
   return FindNames(call,seapiGetValue(call,variableToFind),
                    buffer,bufferSize,UNISTR(&quot;&quot;));</pre>
                              </blockquote>
                              <p><a name="430anewfuncbreaksproto"></a></p>
                              <ul>
                                <li><b>jseNewFunctions breaks default prototypes
                                  </b><br>
                                  (for ISDK/C 4.30a)<b> </b>
                                  <p> Bug: jseNewFunctions breaks existing default
                                    prototypes, causing such Ecma stuff as String,
                                    Function, and Array to not work.
                                  <p><b>Fix</b>:</p>
                                  <pre>  1. call.c, take the InitGlobalPrototype function and
     make it not static. Add a prototype for it to call.h,
     I put it at line 936.
  2. call.c, 1199, the lines that set the 4 prototypes
     by calling InitGlobalPrototype must be moved. Grab
     them and move them to util.c, 979. That's inside
     an if-block, currently that calls InitializeBuiltInVariables.
     Move the stuff _before_ that call, but inside the
     if block.
  3. The block refers to a variable 'call', replace those
     all with 'this'.
  4. Change the if-block's test to not test against
     jseNewGlobalObject, but rather jseNewLibrary.

  With comments, the new if-block looks like this:

   if( success && (NewContextSettings & jseNewLibrary)!=0 )
   {
      /* If we are initializing new libraries, we also want to
       * initialize our builtin ECMA stuff as well.
       */
      this->ObjectPrototype = InitGlobalPrototype(this,
         LockedStringTableEntry(this,OBJECT_PROPERTY,
            (stringLengthType)strlen_jsechar(OBJECT_PROPERTY)));
      this->FunctionPrototype = InitGlobalPrototype(this,
         LockedStringTableEntry(this,FUNCTION_PROPERTY,
            (stringLengthType)strlen_jsechar(FUNCTION_PROPERTY)));
      this->ArrayPrototype =
         InitGlobalPrototype(this,GLOBAL_STRING(this,array_entry));
      this->StringPrototype = InitGlobalPrototype(this,
         LockedStringTableEntry(this,STRING_PROPERTY,
            (stringLengthType)strlen_jsechar(STRING_PROPERTY)));

      /* We initialize the builtin variables into each global else we
       * will not have them in sub-interprets
       */
      InitializeBuiltinVariables(this);
   }
</pre>
                                  <p> Because the order of the initialization
                                    has changed,<br>
                                    InitGlobalPrototype can add its stuff to existing
                                    objects,<br>
                                    while it thinks that it will allways create
                                    the objects.<br>
                                    Here is the new version (it replaces the one
                                    in<br>
                                    srccore\call.c): </p>
                                  <pre>     seObject
  InitGlobalPrototype(struct Call *call,VarName name)
  {
     seObjectMem v;
     jsebool found;

     /* Create '<global.>name', for example 'Object'. Make that
      * don't enum as all builtin objects should be that way.
      */
     v = seobjNewMember(call,CALL_GLOBAL(call),name,&found);
     v->attributes = jseDontEnum;
     if( v->value.type!=VObject )
        SEVAR_INIT_BLANK_OBJECT(call,&(v->value));

     /* Make '.prototype' of that object and return it.
      */
     v = seobjNewMember(call,SEVAR_GET_OBJECT(&(v->value)),
                        GLOBAL_STRING(call,orig_prototype_entry),&found);
     if( v->value.type!=VObject )
        SEVAR_INIT_BLANK_OBJECT(call,&(v->value));
     v->attributes = jseDontEnum | jseDontDelete | jseReadOnly;

     return SEVAR_GET_OBJECT(&(v->value));
  }
</pre>
                              </ul>
                              <p><a name="430ajsmmangled"></a></p>
                              <ul>
                                <li><b>jse_special_math name-mangled in C++ compilers
                                  </b><br>
                                  (for ISDK/C 4.30a)<b> </b>
                                  <p> Problem: Some C++ compilers will not recognize
                                    jse_special_math, which is used to resolve
                                    jseInfinity, jseNaN, and other special numbers.
                                  <p><b>Fix</b>: In INCJSE/SEFP.H, wrap the lines
                                    that defined jse_special_math in an exern
                                    "C" { } block, starting at about line 58 and
                                    ending at about line 70</p>
                              </ul>
                              <p><a name="430agetget"></a></p>
                              <ul>
                                <li><b>multiple/redundant calls to _get</b><br>
                                  (for ISDK/C 4.30a)<b> </b>
                                  <p> Problem: When a dynamic object is defined
                                    with a _get method or get callback, that get
                                    may be called extra times when evaluating
                                    properties of that dynamic object. This should
                                    not be a serious problem, in that all calls
                                    to _get are expected to work, but it is inefficient.
                                  <p><b>Fix</b>: In VARUTIL.C, function seobjHasProperty(),
                                    at about line 2856 change this:<br>
                                    &nbsp;<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jsebool
                                    handled;<br>
                                    &nbsp;<br>
                                    to<br>
                                    &nbsp;<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jsebool
                                    handled = False;<br>
                                    &nbsp;<br>
                                    and at about line 2889, is this section of
                                    code:<br>
                                    &nbsp;<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if( SEOBJ_HAS_GET(obj)
                                    )<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*
                                    got to do a dynamic get */<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...block
                                    of code...<br>
                                    &nbsp;<br>
                                    change that to:<br>
                                    &nbsp;<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if( SEOBJ_HAS_GET(obj)
                                    )<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(
                                    ref && dest!=NULL )<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SEVAR_INIT_REFERENCE(dest,obj,propname);<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
                                    True;<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*
                                    got to do a dynamic get */<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...block
                                    of code...<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
                                    &nbsp;</p>
                              </ul>
                              <p><a name="430ajsefuncargvstyle"></a></p>
                              <ul>
                                <li><b>Function constructor resets global variable</b><br>
                                  (for ISDK/C 4.30a)<b> </b>
                                  <p> Problem: With JSE_MULTIPLE_GLOBAL the function
                                    constructor (Ecma_Function_construct) and
                                    eval() function (Ecma_eval) are not always
                                    setting the global variable correctly for
                                    the functions being added or called.
                                  <p> <b>Fix</b>: Many small changes are required
                                    in the following files:
                                  <p> <b>JSELIB.H</b> - after the jseFunc_ArgvStyle
                                    value, add this line<br>
                                    &nbsp;<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# define
                                    jseFunc_NoGlobalSwitch 0x10<br>
                                    &nbsp;<br>
                                    <b>ECMAMISC.C</b> - in function Ecma_eval
                                    the #if block following this comment<br>
                                    &nbsp;<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Run
                                    with the same global the old function had
                                    */<br>
                                    &nbsp;<br>
                                    is no longer required. instead change<br>
                                    &nbsp;<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JSE_LIBMETHOD(
                                    UNISTR(&quot;eval&quot;), Ecma_eval, 1, 1,<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                    jseDontEnum, jseFunc_Secure ),<br>
                                    &nbsp;<br>
                                    to<br>
                                    &nbsp;<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JSE_LIBMETHOD(
                                    UNISTR(&quot;eval&quot;), Ecma_eval, 1, 1,<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jseDontEnum,
                                    jseFunc_NoGlobalSwitch | jseFunc_Secure ),<br>
                                    &nbsp;<br>
                                    <b>SEOBJECT.C</b>, change<br>
                                    &nbsp;<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JSE_LIBOBJECT(
                                    FUNCTION_PROPERTY, Ecma_Function_construct,
                                    0, -1,<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jseDontEnum,
                                    jseFunc_Secure ),<br>
                                    &nbsp;<br>
                                    to<br>
                                    &nbsp;<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JSE_LIBOBJECT(
                                    FUNCTION_PROPERTY, Ecma_Function_construct,
                                    0, -1,<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jseDontEnum,
                                    jseFunc_NoGlobalSwitch | jseFunc_Secure ),<br>
                                    &nbsp;<br>
                                    <b>CALL.H</b>: change first definition of
                                    CALL_GLOBAL to<br>
                                    &nbsp;<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#define
                                    CALL_GLOBAL(c) (((c)-&gt;funcptr &amp;&amp;
                                    (c)-&gt;funcptr-&gt;global_object) \<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;?
                                    (c)-&gt;funcptr-&gt;global_object : (c)-&gt;GlobalObject)<br>
                                    &nbsp;<br>
                                    <b>JSELIB.C</b>, function jseCallStackInfo
                                    replace<br>
                                    &nbsp;<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SEVAR_INIT_OBJECT(tmp,funcptr-&gt;global_object);<br>
                                    &nbsp;<br>
                                    with<br>
                                    &nbsp;<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SEVAR_INIT_OBJECT(tmp,<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;funcptr-&gt;global_object?funcptr-&gt;global_object:call-&gt;GlobalObject);<br>
                                    &nbsp;<br>
                                    and replace<br>
                                    &nbsp;<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SEVAR_INIT_OBJECT(&amp;(mem-&gt;value),funcptr-&gt;global_object);<br>
                                    &nbsp;<br>
                                    with<br>
                                    &nbsp;<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SEVAR_INIT_OBJECT(&amp;(mem-&gt;value),<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;funcptr-&gt;global_object?funcptr-&gt;global_object:call-&gt;GlobalObject);<br>
                                    &nbsp;<br>
                                    <b>GARBAGE.C</b>: function mark_function()
                                    change<br>
                                    &nbsp;<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(
                                    func-&gt;global_object!=NULL );<br>
                                    &nbsp;<br>
                                    to<br>
                                    &nbsp;<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( func-&gt;global_object!=NULL
                                    )<br>
                                    &nbsp;<br>
                                    <b>UTIL.C</b> has 3 calls to functionInit(),
                                    after each of these 3 calls<br>
                                    add these statements (leaving &quot;iFuncDesc-&gt;&quot;
                                    of of the third<br>
                                    instance):<br>
                                    &nbsp;<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# if 0
                                    != JSE_MULTIPLE_GLOBAL<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if
                                    ( 0 != (iFuncDesc-&gt;FuncAttributes &amp;
                                    jseFunc_NoGlobalSwitch) )<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this-&gt;function.global_object
                                    = NULL;<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# endif<br>
                                    &nbsp; </p>
                              </ul>
                              <p></p>
                              <p><a name="430ajseopthmissing"></a></p>
                              <ul>
                                <li><b>srccore\jseopt\jseopt.h file missing</b><br>
                                  (for ISDK/C 4.30a)<b> </b>
                                  <p> Problem: The file srccore\jseopt\jseopt.h
                                    is missing from some releases. This may cause
                                    errors locating "jseopt.h" while compiling
                                    the core interpreter libraries.
                                  <p> <b>Fix</b>: Create the file srccore\jseopt\jseopt.h
                                    containing this text:<br>
                                    &nbsp;&nbsp;<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#define
                                    _JSEOPT_H<br>
                                    &nbsp;&nbsp;<br>
                                    This is just a default JSEOPT.H file. If you
                                    are modifying options for your application
                                    it is best to make a new JSEOPT.H file and
                                    have both your application and the libraries
                                    refer to the same file.
                              </ul>
                              <p><a name="430acstringoverwrite"></a></p>
                              <ul>
                                <li><b>string constants updated by c-function
                                  behavior</b><br>
                                  (for ISDK/C 4.30a)<b> </b>
                                  <p> Bug: string constants can are overwritten
                                    by function assignments in a c-function. For
                                    example, in the following statement the original
                                    &quot;foo&quot; will be overwritten.<br>
                                    &nbsp;&nbsp;<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var foo
                                    = &quot;foo&quot;;<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Clib.strcat(foo,&quot;hoo&quot;);<br>
                                    &nbsp;&nbsp;<br>
                                    <b>Fix</b>: In jselib.c:1418, between<br>
                                    &nbsp;&nbsp;<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; val =
                                    seapiGetValue(call,variable);<br>
                                    &nbsp;&nbsp;<br>
                                    and<br>
                                    &nbsp;&nbsp;<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(&nbsp;val!=NULL&nbsp;&amp;&amp;&nbsp;SEVAR_GET_TYPE(val)==vType&nbsp;)<br>
                                    &nbsp;&nbsp;<br>
                                    add<br>
                                    &nbsp;&nbsp;<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(&nbsp;SEVAR_GET_TYPE(val)==VString&nbsp;&amp;&amp;&nbsp;SEVAR_GET_STRING(val).data-&gt;constant&nbsp;)<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sevarDuplicateString(call,val);<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
                                    &nbsp;&nbsp;<br>
                                    so it now looks like:<br>
                                    &nbsp;&nbsp;<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;val =
                                    seapiGetValue(call,variable);<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(&nbsp;SEVAR_GET_TYPE(val)==VString&nbsp;&amp;&amp;&nbsp;SEVAR_GET_STRING(val).data-&gt;constant&nbsp;)<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sevarDuplicateString(call,val);<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(&nbsp;val!=NULL&nbsp;&amp;&amp;&nbsp;SEVAR_GET_TYPE(val)==vType&nbsp;)<br>
                                    &nbsp;&nbsp;
                              </ul>
                              <p><a name="430aminmemopcode"></a></p>
                              <ul>
                                <li><b>Opcode errors in JSE_MIN_MEMORY builds</b><br>
                                  (for ISDK/C 4.30a)<b> </b>
                                  <p> Bug: May be errors in executing VM bytecodes
                                    when compiling with #define&nbsp;JSE_MIN_MEMORY&nbsp;1.
                                  <p> <b>Fix</b>: At expressn.c:1403<br>
                                    &nbsp;&nbsp;<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This.opcodes[j+1]&gt;i
                                    )<br>
                                    &nbsp;&nbsp;<br>
                                    Should be<br>
                                    &nbsp;&nbsp;<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SECODE_GET_ONLY(This.opcodes+j+1,CONST_TYPE)&gt;i
                                    )<br>
                                    &nbsp;&nbsp;<br>
                                    and at garbage.c:288, mark_call() in the #else
                                    part of the GROWABLE_STACK #if<br>
                                    &nbsp;&nbsp;<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for( i=0;i&lt;call-&gt;stackptr;i++
                                    )<br>
                                    &nbsp;&nbsp;<br>
                                    should be changed to<br>
                                    &nbsp;&nbsp;<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for( i=0;i&lt;=call-&gt;stackptr;i++
                                    )<br>
                                    &nbsp;&nbsp; </p>
                              </ul>
                              <p><a name="430afpbigendian"></a></p>
                              <ul>
                                <li><b>Incorrect !Finite() behavior when performing
                                  floating-point math on big-endian systems</b><br>
                                  (for ISDK/C 4.30a)<b> </b>
                                  <p> Problem: Incorrect and unexpected behavior
                                    when performing floating-point math on big-endian
                                    systems. These behaviors include IsNaN()/
                                    IsNegZero()/IsNegInfinity() returning incorrect
                                    values and arithmetic operations failing on
                                    large positive and negative numbers.
                                  <p> <b>Fix</b>: In SEFP.H, line 91, change:<br>
                                    &nbsp;<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # if
                                    BIG_ENDIAN == True<br>
                                    &nbsp;<br>
                                    to:<br>
                                    &nbsp;<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# if SE_BIG_ENDIAN
                                    == True<br>
                                    &nbsp; </p>
                              </ul>
                              <p><a name="430ambcs"></a></p>
                              <ul>
                                <li><b>Errors with strings and JSE_MBCS builds</b><br>
                                  (for ISDK/C 4.30a)<b> </b>
                                  <p> Bug: Data writing problem when JSE_MBCS
                                    is defined.
                                  <p> <b>Fix</b>: jselib.c,genericPutDataptr line
                                    1459.<br>
                                    &nbsp;<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;memcpy(newdata-(minidx*sizeof(jsechar)),data,<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s2 = BYTECOUNT_FROM_STRLEN((const
                                    jsecharptr)data,actual_size));<br>
                                    &nbsp;<br>
                                    should be changed to:<br>
                                    &nbsp;<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;memcpy(newdata+s1,data,<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s2 = BYTECOUNT_FROM_STRLEN((const
                                    jsecharptr)data,actual_size));<br>
                                    &nbsp;<br>
                                    and around line 1510 the block:<br>
                                    &nbsp;<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# if defined(JSE_MBCS)
                                    &amp;&amp; (JSE_MBCS!=0)<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*
                                    recalculate physical length */<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*
                                    NYI: MBCS byte length probably can be done
                                    better in<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
                                    the individual cases above */<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;val-&gt;data.string_val.data-&gt;bytelength
                                    =<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BYTECOUNT_FROM_STRLEN(val-&gt;data.string_val.data-&gt;data,<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;val-&gt;data.string_val.data-&gt;length);<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# endif<br>
                                    &nbsp;<br>
                                    has to be moved inside the closing brace right
                                    above it. There are several blocks closed
                                    here, move it inside the outermost, i.e. take
                                    the _last_ brace only and move it past the
                                    block, not any of the inner braces.</p>
                              </ul>
                              <p><a name="430aargccast"></a></p>
                              <ul>
                                <li><b>Casting warnings for new jseArgvLibFunc()
                                  functions</b><br>
                                  (for ISDK/C 4.30a)<b> </b>
                                  <p> Problem: Compilers will produce warnings
                                    using the argc parameter of the new jseArgvLibFunc(),
                                    requiring (uint) casts.
                                  <p> <b>Fix</b>: In jselib.h for the new argv
                                    function &quot;int&nbsp;argc&quot; was changed
                                    to &quot;uint&nbsp;argc&quot; to prevent casting
                                    problems in some compilers. This must be changed
                                    in all instance in jselib.h</p>
                              </ul>
                              <p><a name="430apacktokenread"></a></p>
                              <ul>
                                <li><b>Error reading pre-compiled bytecodes for
                                  JSE_MIN_MEMORY</b><br>
                                  (for ISDK/C 4.30a)<b> </b>
                                  <p> Bug: Error reading pre-compiled bytecodes
                                    when JSE_MIN_MEMORY is defined.
                                  <p> <b>Fix</b>: token.c, line 640:<br>
                                    &nbsp;<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(&nbsp;SECODE_DATUM_SIZE(*sptr)==1&nbsp;&amp;&amp;<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*sptr&gt;=SE_START_GOTO_CODES&nbsp;&amp;&amp;&nbsp;*sptr&lt;=SE_END_GOTO_CODES&nbsp;)<br>
                                    &nbsp;<br>
                                    get rid of the first test, that is wrong,
                                    it should just be:<br>
                                    &nbsp;<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(&nbsp;*sptr&gt;=SE_START_GOTO_CODES&nbsp;&amp;&amp;&nbsp;*sptr&lt;=SE_END_GOTO_CODES&nbsp;)<br>
                                    &nbsp; </p>
                              </ul>
                              <p><a name="430agcsubinterp"></a></p>
                              <ul>
                                <li><b>Garbage collector can miss variables in
                                  sub-interprets</b><br>
                                  (for ISDK/C 4.30a)<b> </b>
                                  <p> Bug: Garbage collector can miss marking
                                    variables when called from unusual<br>
                                    levels of sub-interpret.
                                  <p> <b>Fix</b>: GARBAGE.C, function garbageCollect(),
                                    add this line to the top<br>
                                    of the function:<br>
                                    &nbsp;<br>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while(
                                    call-&gt;next ) call = call-&gt;next;</p>
                              </ul>
                              </font> <!-- #EndEditable --></td>
                    </tr>
                    <tr>
                      <td width="1">&nbsp;</td>
                      <td width="460">&nbsp;</td>
                    </tr>
                  </table>
                  </TD>
              </TR>
            </TABLE>
          </TD>
        </TR>
      </TABLE>
    </TD>
  </TR>
  <TR VALIGN=TOP ALIGN=LEFT>
    <TD HEIGHT=2 width="5"></TD>
    <TD COLSPAN=2 height="2">
            <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH=100% HEIGHT=20 bgcolor="#FFFFFF">
              <TR ALIGN=LEFT VALIGN=TOP>
          <TD>
                  <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH=100%>
                    <TR VALIGN=TOP ALIGN=LEFT>
                <TD WIDTH=20 HEIGHT=2 ALIGN=LEFT VALIGN=TOP><IMG ID="Picture13" HEIGHT=20 WIDTH=20 SRC="../../../curve_botleft.gif" BORDER=0></TD>
                      <TD height="2"><IMG SRC="../../../clearpixel.gif" WIDTH=592 HEIGHT=1 BORDER=0></TD>
                <TD WIDTH=20 ALIGN=LEFT VALIGN=TOP height="2"><IMG ID="Picture11" HEIGHT=20 WIDTH=20 SRC="../../../curve_bot.gif" BORDER=0></TD>
              </TR>
            </TABLE>
          </TD>
        </TR>
      </TABLE>
    </TD>
  </TR>
  <TR VALIGN=TOP ALIGN=LEFT>
    <TD WIDTH=5 HEIGHT=6><IMG SRC="../../../clearpixel.gif" WIDTH=5 HEIGHT=1 BORDER=0></TD>
    <TD WIDTH=613><IMG SRC="../../../clearpixel.gif" WIDTH=613 HEIGHT=1 BORDER=0></TD>
    <TD WIDTH=22><IMG SRC="../../../clearpixel.gif" WIDTH=19 HEIGHT=1 BORDER=0></TD>
  </TR>
  <TR VALIGN=TOP ALIGN=LEFT>
    <TD COLSPAN=2>
            <P ALIGN=RIGHT><A HREF="../../../index.htm"><FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica">Home</FONT></A><FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica">
              | </FONT><A
                 HREF="../../../scripting/scripting.htm"><FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica">Scripting</FONT></A><FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica">
              | </FONT><A
                 HREF="../../../products/products.htm"><FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica">Products</FONT></A><FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica">
              | </FONT><A
                 HREF="../../../purchase/purchase.htm"><FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica">Purchase</FONT></A><FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica">
              | </FONT><A
                 HREF="../../../download/ndownload.htm"><FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica">Download</FONT></A><FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica">
              | </FONT><A
                 target="support" HREF="http://support.nombas.com/"><FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica">Support</FONT></A><FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica">
              | </FONT><A HREF="../../../company/company.htm"> <FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica">Company</FONT></A><FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica"><BR>
        <BR>
        Copyright &#169;2001, Nombas, Inc. All Rights Reserved.<BR>
        Questions? Visit </FONT><A HREF="http://support.nombas.com/"><FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica">http://support.nombas.com/</FONT></A>
    </TD>
    <TD width="22"></TD>
  </TR>
</TABLE>
</td>
  </tr>
</table>
<SCRIPT language=JavaScript1.2>
  display_nombas_legacy_message();
</SCRIPT>
</BODY>
<!-- #EndTemplate --></HTML>
