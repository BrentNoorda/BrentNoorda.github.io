 
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 FINAL//EN">
<HTML><!-- #BeginTemplate "/us/Templates/erratapage.dwt" -->
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<!-- #BeginEditable "doctitle" --> 
<TITLE>ScriptEase ISDK/C 4.40x ISDK Errata</TITLE>
<!-- #EndEditable --> <!-- begin metaTags --> 
<META NAME="keywords" CONTENT="javascript,ecmascript,ecma,scriptease,jscript,scripting,nombas,isdk,sedesk,web application development,embedded devices,distributed computing,peer-to-peer,p2p,peer,data mining,javascript.com,cycletraders,integrated sdk,script ease,java,c++,c,simplicity,power,palm,windows ce,integration: sdk,integration:sdk,scriptease:desktop,scriptease: desktop,se:desktop,se:desk,se:isdk, se: isdk,development tools,devtools">
<META HTTP-EQUIV="DESCRIPTION" CONTENT="Nombas delivers simplicity and power through scripting by providing market-leading development tools and software for JavaScript and ECMAScript.">
<!-- end metaTags -->
<!-- begin navbar includes -->
<SCRIPT language=JavaScript1.2>
  navbarPath = '../../../'; 
</SCRIPT>
<SCRIPT language=JavaScript1.2 SRC="../../../navbarData.js"></SCRIPT>
<SCRIPT language=JavaScript1.2 SRC="../../../navbarMenu.js"></SCRIPT>
<SCRIPT language=JavaScript SRC="../../../imgRollover.js"></SCRIPT>
<!-- end navbar includes -->
<!-- begin style and icon definition -->
<LINK REL="SHORTCUT ICON" HREF="../../../nombas.ico">
<STYLE> 
A:hover { color:#941810;} 
</STYLE>
<!-- end style and icon definition -->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-1754630-10']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
</HEAD>
<BODY BGCOLOR="#06086F" LINK="#0000FF" VLINK="#800080" TEXT="#000000" TOPMARGIN=0 LEFTMARGIN=0 MARGINWIDTH=0 MARGINHEIGHT=0>
<table width="632" border="0" cellspacing="0" cellpadding="0">
  <tr>
    <td>
<TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH=213>
  <TR VALIGN=TOP ALIGN=LEFT> 
    <TD WIDTH=28 HEIGHT=4><IMG SRC="../../../clearpixel.gif" WIDTH=28 HEIGHT=1 BORDER=0></TD>
    <TD></TD>
  </TR>
  <TR VALIGN=TOP ALIGN=LEFT> 
    <TD HEIGHT=60></TD>
          <TD WIDTH=185 ALIGN=LEFT VALIGN=TOP><A HREF="../../../index.htm"><IMG ID="Picture1" HEIGHT=60 WIDTH=185 SRC="../../../logo.gif" BORDER=0 alt="Nombas Homepage"></A></TD>
  </TR>
</TABLE>
    <div id="nombas-legacy"></div>
<TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0>
  <TR VALIGN=TOP ALIGN=LEFT> 
    <TD WIDTH=30 HEIGHT=10><IMG SRC="../../../clearpixel.gif" WIDTH=30 HEIGHT=1 BORDER=0></TD>
    <TD></TD>
  </TR>
  <TR VALIGN=TOP ALIGN=LEFT> 
    <TD></TD>
    <TD WIDTH=582> 
      <TABLE ID="Table1" BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH=582>
        <TR> 
          <TD WIDTH=97> 
                  <P><A HREF="../../../scripting/scripting.htm" 
                            onmouseover="changeImages('scripting', '../../../htab_scripting.gif'); popUp('elMenu1',event); return true;" 
onmouseout="changeImages('scripting', '../../../tab_scripting.gif'); popDown('elMenu1'); return true;"
><IMG
                             ID="scripting" HEIGHT=21 WIDTH=97 SRC="../../../tab_scripting.gif" VSPACE=0 HSPACE=0 ALIGN="TOP" BORDER=0 name="scripting" alt="Scripting"></A> 
                </TD>
          <TD WIDTH=97> 
                  <P><A HREF="../../../products/products.htm" 
                            onmouseover="changeImages('products', '../../../htab_products.gif'); popUp('elMenu2',event); return true;" 
onmouseout="changeImages('products', '../../../tab_products.gif'); popDown('elMenu2'); return true;"><IMG ID="products"
                             HEIGHT=21 WIDTH=97 SRC="../../../tab_products.gif" VSPACE=0 HSPACE=0 ALIGN="TOP" BORDER=0 name=products alt="Products"></A> 
                </TD>
          <TD WIDTH=97> 
                  <P><A HREF="../../../purchase/purchase.htm" onmouseover="changeImages('purchase', '../../../htab_purchase.gif');return true;" 
onmouseout="changeImages('purchase', '../../../tab_purchase.gif');return true;"><IMG ID="purchase"
                             HEIGHT=21 WIDTH=97 SRC="../../../tab_purchase.gif" VSPACE=0 HSPACE=0 ALIGN="TOP" BORDER=0 name=purchase alt="Purchase"></A> 
                </TD>
          <TD WIDTH=97> 
                  <P><A HREF="../../../download/ndownload.htm" onmouseover="changeImages('download', '../../../htab_download.gif');return true;" 
onmouseout="changeImages('download', '../../../tab_download.gif');return true;"><IMG ID="download"
                             HEIGHT=21 WIDTH=97 SRC="../../../tab_download.gif" VSPACE=0 HSPACE=0 ALIGN="TOP" BORDER=0 name=download alt="Download"></A> 
                </TD>
          <TD WIDTH=97> 
                  <P><A target="support" HREF="http://support.nombas.com/" onmouseover="changeImages('support', '../../../htab_support.gif'); return true;" 
onmouseout="changeImages('support', '../../../tab_support.gif'); return true;"><IMG ID="support"
                             HEIGHT=21 WIDTH=97 SRC="../../../tab_support.gif" VSPACE=0 HSPACE=0 ALIGN="TOP" BORDER=0 name=support alt="Support"></A> 
                </TD>
          <TD WIDTH=97> 
                  <P><A HREF="../../../company/company.htm" 
                            onmouseover="changeImages('company', '../../../htab_company.gif'); popUp('elMenu6',event); return true;" 
onmouseout="changeImages('company', '../../../tab_company.gif'); popDown('elMenu6'); return true;"><IMG ID="company"
                             HEIGHT=21 WIDTH=97 SRC="../../../tab_company.gif" VSPACE=0 HSPACE=0 ALIGN="TOP" BORDER=0 name=company alt="Company"></A> 
                </TD>
        </TR>
      </TABLE>
    </TD>
  </TR>
</TABLE>
      <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH=100%>
        <TR VALIGN=TOP ALIGN=LEFT> 
    <TD WIDTH=5 HEIGHT=20><IMG SRC="../../../clearpixel.gif" WIDTH=5 HEIGHT=1 BORDER=0></TD>
          <TD> 
            <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH=100% HEIGHT=20 bgcolor="#FFFFFF">
              <TR ALIGN=LEFT VALIGN=TOP> 
          <TD> 
                  <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH=100%>
                    <TR VALIGN=TOP ALIGN=LEFT> 
                <TD WIDTH=20 HEIGHT=20 ALIGN=LEFT VALIGN=TOP><IMG ID="Picture12" HEIGHT=20 WIDTH=20 SRC="../../../curve_topleft.gif" BORDER=0></TD>
                      <TD><IMG SRC="../../../clearpixel.gif" WIDTH=592 HEIGHT=1 BORDER=0></TD>
                <TD WIDTH=20 ALIGN=LEFT VALIGN=TOP><IMG ID="Picture10" HEIGHT=20 WIDTH=20 SRC="../../../curve_top.gif" BORDER=0></TD>
              </TR>
            </TABLE>
          </TD>
        </TR>
      </TABLE>
    </TD>
  </TR>
</TABLE>
<TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH=637>
  <TR VALIGN=TOP ALIGN=LEFT> 
    <TD HEIGHT=471 width="5"></TD>
    <TD COLSPAN=2 height="471"> 
      <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH=632 HEIGHT=200 bgcolor="#FFFFFF">
        <TR ALIGN=LEFT VALIGN=TOP> 
          <TD height="471"> 
            <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH=516>
              <TR VALIGN=TOP ALIGN=LEFT> 
                <TD WIDTH=14 HEIGHT=1><IMG SRC="../../../clearpixel.gif" WIDTH=13 HEIGHT=1 BORDER=0></TD>
                <TD WIDTH=502><IMG SRC="../../../clearpixel.gif" WIDTH=316 HEIGHT=1 BORDER=0></TD>
              </TR>
              <TR VALIGN=TOP ALIGN=LEFT> 
                <TD width="14"></TD>
                <TD WIDTH=502><!-- #BeginEditable "hier" --> 
                        <P ALIGN=LEFT><A HREF="../../../index.htm"><FONT SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica">Nombas</FONT></A><FONT SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica"> 
                          &gt; <a HREF="../../index.htm">SE:ISDK DevSpace</a> 
                          &gt; <a href="../index.htm">Errata</a> &gt; Integration 
                          SDK 4.40x Errata</FONT> 
                        <!-- #EndEditable --></TD>
              </TR>
            </TABLE>
            <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH=300>
              <TR VALIGN=TOP ALIGN=LEFT> 
                <TD WIDTH=15 HEIGHT=5><IMG SRC="../../../clearpixel.gif" WIDTH=15 HEIGHT=1 BORDER=0></TD>
                <TD></TD>
              </TR>
              <TR VALIGN=TOP ALIGN=LEFT> 
                <TD HEIGHT=80></TD>
                <TD WIDTH=600 ALIGN=LEFT VALIGN=TOP><IMG ID="Picture14" HEIGHT=80 WIDTH=600 SRC="../../bnr_devspace.gif" BORDER=0></TD>
              </TR>
              <TR VALIGN=TOP ALIGN=LEFT> 
                <TD HEIGHT=368></TD>
                <TD WIDTH=600 ALIGN=LEFT VALIGN=TOP height="368"> 
                  <table width="100%" border="0">
                    <tr> 
                      <td colspan="4" height="9"><img SRC="../../../clearpixel.gif" width="1" height="1"></td>
                    </tr>
                    <tr> 
                      <td width="1" height="326">&nbsp;</td>
                            <td valign="top" height="326"><!-- #BeginEditable "main" --> 
                              <p><font size="4" face="Verdana, Arial, Helvetica, sans-serif"><b>Integration 
                                SDK 4.40x Errata</b></font><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><br>
                                <i><b>Fixes Affecting Users of the ScriptEase 
                                ISDKs</b></i></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a href="#v440f">4.40f 
                                  API</a> - latest update: September 9, 2004</font></li>
                              </ul>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a href="#v440e">4.40e 
                                  API</a> - latest update: January 28, 2003</font></li>
                              </ul>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a href="#v440d">4.40d 
                                  API</a> - latest update: March 7, 2002</font></li>
                              </ul>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a href="#v440c">4.40c 
                                  API</a> - latest update: October 6, 2001</font></li>
                              </ul>
                              <hr width="90%">
                              <font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="v440f"></a> 
                              API Errata, version <b>4.40f</b> (may apply to earlier 
                              versions) <br>
                              &nbsp;&nbsp;<b>New</b>, September 9, 2004</font> 
                              <ul>
                                <li><a href="#craca"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">COM object methods returning an array may cause an assertion</font></a> 
                                <li><a href="#crpbrro"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">comobj returning variables passed by reference in reverse order</font></a> 
                                <li><a href="#fpecmc"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">function parsing errors can cause memory corruption</font></a> 
                                <li><a href="#psmbsr"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">previous 
                                  String match errata broke String replace</font></a> 
                                <li><a href="#scfzl"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">string.concat() 
                                  fails when strings are zero-length</font></a> 
                                <li><a href="#mrnvr16"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Math.random() 
                                  is not very random on systems with 16-bit integers</font></a> 
                                <li><a href="#12amutc"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Date 
                                  parser not recognizing 12 AM or &quot;UTC&quot;</font></a> 
                                <li><a href="#smsrn"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">String 
                                  match function should return null on no match</font></a> 
                                <li><a href="#relfr"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">recursive 
                                  MARK_OBJECT alternative (eliminating MARK_STACK_SIZE) 
                                  frees in-use destructors</font></a> 
                                <li><a href="#mlats"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">memory 
                                  leak with array.toSource </font></a> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#cafp">Alignment 
                                  errors with Clib *printf and *scanf floating-point 
                                  on HP-UX</a></font> 
                                <li><a href="#sscmss"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">system 
                                  can become corrupted if number of objects in 
                                  use is greater than MARK_STACK_SIZE</font></a> 
                                <li><a href="#slnr"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">when 
                                  converting numbers to strings, rounding will 
                                  not occur in some locales</font></a> 
                                <li><a href="#mcpsem"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Memory 
                                  corruption on %s error messages</font></a> 
                                <li><a href="#sdlconl"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">SElib.dynamicLink() 
                                  expects string lengths to remain constant</font></a><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
                                  </font> 
                                <li><a href="#gndlbl"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">bad 
                                  error message, or crash, when &quot;goto&quot; 
                                  statement is not followed by a label</font></a><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
                                  </font> 
                                <li><a href="#nogo"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">&quot;goto&quot; 
                                  is not standard EcmaScript</font></a><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
                                  </font> 
                                <li><a href="#comole"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">COMOBJ 
                                  leaks resources</font></a> 
                              </ul>
                              <hr width="90%">
                              <font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="v440e"></a> 
                              API Errata, version <b>4.40e</b> (may apply to earlier 
                              versions) <br>
                              &nbsp;&nbsp;<b>New</b>, January 28, 2003</font> 
                              <ul>
                                <li><a href="#ctmd"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">comobj 
                                  times miscalculate DST</font></a> 
                                <li><a href="#fpcne"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">function.protoype.constructor 
                                  does not exist for all objects</font></a> 
                                <li><a href="#scff"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">stack 
                                  corruption with long mode parameter to Clib.fopen() 
                                  and Clib.freopen()</font></a> 
                                <li><a href="#asrt1"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">array 
                                  sort return invalid when array.length==1</font></a> 
                                <li><a href="#nexnfd"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Number 
                                  toExponential() incorrect if fractionDigits 
                                  not specified</font></a> 
                                <li><a href="#ntpi"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Number 
                                  toPrecision() incorrect</font></a><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
                                  updated Dec 11, 2002</font> 
                                <li><a href="#opece"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">jsePutString() 
                                  may overwrite previous results if JSE_C_EXTENSIONS 
                                  is disabled</font></a> 
                                <li><a href="#ppvl"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">unknown 
                                  preprocessor directive, if very long, crashes</font></a> 
                                <li><a href="#srcnm"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">string.replace 
                                  crashes or consumes all memory when replacing 
                                  with null string</font></a> 
                                <li><a href="#rsts"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">invalid_regexp_instance.toString() 
                                  crash</font></a> 
                                <li><a href="#eldv"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Errors 
                                  with extremely large Date values</font></a> 
                                <li><a href="#pphliv"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">during 
                                  script compilation peephole optimizer accesses 
                                  invalid memory</font></a> 
                                <li><a href="#mothra"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">sedbc 
                                  bugs with long binary data</font></a> 
                                <li><a href="#ssres"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">string.split() 
                                  incorrect if regular expression used as separator</font></a> 
                                <li><a href="#vsvn7f"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">very 
                                  short variable names incorrect if character 
                                  &gt; 0x7f</font></a> 
                                <li><a href="#cnu"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">fields 
                                  of call structure and api_string structure may 
                                  not be initialized</font></a> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#vudc">variables 
                                  on stack may be uninitialized during garbage 
                                  collection</a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#pid">parseInt() 
                                  treating characters &quot;:;&lt;=&gt;?@&quot; 
                                  as digits 3 through 9</a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#gisl">Documentation 
                                  incorrect about lifetime of jseGetInternalString() 
                                  </a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#vltc">If 
                                  interpreting very long text lines, // comments 
                                  may extend over multiple lines</a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#sszp">string 
                                  slice() function is not accepting zero parameters</a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#al0">setting 
                                  array length to 0 does not remove all indexed 
                                  properties</a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#cr5$">5-character 
                                  variables names incorrect if either of last 
                                  two characters is '$'</a></font> 
                              </ul>
                              <hr width="90%">
                              <font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="v440d"></a> 
                              API Errata, version <b>4.40d</b> (may apply to earlier 
                              versions) <br>
                              &nbsp;&nbsp;<b>New</b>, March 7, 2002</font> 
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#strpsk">String 
                                  replace may skip matches if replacement string 
                                  is null-string (i.e. &quot;&quot;</a>)</font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#cdb">rare 
                                  crashes on memory overwrites using the dynamicBuffer 
                                  routines</a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#bjnmidx">Problems 
                                  with array lengths and numeric indices that 
                                  are large or non-integer</a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#opc">Foo.prototype.constructor 
                                  not assigned correctly for all builtin objects</a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#rspng">Array 
                                  split() error for negative starting point</a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#mthmnnz">Math.min(+0,-0) 
                                  wrongly returns +0</a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#ltmcrsh">Clib.localtime() 
                                  and Clib.gmtime() crash on out-of-range dates</a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#jsinstcmp">compilation 
                                  errors if JSE_INSTANCEOF_HELPER defined</a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#nrnan">Number 
                                  toString(with_radix) method is not handling 
                                  NaN, Infinity, and -Infinity</a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#ngmbd">Invalid 
                                  date computation on negative month</a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#mthrndneg">Math.round() 
                                  returns -0 instead of +0 from -0.5 to -0</a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#cnverrcr">Crash 
                                  if reporting invalid data type while generating 
                                  an error message</a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#arrlendel">Array 
                                  .length should not be deletable</a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#pargnoenum">properties 
                                  of the arguments object should be DontEnum</a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#2pstincwith">post-inc/decrement 
                                  operator acts like pre-inc/decrement inside 
                                  a &quot;with&quot; block</a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#pstincwith">post-increment 
                                  operator on local variable is ignoring &quot;with&quot; 
                                  statement</a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#pcmptmm">loading 
                                  pre-compiled scripts may use too much memory, 
                                  or crash</a> </font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#gvnoe">use 
                                  of undefined global variables do not always 
                                  report error</a> </font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#dbgnf">debugger 
                                  displays &quot;no filename&quot; for preprocessor 
                                  directives</a> </font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#ooia">invalid 
                                  assert for operator overloading on unary operators</a> 
                                  </font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#nwno">'new' 
                                  operator accepting non-Object return values</a> 
                                  </font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#pvc">operator 
                                  overloading crashes with some operators</a> 
                                  </font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#cfrtnl">jseCallFunction 
                                  return variable may be NULL with JSE_FUNC_TRAP_ERRORS</a> 
                                  </font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#crshnc">crash 
                                  when reporting invalid #include syntax</a> </font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#bddt">insufficient 
                                  checks on bad Dates</a> </font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#cmpnwth">compound 
                                  assignment (/=, *=, %=, +=, -=, &lt;&lt;=, &amp;=, 
                                  ^=, |=) ignoring with() blocks</a> </font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#cstrcat">error 
                                  concatenating C-style string constants</a> </font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#wthprm">invalid 
                                  name accessing local parameters in a with() 
                                  block</a> </font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#msvc6bg">MSVC6 
                                  memory allocation bugs</a> </font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#frinh">for...in 
                                  fails to iterate through inherited properties</a> 
                                  </font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#boutopt">aboutopt.jse 
                                  doesn't work</a> </font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#abtry">terminating 
                                  execution from within a &quot;try&quot; block 
                                  will cause memory leaks</a> </font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#nthsfpo">seObjHasProperty 
                                  causing floating-point overflow if not handled 
                                  by callback</a> </font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#infnan">&quot;+Infinity 
                                  and &quot;-Infinity&quot; converted to NaN if 
                                  JSE_FLOATING_POINT==0</a> </font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  <a href="#linkleak">memory leak, and possible 
                                  crash, using the #link statement</a> </font> 
                              </ul>
                              <font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
                              </font> 
                              <hr width="90%">
                              <font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="v440c"></a>API 
                              Errata, version <b>4.40c</b> (may apply to earlier 
                              versions) <br>
                              &nbsp;&nbsp;<b>New</b>, October 6, 2001</font> 
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#440calterarg">altering 
                                  &quot;arguments&quot; causes assertion failure</a> 
                                  </font> 
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a href="#gtmss">error 
                                  marking more than MARK_STACK_SIZE objects</a></font><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
                                  </font> </li>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a href="#numpm">ToNumber() 
                                  returns incorrect values for "+" and "-"</a></font><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
                                  </font> 
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a href="#cmprhnt">Object 
                                  comparisons with wrong hint - Date comparisons 
                                  fail</a> </font> 
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a href="#objwrapnodel">SEObjectWrapper 
                                  not deleting createVariable() objects</a> </font> 
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a href="#rtvrcrsh">jseReturnVar 
                                  may crash with strings, buffers, and objects</a> 
                                  </font> 
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a href="#cmmbxprot">jseMemberEx 
                                  and jseIndexMemberEx do not search prototypes</a> 
                                  </font> 
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a href="#cfncstrcat">toString 
                                  on functions concatenates some identifiers</a> 
                                  </font> 
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a href="#cnamparmgc">named-parameter 
                                  object for wrapper functions trashed by GC</a> 
                                  </font> 
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a href="#cstkxhst">&quot;internal 
                                  stack exhausted&quot; error with multiple calls 
                                  to jseCallFunction()</a> </font> 
                                <li> <font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a href="#cgetinhas">get 
                                  callback may crash during seobjHasProperty()</a> 
                                  </font> 
                              </ul>
                              <hr width="90%">
                              <p> 
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b><font size="3">The 
                                Details</font></b> </font></p>
                              <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>for 
                                4.40f --</b></font> (may apply to earlier versions)<font face="Verdana, Arial, Helvetica, sans-serif" size="2"></font></p>
                              <p><a name="craca"></a></p>
                              <p>                               <ul>
                                <li><b><font face="Verdana, Arial, Helvetica, sans-serif" size="2">COM object methods returning an array may cause an assertion</font></b><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><br>
                                  (for ISDK/C 5.01b) </font> </li>
                              </ul>
                              <blockquote> 
                                <p> <font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug: 
                                    Calling a method of a COM object that returns an array may cause an assertion around line 803 in src/lib/comobj/comobj.cpp, function CreateReturnedVariant().  
                                  </font>
                                  <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
                                  <b> Fix </b> : In se501/src/lib/comobj/comobj.cpp, around line 865, there is an else statement containing a for loop that looks like this: </font> 
                                <pre><font face="Courier New, Courier, mono" size="2">      for( i = lowerBound; i <= upperBound; i++ )
      {
         VARIANT v;
         jseVariable mem = jseIndexMemberEx(jsecontext,jseRet,i,jseTypeUndefined,jseCreateVar);
         indicies[dim] = i;
         /* Get the element from the safe array */
         /* I'm making an assumption here, which is the elements of the
          * array will be VARIANTS.
          */
         hr = SafeArrayGetElement(psa,indicies,&v);

         if(FAILED(hr))
         {
            ReportComError( jsecontext, hr, &excepInfo );
         }

         jseVariable tmp = CreateReturnedVariant(jsecontext,v,wName);
         jseAssign(jsecontext,mem,tmp);
         jseDestroyVariable(jsecontext,mem);
         jseDestroyVariable(jsecontext,tmp);

      }</font></pre>
                                <p> <font face="Verdana, Arial, Helvetica, sans-serif" size="2">Replace that entire for loop with this one:
                                  </font>
                                <pre><font face="Courier New, Courier, mono" size="2">      for( i = lowerBound; i <= upperBound; i++ )
      {
         VARIANT v;
         VARTYPE vt;
         VariantInit(&v);
         indicies[dim] = i;
         jseVariable mem = jseIndexMemberEx(jsecontext,jseRet,i,jseTypeUndefined,jseCreateVar);
         /* Get the element from the safe array */
         /* I'm making an assumption here, which is the elements of the
          * array will be VARIANTS.
          */
         hr = SafeArrayGetVartype(psa, &vt);

         if(FAILED(hr))
         {
            ReportComError( jsecontext, hr, &excepInfo );
         }

         V_VT(&v) = vt;

         switch (vt) /* default to original assumption of variant */
         {
            case VT_BOOL:
               hr = SafeArrayGetElement(psa,indicies,&(V_BOOL(&v)));
               break;
            case VT_BSTR:
               hr = SafeArrayGetElement(psa,indicies,&(V_BSTR(&v)));
               break;
            case VT_I4:
               hr = SafeArrayGetElement(psa,indicies,&(V_I4(&v)));
               break;
            case VT_UI4:
               hr = SafeArrayGetElement(psa,indicies,&(V_UI4(&v)));
               break;
            case VT_UI2:
               hr = SafeArrayGetElement(psa,indicies,&(V_UI2(&v)));
               break;
            case VT_I2:
               hr = SafeArrayGetElement(psa,indicies,&(V_I2(&v)));
               break;
            case VT_I1:
               hr = SafeArrayGetElement(psa,indicies,&(V_I1(&v)));
               break;
            case VT_UI1:
               hr = SafeArrayGetElement(psa,indicies,&(V_UI1(&v)));
               break;
            case VT_R4:
               hr = SafeArrayGetElement(psa,indicies,&(V_R4(&v)));
               break;
            case VT_R8:
               hr = SafeArrayGetElement(psa,indicies,&(V_R8(&v)));
               break;
            case VT_DECIMAL:
               hr = SafeArrayGetElement(psa,indicies,&(V_DECIMAL(&v)));
               break;
            case VT_DATE:
               hr = SafeArrayGetElement(psa,indicies,&(V_DATE(&v)));
               break;
            default:
               hr = SafeArrayGetElement(psa,indicies,&v);
         }

         if(FAILED(hr))
         {
            ReportComError( jsecontext, hr, &excepInfo );
         }

         jseVariable tmp = CreateReturnedVariant(jsecontext,v,wName);
         jseAssign(jsecontext,mem,tmp);
         jseDestroyVariable(jsecontext,mem);
         jseDestroyVariable(jsecontext,tmp);
      }</font></pre>
                              </blockquote>
                              <p><a name="crpbrro"></a></p>
                              <p> 
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b><font face="Verdana, Arial, Helvetica, sans-serif" size="2">comobj returning variables passed by reference in reverse order</font></b><br>
                                  (for ISDK/C 4.40f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug: Method arguments passed to a COM object's method by reference (according to the declaration of the COM object's method) are returned in the reverse order of how they went in.  
                                  </font> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In srclib/comobj/comobj.cpp, function oleGenericDispatcher(), there is a comment that starts with &quot;Since we are now allowing pass by reference&quot;.  About nine lines below the beginning of that comment, there is a line that looks like this:
                                  </font></p>
                                <pre>
   jseVariable oldVar = jseFuncVar(jsecontext,i);
                                </pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">
                                    Replace that line with this one:
                                </font></p>
                                <pre>
   jseVariable oldVar = jseFuncVar(jsecontext,args-i-1);
                                </pre>
                              </blockquote>
                              <p><a name="fpecmc"></a></p>
                              <p> 
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b><font face="Verdana, Arial, Helvetica, sans-serif" size="2">function parsing errors can cause memory corruption</font></b><br>
                                  (for ISDK/C 4.40f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug: If the engine encounters an erroroneous situation while parsing a function definition, it can cause the engine to try to deallocate a block of memory associated with the internal representation of that function twice.  
                                  </font> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In srccore/expressn.c, function secompileFunction(), there is an if statement like this:
                                  </font></p>
                                <pre>
   if( tokType(token)!=seTokIdentifier )
                                </pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">
                                    Below that if statement there is a block of code that looks like this:
                                </font></p>
                                <pre>
   ...
   localDelete(call,newfunc);
   return False;
                                </pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">
                                    Replace those two lines with the following block of code:
                                </font></p>
                                <pre>

   /* Remove the function from the global function chain, to make sure it does not get
    * freed again.
    */

   assert( call->Global->funcs == &(newfunc->function) );
   call->Global->funcs = (newfunc->function.next);
            
   localDelete(call,newfunc);
   jseMustFree(newfunc);
   return False;
                                </pre>
                              </blockquote>
                              <p><a name="psmbsr"></a></p>
                              <p> 
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b><font face="Verdana, Arial, Helvetica, sans-serif" size="2">previous 
                                  String match errata broke String replace</font></b><br>
                                  (for ISDK/C 4.40f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug: 
                                  A previous errata (<a href="#smsrn">see below</a>) 
                                  fixed a problem with string.match() but introduced 
                                  a new problem in string.search(). The new bug 
                                  is that string.search(), if no match is found 
                                  and if the global flag is used, will return 
                                  null instead of returning the original string.</font> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In srclib/ecma/seobject.c, function string_search_helper(), 
                                  at about line 4750, the code just before the 
                                  comment beginning with &quot;/* I hate destroying 
                                  the stack&quot; which was introduced in the 
                                  <a href="#smsrn">string.match errata</a>, should 
                                  change from this:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   #</font>if 1
   /* this part of the code is a result of the ECMA-262 errata */
   jseDestroyVariable(jsecontext,ret);
   ret = jseCreateVariable(jsecontext,jseTypeNull);
   #endif<font face="Courier New, Courier, mono" size="2">;</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">to 
                                  this:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   </font>#if defined(JSE_STRING_REPLACE)
   if ( mode != JSE_REPLACE )
   #endif
   {
      /* this part of the code is a result of the ECMA-262 errata */
      jseDestroyVariable(jsecontext,ret);
      ret = jseCreateVariable(jsecontext,jseTypeNull);
   }<font face="Courier New, Courier, mono" size="2"></font></pre>
                              </blockquote>
                              <p><a name="scfzl"></a></p>
                              <p> 
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b><font face="Verdana, Arial, Helvetica, sans-serif" size="2">string.concat() 
                                  fails when strings are zero-length</font></b><br>
                                  (for ISDK/C 4.40f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug: 
                                  If the strings in string.concat() are all zero-length, 
                                  then a memory allocation failure is reported.</font>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In srclib/ecma/seobject.c, function Ecma_String_concat(), 
                                  att &quot;+1&quot; to this line (around line 
                                  4032):</font> </p>
                                <pre><font face="Courier New, Courier, mono" size="2">   BYTECOUNT_FROM_STRLEN(result,length)+BYTECOUNT_FROM_STRLEN(str,strlength));</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">to 
                                  this:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   BYTECOUNT_FROM_STRLEN(result,length)+BYTECOUNT_FROM_STRLEN(str,strlength)+1);</font></pre>
                              </blockquote>
                              <p><a name="mrnvr16"></a></p>
                              <p> 
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Math.random() 
                                  is not very random on systems with 16-bit integers</font></b><br>
                                  (for ISDK/C 4.40f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug: 
                                  On systems compiled with 16-bit integers, Math.random() 
                                  always generates numbers very close to 0.0 or 
                                  1.0 (e.g. 0.0545345 or 0.992322), and not well-spread 
                                  between 0 and 1.</font> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In srclib/ecma/mathobj.c, function Ecma_Math_random(), 
                                  change this line:</font> </p>
                                <pre><font face="Courier New, Courier, mono" size="2">   int r[5];</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">to 
                                  this:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   uword32 r[5];</font></pre>
                              </blockquote>
                              <p><a name="12amutc"></a></p>
                              <p> 
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Date 
                                  parser not recognizing 12 AM or &quot;UTC&quot;</font></b><br>
                                  (for ISDK/C 4.40f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Problem: 
                                  When parsing a date/time with &quot;12:00 AM 
                                  UTC&quot; the date parser is not recognizing 
                                  this as midnight, but is instead registering 
                                  that time as noon. Also, although the ECMAScript 
                                  specification sets &quot;GMT&quot; as the tag 
                                  for declaring universal time, it has become 
                                  common to also use &quot;UTC&quot;</font>. 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Change</b>: 
                                  In srclib/ecma/sedate.c, function do_parse(), 
                                  at around line 791, just before the comment 
                                  that begins &quot;/* if there is a PM anywhere...&quot; 
                                  add this code:</font> </p>
                                <pre><font face="Courier New, Courier, mono" size="2">   /* if it is 12, but 12 AM, then that time is really 0 */
   if ( time[0] == 12  &amp;&amp;  strstr_jsechar(DateBuf,UNISTR(&quot;am&quot;)) )
      time[0] = 0;</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and 
                                  then at about line 974 change this code</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   gmt = strstr_jsechar(DateBuf,UNISTR(&quot;gmt&quot;));
   if ( gmt == NULL )</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">to 
                                  this</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if ( NULL == (gmt = strstr_jsechar(DateBuf,UNISTR(&quot;gmt&quot;)))
     &amp;&amp; NULL == (gmt = strstr_jsechar(DateBuf,UNISTR(&quot;utc&quot;))) )</font></pre>
                              </blockquote>
                              <p><a name="smsrn"></a></p>
                              <p> 
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b><font face="Verdana, Arial, Helvetica, sans-serif" size="2">String 
                                  match function should return null on no match</font></b><br>
                                  (for ISDK/C 4.40f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Issue: 
                                  According to the commonly recognized ECMAScript 
                                  Edition 3 Errata, string.match should return 
                                  NULL if there are no items matched. This differs 
                                  from the ECMAScript document, and from our 4.40f 
                                  code, which would return a zero-length array. 
                                  Note: This errata introduced a string.search() 
                                  bug as described <a href="#psmbsr">above</a>.</font>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Change</b>: 
                                  To get the return-null behavior, In srclib/ecma/seobject.c, 
                                  near the end of string_search_helper() (at about 
                                  line 4750) replace this code</font><font face="Verdana, Arial, Helvetica, sans-serif" size="2">:</font> 
                                </p>
                                <pre><font face="Courier New, Courier, mono" size="2">   /* I hate destroying the stack in multiple places, but the
    * 'func_ret' will go away with the stack, so the stack
    * has to remain as long as accessing it.
    */
   jseDestroyStack(jsecontext,stack);
   break;</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
                                  with</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   #</font>if 1
   /* this part of the code is a result of the ECMA-262 errata */
   jseDestroyVariable(jsecontext,ret);
   ret = jseCreateVariable(jsecontext,jseTypeNull);
   #endif
   <font face="Courier New, Courier, mono" size="2">/* I hate destroying the stack in multiple places, but the
    * 'func_ret' will go away with the stack, so the stack
    * has to remain as long as accessing it.
    */
   jseDestroyStack(jsecontext,stack);
   break;</font></pre>
                              </blockquote>
                              <p><a name="relfr"></a></p>
                              <p> 
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>recursive 
                                  MARK_OBJECT alternative (eliminating MARK_STACK_SIZE) 
                                  frees in-use destructors</b></font></font><br>
                                  (for ISDK/C 4.40f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug: 
                                  The FAQ code describing how to replaces MARK_STACK_SIZE 
                                  problems (see <a href="#sscmss">below</a>) with 
                                  a recursize version (similar to what is found 
                                  in 5.01) has a bug that frees destructor objects 
                                  before they are called--this can crash. That 
                                  FAQ is found at <a href="http://nombas.custhelp.com/cgi-bin/nombas.cfg/php/enduser/std_adp.php?p_faqid=919">segmentation 
                                  fault during GC with small MARK_STACK_SIZE on 
                                  solaris</a></font> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  That FAQ (<a href="http://nombas.custhelp.com/cgi-bin/nombas.cfg/php/enduser/std_adp.php?p_faqid=919">segmentation 
                                  fault during GC with small MARK_STACK_SIZE on 
                                  solaris</a>). The new code is this block added 
                                  at the end:</font> </p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( global-&gt;destructorCount )
   {
      uint i;
      for( i=0; i &lt; destructorCount; i++ )
         MARK_OBJECT(global-&gt;hDestructors[i],&amp;mstackinfo);
   }</font></pre>
                              </blockquote>
                              <p><a name="mlats"></a></p>
                              <p> 
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>memory 
                                  leak with array.toSource</b></font><br>
                                  (for ISDK/C 4.40f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug: 
                                  A memory buffer remains unreleased for each 
                                  call to Array.prototype.toSource. This would 
                                  happen any time ToSource is applied to an instance 
                                  of an Array, or to any object containing an 
                                  instance of an Array.</font> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In src/lib/ecma/seobject.c, function Ecma_Array_toSource, 
                                  the following should be added as the last line 
                                  of the function at about line 1805</font><font face="Verdana, Arial, Helvetica, sans-serif" size="2">:</font> 
                                </p>
                                <pre><font face="Courier New, Courier, mono" size="2">   jseDestroyVariable(jsecontext,ret);</font></pre>
                              </blockquote>
                              <p><a name="cafp"></a></p>
                              <p> 
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Alignment 
                                  errors with Clib *printf and *scanf floating-point 
                                  on HP-UX</b><br>
                                  (for ISDK/C 4.40f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug: 
                                  If a call to the Clib *printf or *scanf methods 
                                  (e.g. Clib.sprintf) contains non-floating-point 
                                  data types following a floating-point type, 
                                  data alignment may be incorrect and invalid 
                                  data or crashes will result. This problem appears 
                                  only on HPUX systems.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  Replace srclib/clib/sefmtio.c with the file 
                                  at <a href="ftp://ftp.nombas.com/pub/isdkeval/se440/sefmtio.c">ftp://ftp.nombas.com/pub/isdkeval/se440/sefmtio.c</a></font></p>
                              </blockquote>
                              <p><a name="sscmss"></a></p>
                              <p> 
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>system 
                                  can become corrupted if number of objects in 
                                  use is greater than MARK_STACK_SIZE</b><br>
                                  (for ISDK/C 4.40f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug: 
                                  If the number of objects in use is greater than 
                                  MARK_STACK_SIZE (defined in call.h) then memory 
                                  may become corrupted. This is a rare oocurence 
                                  and very difficult to duplicate. If you have 
                                  experienced such corruption when running with 
                                  very many objects, and if the problem is difficult 
                                  to duplicate, then this may be the cause.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In srccore/garbage.c, function mark(), this 
                                  block near line 936:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   for( i=0;i&lt;used;i++ )
   {
      rSEVar var;</font>
   
      var = &amp;SEMEMBERS_GET(basecall,mems,i,value);</pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">should 
                                  </font><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
                                  become:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   for( i=0;i&lt;used;i++ )
   {
      rSEVar var;</font>
   
      VarName vn = SEMEMBERS_GET(basecall,mems,i,name);
      if( NO_VARNAME != vn
       &amp;&amp; IsNormalStringTableEntry(vn)
       &amp;&amp; 0 == (HashListFromVarName(vn)-&gt;locks &amp; JSE_STRING_SWEEP_BIT) )
      {
         add_it = TRUE;
         break;
      }
   
      var = &amp;SEMEMBERS_GET(basecall,mems,i,value);</pre>
                              </blockquote>
                              <p><a name="slnr"></a></p>
                              <p> 
                              <ul>
                                <li><b><font face="Verdana, Arial, Helvetica, sans-serif" size="2">when 
                                  converting numbers to strings, rounding will 
                                  not occur in some locales</font></b><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><br>
                                  (for ISDK/C 4.40f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug: 
                                  In locales that use a comma to separate fractional 
                                  parts of floating-point numbers (e.g. 3,145). 
                                  JSE_NUMTOSTRING_ROUNDING will not round.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In src/misc/utilstr.c, function EcmaNumberToString(), 
                                  at around line 955, this statement:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if ( NULL == (decimal=strchr_jsechar((jsecharptr)buffer,'.')) )</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">should 
                                  become:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if ( NULL == (decimal=strchr_jsechar((jsecharptr)buffer,'.'))
     && NULL == (decimal=strchr_jsechar((jsecharptr)buffer,',')) )</font></pre>
                              </blockquote>
                              <p><a name="mcpsem"></a></p>
                              <p> 
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Memory 
                                  corruption on %s error messages</b></font><br>
                                  (for ISDK/C 4.40f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug: 
                                  If an error messages is generated with a format 
                                  string containing the &quot;%s&quot; formatting 
                                  type, and if the string that %s refers to is 
                                  very long, then an assert will be generated 
                                  (in debug mode), or a memory-overwrite will 
                                  likely cause a crash (in release mode). For 
                                  example, this script would cause such a crash:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   var bigstr = "func";
   for (var i = 0; i < 5000; i++ )
      bigstr += "x";
   bigstr += "()";
   eval(bigstr);</font></pre>
                                <p><font face="Courier New, Courier, mono" size="2"></font><font face="Verdana, Arial, Helvetica, sans-serif" size="2">This 
                                  can also be a problem if you are using %s in 
                                  any of your jseLibErrorPrintf() calls but are 
                                  not limiting the length of string arguments.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  Edit the files srccore/rsrccore.h and srclib/common/rsrclib.h 
                                  and change all occurences of &quot;%s&quot; 
                                  in those files to be &quot;%.30s&quot;. If you 
                                  are using a build that relies on our implementation 
                                  of jse_vsprintf in srcmisc/utilstr.c (if your 
                                  system does not supply a native implementation 
                                  of vsprintf) then contact http://support.nombas.com/ 
                                  for a replacement function.</font></p>
                              </blockquote>
                              <p><a name="sdlconl"></a></p>
                              <p> 
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>SElib.dynamicLink() 
                                  expects string lengths to remain constant</b></font><br>
                                  (for ISDK/C 4.40f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug: 
                                  If a DLL (or shared object or code fragment) 
                                  receives a string datum from SElib.dynamicLink() 
                                  and changes the data in that string so that 
                                  its length is shorter than the original string, 
                                  we will assume the length has not changed and 
                                  store data beyond the end of the string into 
                                  the passed parameter. In Unicode and ASCII builds 
                                  this will just leave the string length incorrect. 
                                  In MBCS builds this could potentially cause 
                                  a failure if the data beyond the null character 
                                  is invalid MBCS sequences.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In srclib/common/sedyna.c, function CallDynamicFunction(), 
                                  at about line 217 change the statement from:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   jsePutStringLength(jsecontext,v,(jsecharptr )data,BufferLengths[i]);</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">to:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   jsePutString(jsecontext,v,(jsecharptr )data);</font></pre>
                              </blockquote>
                              <p><a name="gndlbl"></a></p>
                              <p> 
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b><font face="Verdana, Arial, Helvetica, sans-serif" size="2">bad 
                                  error message, or crash, when &quot;goto&quot; 
                                  statement is not followed by a label</font></b><br>
                                  (for ISDK/C 4.40f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug: 
                                  If a goto is compiled, but is not followed by 
                                  a proper label, then the error message will 
                                  be invalid, may display garbage, and may crash.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In srccore/statemnt.c, function secompileStatement(), 
                                  in the &quot;case seTokGoto:&quot; change line 
                                  974 from:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   callQuit(this->call,textcoreGOTO_LABEL_NOT_FOUND);</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">to:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   callQuit(this->call,textcoreNOT_LOOP_LABEL);</font></pre>
                              </blockquote>
                              <p><a name="nogo"></a></p>
                              <p> 
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>&quot;goto&quot; 
                                  is not standard EcmaScript</b><br>
                                  (for ISDK/C 4.40f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Issue: 
                                  ScriptEase implements the &quot;goto&quot; statement, 
                                  but most other EcmaScript implementations do 
                                  not recognize the keyword.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  To disable the &quot;goto&quot; keyword, in 
                                  srccore/codeprt2.c function GetVariableNameOrKeyword(), 
                                  at about line 465, change this line:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">      if ( -1 != find )</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">to:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">      if ( -1 != find
   #    if defined(JSE_DISABLE_GOTO)
        && find != textcoreKeyword_goto
   #    endif
       )</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Then, 
                                  if you want to disable the &quot;goto&quot; 
                                  keyword, compile with JSE_DISABLE_GOTO defined.</font></p>
                              </blockquote>
                              <p><a name="comole"></a></p>
                              <p> 
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>COMOBJ 
                                  leaks resources</b><br>
                                  (for ISDK/C 4.40f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug: 
                                  COMOBJ can leaks resources when working with 
                                  type libraries and pass-by-ref COM objects. 
                                  Over time total memory use will grow.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  Replace srclib/comobj/* code with files found 
                                  at <a href="ftp://ftp.nombas.com/pub/isdkeval/se440/comobj_2003_03_20.zip">ftp://ftp.nombas.com/pub/isdkeval/se440/comobj_2003_03_20.zip</a></font></p>
                              </blockquote>
                              <p></p>
                              <hr width="90%">
                              <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>for 
                                4.40e --</b></font> (may apply to earlier versions)<font face="Verdana, Arial, Helvetica, sans-serif" size="2"></font></p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="ctmd"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>comobj 
                                  times miscalculate DST</b><br>
                                  (for ISDK/C 4.40e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: In converting times between a script and 
                                  a COM object, the daylight-savings time calculation 
                                  may be off by one hour. </font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In srclib/comobj/comobj.cpp, function </font><font face="Courier New, Courier, mono" size="2">UnixTimeToSystemTime</font><font face="Verdana, Arial, Helvetica, sans-serif" size="2">() 
                                  replace the body of that function (at about 
                                  line 210) with this code:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   struct tm * localUnixTime = localtime(&t);
   pst->wYear = (localUnixTime->tm_year + 1900);
   pst->wMonth = localUnixTime->tm_mon+1;
   pst->wDayOfWeek = localUnixTime->tm_wday;
   pst->wDay = localUnixTime->tm_mday;
   pst->wHour = localUnixTime->tm_hour;
   pst->wMinute = localUnixTime->tm_min;
   pst->wSecond = localUnixTime->tm_sec;</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">then 
                                  in function CreateReturnedVariant() replace 
                                  this line (at about line 631):</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   time_t t = SystemTimeToUnixTime(&st);</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">with 
                                  this block:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   time_t t;
   struct tm gm;
   
   /* Construct a tm structure based on the SYSTEMTIME structure */
   gm.tm_year = (st.wYear - 1900);
   gm.tm_mon = st.wMonth-1;
   gm.tm_wday = st.wDayOfWeek;
   gm.tm_mday = st.wDay;
   gm.tm_hour = st.wHour;
   gm.tm_min = st.wMinute;
   gm.tm_sec = st.wSecond;
   gm.tm_isdst = -1;
   
   /* Get the time_t */
   t = mktime(&gm);</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="fpcne"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b><font face="Verdana, Arial, Helvetica, sans-serif" size="2">function.protoype.constructor 
                                  does not exist for all objects</font></b><br>
                                  (for ISDK/C 4.40e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: Script functions, which may be called 
                                  with the <font face="Courier New, Courier, mono">new</font> 
                                  operator, do not automatically have a <font face="Courier New, Courier, mono">prototype.constructor</font> 
                                  property, and so object instances created with 
                                  new may not inherit a <font face="Courier New, Courier, mono">.constructor</font> 
                                  property. This auto-constructor behavior is 
                                  not part of the ECMAScript standard (according 
                                  to our interpretation) but it is described in 
                                  most books about ECMAScript and in most browsers.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  Implementating this behavior, without adversely 
                                  affecting performance or memory use, required 
                                  many changes. For details about implementing 
                                  this change in 4.40e see this tech-support item: 
                                  <a href="http://nombas.custhelp.com/cgi-bin/nombas.cfg/php/enduser/std_adp.php?p_faqid=777&amp;p_created=1042211001">Title: 
                                  comparing object.constructor to its constructor 
                                  function fails</a> </font></p>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="scff"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>stack 
                                  corruption with long mode parameter to Clib.fopen() 
                                  and Clib.freopen()</b></font><br>
                                  (for ISDK/C 4.40e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: If the mode parameter to Clib.fopen() or 
                                  Clib.freopen() parameter is longer than 18 characters, 
                                  a stack buffer overflow will occur. </font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In srclib/sestdio.c, functions Clib_fopen() 
                                  and Clib.freopen() change this line (at about 
                                  line 634 and 705)</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   strcpy_jsechar((jsecharptr)NewMode,Mode);</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">to 
                                  this </font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   memset(NewMode,0,sizeof(NewMode));
   strncpy_jsechar((jsecharptr)NewMode,Mode,sizeof(NewMode)/sizeof(NewMode[0])-2);</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="asrt1"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>array 
                                  sort return invalid when array.length==1</b></font><br>
                                  (for ISDK/C 4.40e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: If <font face="Courier New, Courier, mono">array.length==1</font>, 
                                  then <font face="Courier New, Courier, mono">array.sort()</font> 
                                  will return <font face="Courier New, Courier, mono">undefined</font>.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In srclib/ecma/seobject.c, function Ecma_Array_sort(), 
                                  the code (near line 1094) for &quot;&lt;=1&quot; 
                                  elements should be changed to:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( num_items <= 1 )
   {
      jseReturnVar(jsecontext,thisvar,jseRetCopyToTempVar);
      return;
   }</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="nexnfd"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Number 
                                  toExponential() incorrect if fractionDigits 
                                  not specified</b><br>
                                  (for ISDK/C 4.40e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Issues: <font face="Courier New, Courier, mono">Number.prototype.toExponential(fractionDigits)</font> 
                                  is treating <font face="Courier New, Courier, mono">fractionDigits</font> 
                                  as <font face="Courier New, Courier, mono">0</font> 
                                  if unspecified. Instead <font face="Courier New, Courier, mono">toExponential()</font> 
                                  should use as many digits as necessary.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/lib/ecma/seobject.c, function Ecma_Number_toSomething(), 
                                  at about line 2274 a block of code should be 
                                  added after <font face="Courier New, Courier, mono">f&nbsp;=&nbsp;0;</font> 
                                  as follows:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   f = 0;
   if ( _toExponential == toWhat )
   {
      jsechar buffer[ECMA_NUMTOSTRING_MAX];
      jsecharptr cptr = (jsecharptr)buffer;
      /* convert using standard tostring rules */
      EcmaNumberToString(jsecontext,buffer,x);           
      /* from buffer count how many digits are needed after the decimal, that's all digits minus 1 */
      if ( JSECHARPTR_GETC(cptr) == '-' ) JSECHARPTR_INC(cptr);/* skip any negative */
      for ( ; ; )
      {
         jsechar c = JSECHARPTR_GETC(cptr);
         JSECHARPTR_INC(cptr);
         if ( '0' <= c  && c <= '9' )
            f++;
         else if ( '.' != c )
            break;
      }
      f--;
   }</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="ntpi"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Number 
                                  toPrecision() incorrect</b></font></font><br>
                                  (for ISDK/C 4.40e) Updated Dec 11, 2002</font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Issues: <font face="Courier New, Courier, mono">Number.prototype.toPrecision(precision)</font> 
                                  is converting <font face="Courier New, Courier, mono">precision</font> 
                                  digits beyond the decimal, when it should be 
                                  converting <font face="Courier New, Courier, mono">precision-1</font> 
                                  digits.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srclib/ecma/seobject.c, function Ecma_Number_toSomething(), 
                                  at about line 2319 the entire toPrecision block 
                                  should be replaced with this code:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   else
   {
      jsenumber abs_x = JSE_FP_FABS(se,x);
   
     </font><font face="Courier New, Courier, mono" size="2"> assert( _toPrecision == toWhat );
      /* field width must be an int */
      /* if x&gt;=pow(10,-6) &amp;&amp; x&lt;pow(10,f), use fixed-point notation
       * otherwise, use exponential notation */
      if( JSE_FP_LTE(JSE_FP_POW(jsecontext,JSE_FP_CAST_FROM_SLONG(10),JSE_FP_CAST_FROM_SLONG(-6)),abs_x) &amp;&amp;
          JSE_FP_LT(abs_x, JSE_FP_POW(jsecontext,JSE_FP_CAST_FROM_SLONG(10),JSE_FP_CAST_FROM_SLONG(f))) )
      {
         jsenumber f10 = JSE_FP_LOG10(se,abs_x);
         sint d10 = (sint)JSE_FP_CAST_TO_SLONG(f10);
         f -= d10;
         if ( !jseIsNegative(f10) )
            f--;
         JSE_FP_DTOSTR(jsecontext,x,(int)f,buffer,UNISTR(&quot;f&quot;));
      }
      else
      {
         JSE_FP_DTOSTR(jsecontext,x,(int)f-1,buffer,UNISTR(&quot;e&quot;));
      }
   }</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="opece"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>jsePutString() 
                                  may overwrite previous results if JSE_C_EXTENSIONS 
                                  is disabled</b></font><br>
                                  (for ISDK/C 4.40e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: If compiling with JSE_C_EXTENSIONS 0, then 
                                  when jsePutString() or similar calls are used 
                                  to assign to a variable (especially via dynamic 
                                  callbacsk as in the RegExp global object), existing 
                                  string data may be overwritten.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srccore/jselib.c, function GenericPutDataPtr(), 
                                  at about line 2034 this block of code:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">      if( SEVAR_GET_TYPE(val)==VString && (SESTR_IS_CONSTANT(SEVAR_GET_STRING(val).data)
   #     if JSE_C_EXTENSIONS==1
                                           ||  !callLocalCBehavior(call)
   #     endif
                                           ) )</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">should 
                                  be replaced with this code</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">      if( SEVAR_GET_TYPE(val)==VString
   #   if JSE_C_EXTENSIONS==1
       && (SESTR_IS_CONSTANT(SEVAR_GET_STRING(val).data) || !callLocalCBehavior(call))
   #   endif
        )</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="ppvl"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>unknown 
                                  preprocessor directive, if very long, crashes</b></font><br>
                                  (for ISDK/C 4.40e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: If a preprocessor directive is very long 
                                  (e.g. #OIJOJOIJOIQJOIJEWOJWOEOIJOIJ...) then 
                                  a crash may occur while preparing an error message.<font face="Courier New, Courier, mono"></font></font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srccore/util.c, function PreprocessorDirective(), 
                                  at about line 2239 replace this line</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   callError(call,textcoreUNRECOGNIZED_PREPROCESSOR_DIRECTIVE,src);</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">with 
                                  this block:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   {
      jsechar buf[41];
      memset(buf,0,sizeof(buf));
      strncpy_jsechar((jsecharptr)buf,src,sizeof(buf)/sizeof(buf[0])-1);
      callError(call,textcoreUNRECOGNIZED_PREPROCESSOR_DIRECTIVE,buf);
   }</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="srcnm"></a></font></p>
                              <ul>
                                <li><b><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">string.replace 
                                  crashes or consumes all memory when replacing 
                                  with null string</font></font></b><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><br>
                                  (for ISDK/C 4.40e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: When using string.replace() to delete a 
                                  character from a string, by replacing it with 
                                  &quot;&quot;, the call may crash or use too 
                                  much memory.<font face="Courier New, Courier, mono"></font></font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srclib/ecma/seobject.c, function add_string(), 
                                  add this statement as the first line of the 
                                  function (at about line 4200):</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if ( !add_len ) return;</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="rsts"></a></font></p>
                              <ul>
                                <li><b><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">invalid_regexp_instance.toString() 
                                  crash</font></font></b><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><br>
                                  (for ISDK/C 4.40e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: Calling the RegExp toString operator on 
                                  an object that is not a valid RegExp instance 
                                  will crash. E.G. <font face="Courier New, Courier, mono">RegExp.prototype.toString()</font></font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srclib/ecma/seregexp.c, function RegExp_toString, 
                                  at about line 128 change this code:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   orig = jseGetString(jsecontext,tmp,&len);</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">to 
                                  this</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   len = 0;
</font><font face="Courier New, Courier, mono" size="2">   orig = tmp ? jseGetString(jsecontext,tmp,&len) : UNISTR("");</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="eldv"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Errors 
                                  with extremely large Date values</font></b><br>
                                  (for ISDK/C 4.40e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: Date values larger than the maximum 
                                  allowable to new Date() can cause nearly-infinite 
                                  loops.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srclib/ecma/sedate.c, function do_date_construction(), 
                                  near line 1109 find this block:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   else
   {
      value = jseGetNumberDatum(jsecontext,cv,NULL);
   }</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and 
                                  replace with this:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   else
   {
      value = jseGetNumberDatum(jsecontext,cv,NULL);
      value = TimeClip(jsecontext,value);
   }</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="pphliv"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b><font face="Verdana, Arial, Helvetica, sans-serif" size="2">during 
                                  script compilation peephole optimizer accesses 
                                  invalid memory</font></b><br>
                                  (for ISDK/C 4.40e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: The peephole optimizer can access invalid 
                                  memory during script compilation. In rare circumstance 
                                  this may cause a crash.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srccore/expressn.c, function secompileDelete, 
                                  at about line 1052 change this statement:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   memmove( sptr, sptr+size, elementMoveCount * sizeof(secodeelem) );</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">to</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   memmove( This->opcodes+offsetTo, This->opcodes+offsetFrom,
</font><font face="Courier New, Courier, mono" size="2">            elementMoveCount * sizeof(secodeelem) );</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">A 
                                  few lines further down, in the function secompilePeephole(), 
                                  at about line 1065 remove the &quot;StartOpcodes&quot; 
                                  local variable and add these local variables 
                                  instead:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   uint i, nxti;</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">and 
                                  then at about line 1075 replace this block</font></p>
                                <pre>   <font face="Courier New, Courier, mono" size="2">/* The array can move and its size can change, so need
    * to recalculate ending point each iteration.
    */
   StartOpcodes=This-&gt;opcodes;
   for( sptr = StartOpcodes; sptr &lt; (beyond_end = This-&gt;opcodes + This-&gt;opcodesUsed); )
   {</font></pre>
                                <p><font face="Courier New, Courier, mono" size="2"> 
                                  </font><font size="2" face="Verdana, Arial, Helvetica, sans-serif">with 
                                  </font><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  this block</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   /* The array can move and its size can change, so need
    * to recalculate ending point each iteration.
    */
   for( i = 0; i&lt;This-&gt;opcodesUsed; )
   {
      sptr = This-&gt;opcodes + i;
      beyond_end = This-&gt;opcodes + This-&gt;opcodesUsed;
      nxti = i+1+SECODE_DATUM_SIZE(*sptr);</font></pre>
                                <p><font face="Courier New, Courier, mono" size="2"> 
                                  </font><font size="2" face="Verdana, Arial, Helvetica, sans-serif">and 
                                  later in the same function, at about line 1138, 
                                  is an secompileDelete statement followed by 
                                  a reference to SE_GLOBAL_NOTDIRECTXLAT. Insert 
                                  a line between those two statement so it now 
                                  reads:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   secompileDelete(This,sptr,&amp;targetted,-change);
   sptr = This-&gt;opcodes + i;
   if ( SE_GLOBAL_NOTDIRECTXLAT &lt;= c )</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">and 
                                  finally, in this same function (at about line 
                                  1301) replace this line</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   sptr = nxt;</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">with 
                                  this line</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   i = nxti;</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="mothra"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b><font face="Verdana, Arial, Helvetica, sans-serif" size="2">sedbc 
                                  bugs with long binary data</font></b><br>
                                  (for ISDK/C 4.40e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: SEDBC can crash when reading from or 
                                  writing to database columns representing any 
                                  of the large binary data types.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srclib/sedbc/jse_rfx.c, function jseFieldExchange_LongString(), 
                                  case rf_value, at about line 2761 is a call 
                                  to SQLBindParameter passing the 8th paramater 
                                  as &quot;<font face="Courier New, Courier, mono">&amp;value</font>&quot;. 
                                  That parameter should be &quot;<font face="Courier New, Courier, mono">value</font>&quot;. 
                                  (I.E. <font face="Courier New, Courier, mono">value</font> 
                                  instead of the address of <font face="Courier New, Courier, mono">value</font>.)</font></p>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="ssres"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">string.split() 
                                  incorrect if regular expression used as separator</font></font></b></font></font></font><br>
                                  (for ISDK/C 4.40e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: String.prototype.split(separator) returns 
                                  the wrong results when separator is a regular 
                                  expression and does not match the first character 
                                  of the string.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srclib/ecma/seobject.c, function Ecma_String_split(), 
                                  at about line 3685 (just after the second call 
                                  to SplitMatch) this of code:</font></p>
                                <p></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   /* step 14 */
   JSE_POINTER_UINDEX e = 0;
   jseVariable tmp2,tmp = jseGetIndexMember(jsecontext,z,0);
   if( tmp )</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">should 
                                  be changed to:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   /* step 14 */
   JSE_POINTER_UINDEX e;
   jseVariable tmp2,tmp;
   if ( R && 0!=jseGetIntegerDatum(jsecontext,z,JseStr(jsecontext,index)) )
   {
      jseDestroyVariable(jsecontext,z);
      q++;
      continue;
   }
   e = 0;
   tmp = jseGetIndexMember(jsecontext,z,0);
   if( tmp )</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="vsvn7f"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b><font face="Verdana, Arial, Helvetica, sans-serif" size="2">very 
                                  short variable names incorrect if character 
                                  &gt; 0x7f</font></b></font></font></font><br>
                                  (for ISDK/C 4.40e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: If a variable name or identifier is 3 characters 
                                  or less, and any of the characters is a value 
                                  between 0x7f and 0xff (inclusive) (e.g. foo[&quot;\xb9&quot;]) 
                                  it will be converted incorrectly, causing an 
                                  assert() or invalid program excecution.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srccore/util.c, in the function CreateVarName, 
                                  at about line 358 this statement:</font></p>
                                <p></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   ret |= ((uword32)c) << shift;</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">should 
                                  be changed to:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   ret |= ((uword32)(ujsechar)c) << shift;</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="cnu"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>fields 
                                  of call structure and api_string structure may 
                                  not be initialized</b></font><br>
                                  (for ISDK/C 4.40e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: Some fields of the call and api_string_block 
                                  structures may not be initialized. Specifically, 
                                  the useCache boolean flag is sometimes checked 
                                  before it is initialized, and each allocation 
                                  of api_string_block is left in an uninitialized 
                                  state. This has not been shown to cause any 
                                  run-time errors, yet.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srccore/call.c, function callInterpret(), 
                                  at about line 1287, add a call to memset() following 
                                  the existing call to jseMustMalloc(), so the 
                                  code is now:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   call = jseMustMalloc(struct Call,sizeof(struct Call));
   memset(call,0,sizeof(struct Call));</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and 
                                  again in srccore/jselib.c, function jseCreateFiberContext(), 
                                  add a call to memset() following the existing 
                                  call to jseMustMalloc(), so the code is now:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   call = jseMustMalloc(struct Call,sizeof(struct Call));
   memset(call,0,sizeof(struct Call));</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">In 
                                  srccore/util.c, function callApiStringEntry(), 
                                  at about line 746, follow the line to jseMustMalloc() 
                                  with a call to memset, so the code becomes:</font></p>
                                <pre>   <font face="Courier New, Courier, mono" size="2">b = jseMustMalloc(struct api_string_block,sizeof(struct api_string_block));
   memset(b,0,sizeof(struct api_string_block));</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="vudc"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>variables 
                                  on stack may be uninitialized during garbage 
                                  collection</b><br>
                                  (for ISDK/C 4.40e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: Temporary variables pushed on the stack 
                                  may be uninitialized when the garbage collector 
                                  executes. This may lead to corrupt script variables.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In the following cases, the macro STACK_PUSH 
                                  should be immediately followed by the macro 
                                  SEVAR_INIT_UNDEFINED. These are:</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">srccore/varutil.c, 
                                  function seobjHasProperty(), at about line GetDotNamedVar(), 
                                  at about line 3146, this code:</font></p>
                                <pre>   <font face="Courier New, Courier, mono" size="2">tmp = STACK_PUSH;
</font><font face="Courier New, Courier, mono" size="2">   exists = ( 0 == (flags&HP_NO_PROTOTYPE) )</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">should 
                                  become</font></p>
                                <pre>   <font face="Courier New, Courier, mono" size="2">tmp = STACK_PUSH;
   SEVAR_INIT_UNDEFINED(tmp);
</font><font face="Courier New, Courier, mono" size="2">   exists = ( 0 == (flags&HP_NO_PROTOTYPE) )</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">In 
                                  srccore/varutil.c, function sevarCallConstructor(), 
                                  at about line 2191 this code</font></p>
                                <pre>   <font face="Courier New, Courier, mono" size="2">tmp = STACK_PUSH;</font><font face="Courier New, Courier, mono" size="2">
   if( !seobjGetFuncVar(call,this,STOCK_STRING(call,_construct),tmp) )</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">should 
                                  become</font></p>
                                <pre>   <font face="Courier New, Courier, mono" size="2">tmp = STACK_PUSH;</font><font face="Courier New, Courier, mono" size="2">
   SEVAR_INIT_UNDEFINED(tmp);
   if( !seobjGetFuncVar(call,this,STOCK_STRING(call,_construct),tmp) )</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">In 
                                  srccore/varutil.c, function GetDotNamedVar(), 
                                  at about line 2293, these lines:</font></p>
                                <pre>   <font face="Courier New, Courier, mono" size="2">tmp = STACK_PUSH;
   
   if( !seobjGetMember(call,hobj,varname,tmp) )</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">In 
                                  srccore/secode.c, function secodeInterpet(), 
                                  case sePreIncLocalWith, at about line 783, this 
                                  code</font></p>
                                <pre>   <font face="Courier New, Courier, mono" size="2">w_lhs = STACK_PUSH;
   w_rhs = STACK_PUSH; </font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">should 
                                  become </font></p>
                                <pre>   <font face="Courier New, Courier, mono" size="2">w_lhs = STACK_PUSH;
   w_rhs = STACK_PUSH; 
   SEVAR_INIT_UNDEFINED(w_lhs);</font></pre>
                                <p><font face="Courier New, Courier, mono" size="2">and 
                                  finally in srccore\jselib.c, jseCallFunctionEx(), 
                                  at about line 2895, this line</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   onstack = STACK_PUSH;</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">should 
                                  become this</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   onstack = STACK_PUSH;
   SEVAR_INIT_UNDEFINED(onstack);</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="pid"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>parseInt() 
                                  treating characters &quot;:;&lt;=&gt;?@&quot; 
                                  as digits 3 through 9</b><br>
                                  (for ISDK/C 4.40e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: When evaluating a string, parseInt() 
                                  is treating the characters from &quot;:&quot; 
                                  to &quot;@&quot; (\x3A to \x40) as the digits 
                                  3 through 9.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srclib/ecma/ecmamisc.c, function Ecma_parseInt, 
                                  </font><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  replace this line at about line 162:</font></p>
                                <pre><font face="Courier New, Courier, mono">   val = toupper_jsechar(JSECHARPTR_GETC(str))-'A'+10;</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">with 
                                  this:</font></p>
                                <pre><font face="Courier New, Courier, mono">   if ( (val = toupper_jsechar(JSECHARPTR_GETC(str))-'A'+10) &lt; 10 ) break;</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="fpan"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Function.prototype.apply() 
                                  not accepting null for thisObj parameter</b><br>
                                  (for ISDK/C 4.40e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: Function.prototype.apply() should accept 
                                  null or undefined as the first parameter, using 
                                  the global object for these cases. Instead an 
                                  error message is generated.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srclib/ecma/seobject.c, function Ecma_Function_apply, 
                                  </font><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  at about line 463 replace this conditional:</font></p>
                                <pre><font face="Courier New, Courier, mono">   if( jseFuncVarCount(jsecontext) != 0 )</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">with 
                                  this:</font></p>
                                <pre><font face="Courier New, Courier, mono">   if( jseFuncVarCount(jsecontext) != 0
    && jseTypeNull < jseGetType(jsecontext,jseFuncVar(jsecontext,0)) )</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">and 
                                  at about line 475 replace this conditional statement</font></p>
                                <pre><font face="Courier New, Courier, mono">   if( jseFuncVarCount(jsecontext) > 1 )</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">with 
                                  this</font></p>
                                <pre><font face="Courier New, Courier, mono">   if( jseFuncVarCount(jsecontext) > 1
    && jseTypeNull < jseGetType(jsecontext,jseFuncVar(jsecontext,1)) )</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="gisl"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Documentation 
                                  incorrect about lifetime of jseGetInternalString()</b><br>
                                  (for ISDK/C 4.40e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: The documentation for the function 
                                  <font face="Courier New, Courier, mono">jseGetInternalString()</font>, 
                                  states:</font></p>
                                <pre><font face="Courier New, Courier, mono">   The returned pointer is valid as long as
   the jseString it is obtained from is valid.</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  That statement is not correct, and should instead 
                                  be:</font></p>
                                <pre><font face="Courier New, Courier, mono">   The text represented by many sestring values
   is internally stored in a compact format, and
   so the string returned by this call may be
   stored in a temporary location; the returned
   pointer is guaranteed to be valid only until
   the next call into the script-engine API.</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="vltc"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>If 
                                  interpreting very long text lines, // comments 
                                  may extend over multiple lines</b><br>
                                  (for ISDK/C 4.40e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: If interpreting <font face="Courier New, Courier, mono">jseInterpret(...SourceTrext...)</font> 
                                  where any line of the raw text string is very 
                                  long (usually many hundreds of characters), 
                                  and if within the line there is an end-of-line 
                                  comments (<font face="Courier New, Courier, mono">//</font>), 
                                  that comment may wrongly extend until the end 
                                  of the buffer.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srccore/code.c, add this function:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">      static const jsecharptr JSE_NEAR_CALL
   endOfSourceLine(const jsecharptr src)
   {
      jsechar c;
      do {
         JSECHARPTR_INC(src);
      } while ( (c = JSECHARPTR_GETC(src))!=0  &amp;&amp;  c!='\r'  &amp;&amp;  c!='\n' );
      return src;
   }</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">and 
                                  in the function tokGetNext() change the three 
                                  instance of this line:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   goto EndOfSourceLine;</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">to 
                                  this:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   status-&gt;srcptr = endOfSourceLine(status-&gt;srcptr); continue;</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="sszp"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>string 
                                  slice() function is not accepting zero parameters</b><br>
                                  (for ISDK/C 4.40e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: String.prototype.slice() will report 
                                  an error if it is passed no parameters. Instead, 
                                  it should treat calls to <font face="Courier New, Courier, mono">string.slice()</font> 
                                  as <font face="Courier New, Courier, mono">string.slice(0)</font>.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srclib/ecma/seobject.c, at about line 5005, 
                                  change this line:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   JSE_PROTOMETH( UNISTR("slice"), Ecma_String_slice, 1, 2, jseDontEnum, jseFunc_Secure )</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">to 
                                  this</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   JSE_PROTOMETH( UNISTR("slice"), Ecma_String_slice, 0, 2, jseDontEnum, jseFunc_Secure )</font></pre>
                                <p><font size="2" face="Courier New, Courier, mono"> 
                                  <font face="Verdana, Arial, Helvetica, sans-serif">and 
                                  in function Ecma_String_slice() at about line 
                                  4065 change this line:</font></font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   start = jseGetLong(jsecontext,jseStart);</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">to 
                                  this</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   start = jseFuncVarCount(jsecontext) ? jseGetLong(jsecontext,jseStart) : 0;</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and 
                                  change the line at about 4052 from</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   JSE_FUNC_VAR_NEED(jseStart,jsecontext,0,JSE_VN_CONVERT(JSE_VN_ANY,JSE_VN_NUMBER));</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">to</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if ( 0 != jseFuncVarCount(jsecontext) )
      JSE_FUNC_VAR_NEED(jseStart,jsecontext,0,JSE_VN_CONVERT(JSE_VN_ANY,JSE_VN_NUMBER));</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="al0"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>setting 
                                  array length to 0 does not remove all indexed 
                                  properties</b><br>
                                  (for ISDK/C 4.40e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: Setting the length property of an Array 
                                  instance to zero does not remove the properties, 
                                  although it does set the length to 0.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srccore/var.c, function sevarSetArrayLength(), 
                                  at about line 357 change the initialization 
                                  of <font face="Courier New, Courier, mono">maxi</font> 
                                  to be:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   jsenumber maxi = JSE_FP_SUB(JSE_FP_CAST_FROM_ULONG(Length),jseOne);</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="cr5$"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>5-character 
                                  variables names incorrect if either of last 
                                  two characters is '$'</b><br>
                                  (for ISDK/C 4.40e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: In many cases, internal representation 
                                  of variable names will be incorrect if the string 
                                  is 4 or 5 characters long and either of the 
                                  last two characters are '$'. For example, the 
                                  names &quot;book&quot; and &quot;book$&quot; 
                                  would conflict and both represent the same variable.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srccore/util.c, function CreateVarName(), 
                                  at about line 349 (following the test for <font face="Courier New, Courier, mono">'$'&nbsp;==&nbsp;c</font>, 
                                  change this line:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   if( i==4 )</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">to 
                                  this</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   if( i==5 )</font></pre>
                              </blockquote>
                              <hr width="90%">
                              <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>for 
                                4.40d --</b></font> (may apply to earlier versions)</p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="strpsk"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>String 
                                  replace may skip matches if replacement string 
                                  is null-string (i.e. &quot;&quot;)</b><br>
                                  (for ISDK/C 4.40d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: If the replacement expression in a string 
                                  replace() method is the zero-length string, 
                                  then characters may be skipped in performing 
                                  the replacement. For example, this script would 
                                  fail the test:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   var str = '6 abcdef';
   var rtn = str.replace(/[^0-9\.]/g,'');
   Test.assert( rtn == "6" );  // in error would be &quot;6acf&quot;</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srclib/ecma/seobject.c, function string_search_helper(), 
                                  replace the block of code beginning with &quot;<font face="Courier New, Courier, mono">/*&nbsp;The&nbsp;return&nbsp;from&nbsp;exec&nbsp;should&nbsp;be&nbsp;an&nbsp;object</font><font face="Verdana, Arial, Helvetica, sans-serif">&quot;</font> 
                                  with the code found at <a href="ftp://ftp.nombas.com/pub/isdkeval/se440/string_search_helper.txt">ftp://ftp.nombas.com/pub/isdkeval/se440/string_search_helper.txt</a></font></p>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="cdb"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>rare 
                                  crashes on memory overwrites using the dynamicBuffer 
                                  routines</b><br>
                                  (for ISDK/C 4.40d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: Code may overwrite one byte beyond allocated 
                                  memory when using the dynamicbuffer functions.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srclib/common/selibutl.c, function dynamicBufferAppendLength(), 
                                  at about line 138 change this line:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( buf->used + length > buf->allocated )</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">to 
                                  this:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( buf->used + length >= buf->allocated )</font></pre>
                                <p><font face="Courier New, Courier, mono" size="2">and 
                                  at about line 142</font><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  change this line:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   } while( buf->used + length > buf->allocated );</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">to 
                                  this:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   } while( buf->used + length >= buf->allocated );</font><font face="Courier New, Courier, mono" size="2"></font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="bjnmidx"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Problems 
                                  with array lengths and numeric indices that 
                                  are large or non-integer</b><br>
                                  (for ISDK/C 4.40d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: There are many problems with handling array 
                                  and object members that are either very large 
                                  (e.g. <font face="Courier New, Courier, mono">obj[2147483650]</font>) 
                                  or are non-integer numbers (e.g. <font face="Courier New, Courier, mono">obj[3.14159]</font>, 
                                  <font face="Courier New, Courier, mono">obj[1e34]</font>). 
                                  There are also related problems with setting 
                                  an array length to a very large number (e.g. 
                                  array.length=<font face="Courier New, Courier, mono">2147483650</font>).</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  The number of changes needed to fix these problems 
                                  in such a way that they would work on all build 
                                  types (fp, fpemul, nofp) without a loss of performance 
                                  was very large. Because the number of changes 
                                  was so large we recommend that you update to 
                                  version 4.40d. However, if you must apply these 
                                  changes to 4.40d, follow the instructions at 
                                  <a href="ftp://ftp.nombas.com/pub/isdkeval/se440/numidx.txt">ftp://ftp.nombas.com/pub/isdkeval/se440/numidx.txt</a> 
                                  </font></p>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="opc"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Foo.prototype.constructor 
                                  not assigned correctly for all builtin objects</b><br>
                                  (for ISDK/C 4.40d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: For all builtin objects, this statement 
                                  should be true: <font face="Courier New, Courier, mono">Foo.prototype.constructor==Foo</font>. 
                                  For example <font face="Courier New, Courier, mono">Boolean.prototype.constructor==Boolean</font> 
                                  and <font face="Courier New, Courier, mono">Number.prototype.constructor==Number</font>.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srclib/ecma/*.c locate all of the lines like 
                                  this (where instead of &quot;Foo&quot; find 
                                  &quot;Function&quot;, &quot;Object&quot;, &quot;Array&quot;, 
                                  &quot;Boolean&quot;, &quot;Number&quot;, &quot;String&quot;, 
                                  &quot;Buffer&quot;, and &quot;Date&quot;):</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   </font><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><font face="Courier New, Courier, mono">JSE_PROTOMETH( JseStr(jsecontext,constructor), Ecma_Foo_builtin, 0, 0,
                  jseDontEnum,  jseFunc_Secure ) </font></font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">and 
                                  replace those lines with the following:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   JSE_VARASSIGN( UNISTR(&quot;prototype.constructor&quot;), JseStr(jsecontext,Foo),
                  jseDontEnum )</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">Finally, 
                                  the RegExp object is missing this relationship, 
                                  and so add a statement like the above to the 
                                  wrapper list in srclib/ecma/seregexp.c.</font></p>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="rspng"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Array 
                                  split() error for negative starting point</b><br>
                                  (for ISDK/C 4.40d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: Array split() is not handling negative 
                                  start values correctly. This error shows up 
                                  in different ways with different compilers, 
                                  but the following example would fail on all 
                                  systems:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   var a = [1,2,3,4,5,6];
   var b = a.splice(-100,1);
   Test.assert( a == &quot;2,3,4,5,6&quot; );  // wrongly returns &quot;1,2,3,4,5&quot;
   Test.assert( b == &quot;1&quot; );          // wrongly returns &quot;&quot;</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/lib/ecma/seobject.c, function Ecma_Array_splice(), 
                                  at about line 1592 change the code from:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   start = (slong) max( length + start, 0 );</font></pre>
                                <p><font face="Courier New, Courier, mono" size="2"> 
                                  <font face="Verdana, Arial, Helvetica, sans-serif">to</font></font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   start = (slong) max( (slong)length + start, 0 );</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="mthmnnz"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Math.min(+0,-0) 
                                  wrongly returns +0</b><br>
                                  (for ISDK/C 4.40d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: Math.min() is not returning -0 when comparing 
                                  -0 against +0.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/lib/ecma/mathobj.c, function Ecma_Math_min(), 
                                  at about line 380 change the comparison from:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( JSE_FP_LT(current,minval) )</font></pre>
                                <p><font face="Courier New, Courier, mono" size="2"> 
                                  <font face="Verdana, Arial, Helvetica, sans-serif">to</font></font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( JSE_FP_LT(current,minval) || ( jseIsNegZero(current) && jseIsZero(minval) ) )</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="ltmcrsh"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Clib.localtime() 
                                  and Clib.gmtime() crash on out-of-range dates</b><br>
                                  (for ISDK/C 4.40d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: Script calls to Clib.localtime() or Clib.gmtime() 
                                  crash if the input time is out of the range 
                                  of standard C library time routines.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srclib/clib/setime.c, function GenericTimeLib(), 
                                  at about line 325 just after any of the ConversionFunc 
                                  functions will have been called, insert this 
                                  code:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if ( t == NULL )
   {
      jseReturnVar(jsecontext,jseCreateVariable(jsecontext,jseTypeNull),jseRetTempVar);
      return;
   }</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="jsinstcmp"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>compilation 
                                  errors if JSE_INSTANCEOF_HELPER defined</b><br>
                                  (for ISDK/C 4.40d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: Compilation error for seobjfun.c if JSE_INSTANCEOF_HELPER 
                                  is defined for using the jseInstanceof() function..</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srcmisc/seobjfun.c, make the following translations</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   ORIG_PROTOTYPE_PROPERTY   -&gt;   JseStr(jsecontext,prototype)
   PROTOTYPE_PROPERTY        -&gt;   JseStr(jsecontext,_prototype)
   OBJECT_PROPERTY           -&gt;   JseStr(jsecontext,Object)
   FUNCTION_PROPERTY         -&gt;   JseStr(jsecontext,Function)</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="nrnan"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Number 
                                  toString(with_radix) method is not handling 
                                  NaN, Infinity, and -Infinity</b><br>
                                  (for ISDK/C 4.40d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: Converting an instance of a Number object 
                                  toString, using a radix (e.g.&nbsp;<font face="Courier New, Courier, mono">(new&nbsp;Number(foo)).toString(16);</font>) 
                                  does not produce correct results if the number 
                                  is NaN, Infinity, or -Infinity.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/lib/ecma/seobject.c, function Ecma_Number_toString(), 
                                  at about line 2254 cahnge the JSE_NUMBER_TO_STRINGWITHRADIX 
                                  code to be this:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if ( 0 &lt; jseFuncVarCount(jsecontext) )
   {
      slong radix = jseGetIntegerDatum(jsecontext,jseFuncVar(jsecontext,0),NULL);
      if ( radix==10  ||  !jseIsFinite(num) )
         EcmaNumberToString(jsecontext,buffer,num);
      else
         EcmaNumberToStringWithRadix(jsecontext,num,(sint)radix,buffer);
   }
   else</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="ngmbd"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Invalid 
                                  date computation on negative month</b><br>
                                  (for ISDK/C 4.40d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: Date calculations are incorrect, and can 
                                  trigger debugger asserts, if month is negative. 
                                  For example, the following script should set 
                                  the month to October (month 9) and year to 1980, 
                                  but instead it sets the month to January (month 
                                  0) and year to 1981.</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   var foo = new Date("12:00 February 4, 1982");
   foo.setUTCMonth(-15);</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/lib/ecma/sedate.c, function MakeDay(), 
                                  insert code between lines 604 and 606 add code 
                                  so those lines become:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   r6 = m%12;
   if ( r6 < 0 )
   {
      r6 += 12;
      r5--;
   }
   t = TimeFromYear(jsecontext,r5);</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="mthrndneg"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Math.round() 
                                  returns -0 instead of +0 from -0.5 to -0</b><br>
                                  (for ISDK/C 4.40d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: Math.round(val) should return -0 for -0.5 
                                  &lt;= val &lt;= -0, according to section 15.8.2.15 
                                  of the ECMAScript specification, but is returning 
                                  +0.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srclib/ecma/mathobj.c, function Ecma_Math_round, 
                                  the &quot;<font face="Courier New, Courier, mono">if</font>&quot; 
                                  statement and block should be changed to:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   if ( jseIsFinite(val) && !jseIsZero(val) )
   {
      jsenumber half = JSE_FP_DIV(jseOne,JSE_FP_CAST_FROM_SLONG(2));
      /* exception to standard math if between -0.5 and -0, inclusive */
      if ( JSE_FP_LT(val,jseZero) && JSE_FP_LTE(JSE_FP_NEGATE(half),val) )
         val = jseNegZero;
      else
         val = JSE_FP_FLOOR(jsecontext,JSE_FP_ADD(val,half));
   }</font></pre>
                              </blockquote>
                              <p><font face="Courier New, Courier, mono" size="2"><a name="cnverrcr"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Crash 
                                  if reporting invalid data type while generating 
                                  an error message</b><br>
                                  (for ISDK/C 4.40d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: If a method is called during error handling, 
                                  and that method has a data type or conversion 
                                  error, then the program will crash. For example, 
                                  in the following example &quot;<font face="Courier New, Courier, mono">msg</font>&quot; 
                                  is the wrong data type and while rerporing this 
                                  error the program will crash:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   function TypeError(msg)
   {
      Error.apply(this, msg);
      return this;
   }
   TypeError(null);</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srccore/call.c, function callGetVarNeed(), 
                                  after the call to callError() (at about line 
                                  2029), add this statement:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   CALL_SET_STATE(call,StateError);</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="arrlendel"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Array 
                                  .length should not be deletable</b><br>
                                  (for ISDK/C 4.40d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: The .length property of any instance of 
                                  an array should have the DontEnum attribute.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srclib/ecma/seobject.c, function CreateNewObject(), 
                                  at about line 3077 change</font></p>
                                <pre>   <font face="Courier New, Courier, mono" size="2">jseSetAttributes(jsecontext,t2,jseDontEnum);</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">to</font></p>
                                <pre>   <font face="Courier New, Courier, mono" size="2">jseSetAttributes(jsecontext,t2,jseDontEnum||jseDontDelete);</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="pargnoenum"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>properties 
                                  of the arguments object should be DontEnum</b><br>
                                  (for ISDK/C 4.40d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: callee, length, and numbered members of 
                                  the arguments object are enumerable, should 
                                  be DontEnum.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srccore/call.c, function callCreateArguments(), 
                                  there are three calls to &quot;<font face="Courier New, Courier, mono">seobjCreateMemberCopy()</font>&quot; 
                                  each ending with the &quot;<font face="Courier New, Courier, mono">SE_DEFAULT</font>&quot; 
                                  parameter. In all three cases replace &quot;<font face="Courier New, Courier, mono">SE_DEFAULT</font>&quot; 
                                  with &quot;<font face="Courier New, Courier, mono">jseDontEnum</font>&quot;</font></p>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="2pstincwith"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>post-inc/decrement 
                                  operator acts like pre-inc/decrement inside 
                                  a &quot;with&quot; block</b><br>
                                  (for ISDK/C 4.40d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: If a variable member of an object is altered 
                                  with the post-increment or pre-decrement operator, 
                                  and if that is a member of an object scoped 
                                  with &quot;with&quot;, then the code will instead 
                                  act like a pre-increment or pre-decrement operator.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srccore/secode.c, function secodeInterpret(), 
                                  find the switch case started with:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   case sePostDecLocalWith:
   case sePostIncLocalWith:
   case sePreDecLocalWith:
   case sePreIncLocalWith:
   {</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">at 
                                  the end of that block is this line:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   DO_CREMENT(w_rhs,w_lhs,(jsebool)(t&1),t<=sePreDecLocal)</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">change 
                                  the sePreDecLocal to sePreDecLocalWith so it 
                                  reads:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   DO_CREMENT(w_rhs,w_lhs,(jsebool)(t&1),t<=sePreDecLocalWith)</font><font size="2" face="Courier New, Courier, mono"></font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="pstincwith"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>post-increment 
                                  operator on local variable is ignoring &quot;with&quot; 
                                  statement</b><br>
                                  (for ISDK/C 4.40d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: If a local variable is also a member of 
                                  the current &quot;with&quot; object, then post-increment 
                                  will modify the local variable instead of the 
                                  variable in the &quot;with&quot; object. For 
                                  example, the following would wrong increment 
                                  &quot;foo&quot; and not &quot;myobj.foo&quot;</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   function blah()
   {
      var foo = 14;
      var myobj = new Object();
      myobj.foo = 88;
      with ( myobj )
      {
         foo++;
      }</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/core/expressn.c, function secompilePostfixExpression(), 
                                  change the EXPR_LOCAL case (approx line 2950):</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   secompileAddItem2(This,sePostIncLocal+inc,This-&gt;expr.index,This-&gt;with_depth);</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">to 
                                  be these lines:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   if ( this-&gt;with_depth )
      secompileAddItem2(this,sePostIncLocalWith+inc,this-&gt;expr.index,this-&gt;with_depth);
   else
      secompileAddItem1(this,sePostIncLocal+inc,this-&gt;expr.index);</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="pcmptmm"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>loading 
                                  pre-compiled scripts may use too much memory, 
                                  or crash</b><br>
                                  (for ISDK/C 4.40d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: When loading or interpreting from a precompiled 
                                  script (i.e., created with jseCreateCodeTokenBuffer) 
                                  the script engine may use an enormous amount 
                                  of memory to load, or may crash on loading.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srccore/token.c, function tokenReadString(), 
                                  change this line (approx line 568):</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   str = (jsecharptr) jseMustMalloc(jsechar,(size_t)len*sizeof(jsechar)+1/*so never 0*/);</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">to 
                                  be this line:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   str = (jsecharptr) jseMustMalloc(jsechar,(size_t)(*len)*sizeof(jsechar)+sizeof(jsecharptrdatum));</font></pre>
                              </blockquote>
                              <p></p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="gvnoe"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>use 
                                  of undefined global variables do not always 
                                  report error</b><br>
                                  (for ISDK/C 4.40d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: When a variable that has not been declared 
                                  or initialized is used to pass to a function, 
                                  or is automatically assumed to be a function, 
                                  e.g.:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   new String(blah);         // undeclared variable &quot;blah&quot; passed to a funcion
   var zoo = &quot;&quot; + blah.foo;  // undeclared variables treated as an object</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">no 
                                  error message is generated.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srccore/secode.c, function secodeInterpret(), 
                                  within the case for <font face="Courier New, Courier, mono">sePushGlobal</font>, 
                                  <font face="Courier New, Courier, mono">sePushGlobalAsObject</font>, 
                                  and <font face="Courier New, Courier, mono">sePushGlobalParam</font>, 
                                  at about line 1287 is this large block of code:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( jseOptReqVarKeyword &amp; call-&gt;Global-&gt;ExternalLinkParms.options )
   {
      callQuit(call,textcoreFUNC_OR_VAR_NOT_DECLARED,mem);
      break;
   }
   if( t==sePushGlobal )
   {
      callQuit(call,textcoreVAR_TYPE_UNKNOWN,GetStringTableEntry(call,mem,NULL));
      break;
   }
   else
   {
      struct seObjectMem *smem = NULL; /* initialization to shut up compiler */
      ...etc...
   }</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">replace 
                                  that entire block with these five lines:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   callQuit(call,textcoreVAR_TYPE_UNKNOWN,GetStringTableEntry(call,mem,NULL));
   break;</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">This 
                                  change will cause error reports if you are using 
                                  the non-ECMA compile-time option JSE_AUTO_OBJECT 
                                  and are relying on scripts such as those above 
                                  to automatically create object variables. One 
                                  consequence of this is that the non-Ecma function 
                                  <font face="Courier New, Courier, mono">defined()</font> 
                                  will cease to functions as expected in pre-processor 
                                  statements such as</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   #if defined(Clib.puts) </font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">This 
                                  should only be a problem if you use the <font face="Courier New, Courier, mono">JSE_CONDITIONAL_COMPILE</font> 
                                  option. In future releases SE:ISDK will move 
                                  processing of <font face="Courier New, Courier, mono">defined()</font> 
                                  into the pre-processor for <font face="Courier New, Courier, mono">JSE_CONDITIONAL_COMPILE</font> 
                                  builds. If you need this pre-processor code 
                                  ask <a href="http://support.nombas.com/">Tech 
                                  Support</a>, or change defined() to use typeof(). 
                                  For example, the above statement would become</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   #if typeof(Clib)!=&quot;undefined&quot; &amp;&amp; typeof(Clib.puts)!=&quot;undefined&quot;</font></pre>
                              </blockquote>
                              <p></p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="dbgnf"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>debugger 
                                  displays &quot;no filename&quot; for preprocessor 
                                  directives</b><br>
                                  (for ISDK/C 4.40d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: When debugging scripts that are using preprocessor 
                                  directives (e.g., <font face="Courier New, Courier, mono">#if&nbsp;__JSE_WIN32__</font>) 
                                  the debugger will display that it cannot find 
                                  &quot;no filename&quot;. After that message, 
                                  no debugging is possible. This applies to local 
                                  debugging with SEDBGW32.EXE and remote debugging 
                                  with SEDBXW32.EXE</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srcdbg/debugme.c there are two instances 
                                  of the following line (at line 1218 and line 
                                  1465):</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if ( NULL == (filename = jseLocateSource(jsecontext,&amp;linenum)) )</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">replace 
                                  both instances with the following code:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if ( NULL == (filename = jseLocateSource(jsecontext,&amp;linenum))
     || !strcmp(filename,&quot;no filename&quot;) )</font></pre>
                              </blockquote>
                              <p></p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="ooia"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>invalid 
                                  assert for operator overloading on unary operators</b><br>
                                  (for ISDK/C 4.40d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: If overloading unary operators with jseSetObjectCallbacks, 
                                  and NDEBUG is not defined, and invalid assert 
                                  will be triggered.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srccore/varutil.c, function seobjCallDynamicProperty(), 
                                  at about line 2626, replace this block of code:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">      if( dynacallPut == whichCall
   #   if JSE_OPERATOR_OVERLOADING!=0
       || dynacallOperator == whichCall
   #   endif
       || dynacallDefaultvalue == whichCall )
      {
         assert( Parameter2!=NULL );
      }</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">with 
                                  this block:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">      if( dynacallPut == whichCall
       || dynacallDefaultvalue == whichCall )
      {
         assert( Parameter2!=NULL );
      }
   #  if JSE_OPERATOR_OVERLOADING!=0
      else if ( dynacallOperator == whichCall )
      {
         /* Parameter2 may or may not be NULL for overloading (because it may be
          * two operators, or a unary operator. No test.
          */
      }
   #  endif</font></pre>
                                <p>&nbsp;</p>
                              </blockquote>
                              <p></p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="nwno"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>'new' 
                                  operator accepting non-Object return values</b><br>
                                  (for ISDK/C 4.40d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: If a constructor returns a variable that 
                                  is not an object then that return value is not 
                                  being ignored, although it should be. For example, 
                                  in the following example <font face="Courier New, Courier, mono">foo</font> 
                                  should be set to a <font face="Courier New, Courier, mono">new&nbsp;Object</font> 
                                  and not <font face="Courier New, Courier, mono">834</font>.</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   function foomaker()
   {
      return 834;
   }
   var foo = new foomaker();</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srccore/call.c, function callReturnFromFunction(), 
                                  at about line 906 replace this line:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( SEVAR_GET_TYPE(rTmp)==VUndefined )</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">with 
                                  this block:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if ( SEVAR_GET_TYPE(rTmp)!=VObject  &&  SEVAR_GET_TYPE(&(call->default_return))==VObject )</font></pre>
                              </blockquote>
                              <p></p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="pvc"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>operator 
                                  overloading crashes with some operators</b><br>
                                  (for ISDK/C 4.40d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: se440 operator overloading crashes when 
                                  using some of the operators.<font face="Courier New, Courier, mono"></font></font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srccore/secode.c, function secodeInterpret(), 
                                  locate the case block beginning with this code 
                                  at line 2336:</font></p>
                                <pre>   <font face="Courier New, Courier, mono" size="2">case seMultiply: case seDivide:
   case seModulo: case seShiftLeft: case seSignedShiftRight:
   case seUnsignedShiftRight: case seBitOr: case seBitXor: case seBitAnd:</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">a 
                                  few lines below that (line 2347) replace &quot;<font face="Courier New, Courier, mono">r_rhs</font>&quot; 
                                  with &quot;<font face="Courier New, Courier, mono">w_rhs</font>&quot; 
                                  so the line changes from</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   IF_OPERATOR_NOT_OVERLOADED(call,w_lhs,r_rhs,t)</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">to</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   IF_OPERATOR_NOT_OVERLOADED(call,w_lhs,w_rhs,t)</font></pre>
                              </blockquote>
                              <p></p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="cfrtnl"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>jseCallFunction 
                                  return variable may be NULL with JSE_FUNC_TRAP_ERRORS</b><br>
                                  (for ISDK/C 4.40d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: In jseCallFunction() and jseCallFunctionEx(), 
                                  if the JSE_FUNC_TRAP_ERROS flag is used and 
                                  <font face="Courier New, Courier, mono">returnVar</font> 
                                  is not NULL then <font face="Courier New, Courier, mono">*returnVar</font> 
                                  is supposed to be assign to some non-NULL value. 
                                  But in some cases (usually if a parameter is 
                                  not a valid function) this will return with 
                                  a non-NULL <font face="Courier New, Courier, mono">*returnVar</font></font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srccore/jselib.c, function jseCallFunctionEx(), 
                                  at about line 2821 replace this block:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   # if ( 0 &lt; JSE_API_ASSERTLEVEL )
   if ( NULL == func )
   {
      # if JSE_NAMED_PARAMS==1
      STACK_POPX((uint)(2+((flags&amp;JSE_FUNC_NAMED_PARAMS)?1:0)));
      # else
      STACK_POPX(2);
      # endif
      
      SetLastApiError( UNISTR(&quot;%s: parameter 2 not a function&quot;),ThisFuncName );
      END_TIMING(call);
      return False;
   }</font>
   # endif</pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">with 
                                  this block:</font></p>
                                <pre>   <font face="Courier New, Courier, mono" size="2">if ( NULL == func )
   {
      # if JSE_NAMED_PARAMS==1
         STACK_POPX((uint)(2+((flags&amp;JSE_FUNC_NAMED_PARAMS)?1:0)));
      # else
         STACK_POPX(2);
      # endif
      # if ( 0 &lt; JSE_API_ASSERTLEVEL )
         SetLastApiError( UNISTR(&quot;%s: parameter 2 not a function&quot;),ThisFuncName );
      # endif
      END_TIMING(call);
      goto illegal_params;
   }</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">then 
                                  at about line 2781 replace this block:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   # if JSE_NAMED_PARAMS==1
      /* To keep it from being collected */
      if( (flags &amp; JSE_FUNC_NAMED_PARAMS)!=0 )
      {
         args = STACK_PUSH;
         SEVAR_INIT_BLANK_OBJECT(call,args);
         args_obj = SEVAR_GET_OBJECT(args);
      }</font>
   #endif</pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">with 
                                  this:</font></p>
                                <pre>   <font face="Courier New, Courier, mono" size="2">if( SEVAR_GET_TYPE(rvar)!=VObject )
   {
      # if ( 0 &lt; JSE_API_ASSERTLEVEL )
         SetLastApiError( UNISTR(&quot;%s: parameter 2 not a function&quot;),ThisFuncName );
      # endif
      END_TIMING(call);
      goto illegal_params;
   }</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Next, 
                                  replace the remaining three instances of &quot;return&nbsp;False&quot; 
                                  to instead be &quot;goto&nbsp;illegal_params&quot;. 
                                  </font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Finally, 
                                  at this block of code at the end of the function, 
                                  after &quot;<font face="Courier New, Courier, mono">return&nbsp;retbool</font>&quot;;</font></p>
                                <pre> <font face="Courier New, Courier, mono" size="2">illegal_params:
   </font><font face="Courier New, Courier, mono" size="2">*retvar = NULL;
   </font><font face="Courier New, Courier, mono" size="2">{
      jseVariable func = jseGetMember(jsecontext,NULL,UNISTR(&quot;Error&quot;));
      </font><font face="Courier New, Courier, mono" size="2">if( func )
      {
         jseStack stack;
         jseVariable param;
   
         </font><font face="Courier New, Courier, mono" size="2">stack = jseCreateStack(jsecontext);
         param = jseCreateVariable(jsecontext,jseTypeString);
         jsePutString(jsecontext,param,UNISTR(&quot;API parameters are invalid&quot;));
         jsePush(jsecontext,stack,param,TRUE);
   
         </font><font face="Courier New, Courier, mono" size="2">if( !jseCallFunction(jsecontext,func,stack,retvar,NULL) )
         {
            if( *retvar!=NULL )
            {
               jseDestroyVariable(jsecontext,*retvar);
               *retvar = NULL;
            }
         </font><font face="Courier New, Courier, mono" size="2">}
         </font><font face="Courier New, Courier, mono" size="2">jseDestroyStack(jsecontext,stack);
      }
   }
   
   </font><font face="Courier New, Courier, mono" size="2">if( *retvar==NULL )
   {
      *retvar = jseCreateVariable(jsecontext,jseTypeString);
      jsePutString(jsecontext,*retvar,UNISTR(&quot;API parameters are invalid&quot;));
   }
   
   </font><font face="Courier New, Courier, mono" size="2">return FALSE;</font></pre>
                              </blockquote>
                              <p></p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="crshnc"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>crash 
                                  when reporting invalid #include syntax</b><br>
                                  (for ISDK/C 4.40d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: If JSE_INCLUDE option is enabled, and there 
                                  is a parsing error in an &quot;#include&quot; 
                                  source line, such as this:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   #include &lt;blah'</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">an 
                                  invalid pointer during error reporting will 
                                  lead to a crash.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srcore/source.c, function sourceInclude(), 
                                  the two calls to callError() which each receive 
                                  &quot;textcoreIncludeDirective&quot; as the 
                                  final parameter should instead receive &quot;textcoreGetStatic(call,textcoreIncludeDirective)&quot; 
                                  as the final parameter. In other words, lines 
                                  758 and 769 should both change from</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   textcoreIncludeDirective);</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">to</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   textcoreGetStatic(call,textcoreIncludeDirective));</font></pre>
                              </blockquote>
                              <p></p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="bddt"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>insufficient 
                                  checks on bad dates</b><br>
                                  (for ISDK/C 4.40d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: Some of the functions in the Date object 
                                  are not testing against invalid dates. The results 
                                  may be incorrrect, assertioins may be triggered, 
                                  or floating-point exceptions may be triggered.</font><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
                                  </font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srclib/ecma/sedate.c, a few locations need 
                                  jseIsFinite() tests against the internal date 
                                  representation. In function SetYearMonDay(), 
                                  add a test after the call to jseGetNumber() 
                                  at about line 1974 so it reads:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   t = jseGetNumber(jsecontext,
                    jseMember(jsecontext,thisvar,JseStr(jsecontext,_date_value_),jseTypeNumber));
   if ( !jseIsFinite(t) )
      return;</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and 
                                  in SetHourMinSecMilli() add a test after jseGetNumber() 
                                  at about line 1829 so it reads:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   t = jseGetNumber(jsecontext,
                    jseMember(jsecontext,thisvar,JseStr(jsecontext,_date_value_),jseTypeNumber));
   if ( !jseIsFinite(t) )
      return;</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and 
                                  in Ecma_Date_toSystem() add a test after jseGetNumberDatum() 
                                  at about line 1258 so it reads </font></p>
                              </blockquote>
                              <p></p>
                              <blockquote> 
                                <pre><font face="Courier New, Courier, mono" size="2">   units = jseGetNumberDatum(jsecontext,thisvar,JseStr(jsecontext,_date_value_));
   if ( !jseIsFinite(units) )
      return NULL;</font></pre>
                              </blockquote>
                              <p></p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="cmpnwth"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>compound 
                                  assignment (/=, *=, %=, +=, -=, &lt;&lt;=, &amp;=, 
                                  ^=, |=) ignoring with() blocks</b><br>
                                  (for ISDK/C 4.40d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: The object for a with(object) block is 
                                  ignored when evaluating the initial variable 
                                  while evaluating a compound assignment.</font><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
                                  </font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srccore/expressn.c, function secompileGetValueKeep(), 
                                  at about line 2791, this statement</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( this->with_depth )</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">should 
                                  instead be this:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( !this->with_depth )</font></pre>
                              </blockquote>
                              <p></p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="cstrcat"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>error 
                                  concatenating C-style string constants</b><br>
                                  (for ISDK/C 4.40d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: When concatenating source strings without 
                                  the '+' operator, as in this code:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   var foo = &quot;dog&quot; &quot;house&quot;</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">which 
                                  should behave the same as this code:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   var foo = &quot;dog&quot; + &quot;house&quot;</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">it 
                                  is possible for other string constants to get 
                                  overwritten. </font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srccore/expressn.c, function secompilePrimaryExpression(), 
                                  at about line 2224, remove these two lines following 
                                  the comment &quot;/* Remove the last two string 
                                  constants...&quot;:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   /* SEOBJECT_PUT(this->call,this->constObj,used,
    *             SEOBJECT_GET(this->call,this->constObj,used)-2);
    */</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">or, 
                                  because this C-like string-concateation behavior 
                                  is not part of the ECMAScript standard, you 
                                  may choose to remove the entire for(;;) loop 
                                  containing this statement, from line 2184 to 
                                  2233.</font><font face="Courier New, Courier, mono" size="2"> 
                                  </font></p>
                              </blockquote>
                              <p></p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="wthprm"></a></font></p>
                              <ul>
                                <li><b><font size="2" face="Verdana, Arial, Helvetica, sans-serif">invalid 
                                  name accessing local parameters in a with() 
                                  block</font></b><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><br>
                                  (for ISDK/C 4.40d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: When accessing a variable in a with block, 
                                  the wrong variable name is used when testing 
                                  a variable against the with object if the variables 
                                  is an argument to the function (and not the 
                                  first argument). In some cases this will lead 
                                  to accessing the wrong name. If this with object 
                                  has a get or hasproperty callback this may cause 
                                  a program crash. The following example demonstrates 
                                  where this may fail:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   function foo(argument1,argument2,argument3)
   {
      var local1, local2, local3;
      with ( someObject )
      {
         local1 = local2;      // OK
         local1 = local3;      // OK
         local1 = argument1;   // OK
         local1 = argument2;   // FAIL
         local1 = argument3;   // FAIL
      }
   }</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srccore/secode.c, function callWithCatchEntry(), 
                                  at about line 405, change this line:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   [ (index&lt;=0) ? index : ((struct LocalFunction *)FUNCPTR)-&gt;localItems.InputParameterCount+</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">to 
                                  this</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   [ (index&lt;=0) ? -index : ((struct LocalFunction *)FUNCPTR)-&gt;localItems.InputParameterCount+</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Note 
                                  that just a single &quot;-&quot; was added.</font></p>
                              </blockquote>
                              <p></p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="msvc6bg"></a></font></p>
                              <ul>
                                <li><b><font face="Verdana, Arial, Helvetica, sans-serif" size="2">MSVC6 
                                  memory allocation bugs</font></b><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><br>
                                  (for ISDK/C 4.40d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: Problems with Microsoft's C++ in Microsoft 
                                  Visual C++ 6.0, can cause heap allocation errors 
                                  and memory overwrites that can cause crashes 
                                  that are extremely erratic and hard to reproduce.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  If you are using MSVC6, download and install 
                                  the Visual Studio 6.0 Service Pack 5 from <a href="http://msdn.microsoft.com/vstudio/sp/vs6sp5/">http://msdn.microsoft.com/vstudio/sp/vs6sp5/</a> 
                                  </font></p>
                              </blockquote>
                              <p></p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="frinh"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>for...in 
                                  fails to iterate through inherited properties</b><br>
                                  (for ISDK/C 4.40d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: In some cases, such as when an object inherits 
                                  from a script object via &quot;new Foo()&quot;, 
                                  for...in may not iterate through all inherited 
                                  properties.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  A replacement for the function seGotoForIn_Operator(), 
                                  in srccore/operator.c, may be downloaded from 
                                  <a href="ftp://ftp.nombas.com/pub/isdkeval/se440/segotoforin_operator.zip">ftp://ftp.nombas.com/pub/isdkeval/se440/segotoforin_operator.zip</a></font></p>
                              </blockquote>
                              <p></p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="boutopt"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>aboutopt.jse 
                                  doesn't work</b><br>
                                  (for ISDK/C 4.40d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: tools/aboutopt.jse isn't working with any 
                                  of the samples. When a finer grain was added 
                                  to what functions could be added/removed, we 
                                  did not update aboutopt. Also, it wasn't clear 
                                  how to execute the abotopt.jse scripts.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  Updated files for aboutopt.jse may be downloaded 
                                  from <a href="ftp://ftp.nombas.com/pub/isdkeval/se440/aboutopt.zip">ftp://ftp.nombas.com/pub/isdkeval/se440/aboutopt.zip</a>. 
                                  This aboutopt.jse can be execute frim the compiled 
                                  SIMPLE1 sample, with a statement such as:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   W32Simp1.exe tools\aboutopt.jse seisdk\samples\simple1\jseopt.h __JSE_WIN32__ _MSC_VER JSE_ASCII</font></pre>
                              </blockquote>
                              <p></p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="abtry"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>terminating 
                                  execution from within a &quot;try&quot; block 
                                  will cause memory leaks</b><br>
                                  (for ISDK/C 4.40d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: If execution is terminated while a script 
                                  is within a try block, such as if the jseMayIContinue 
                                  callback function returns False, then some allocated 
                                  memory will not be freed.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srccore/call.c, function callDelete(), add 
                                  this to the local variables at the beginning 
                                  of the function:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   struct TryBlock *loop;</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and 
                                  add this block to the end of the function, just 
                                  before the jseMustFree(call) statement at about 
                                  line 1543:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   for( loop = call-&gt;tries;loop!=NULL; )
   {
      struct TryBlock *prev = loop-&gt;prev;
   </font>
<font face="Courier New, Courier, mono" size="2">      jseMustFree(loop);
      loop = prev;
   }</font></pre>
                              </blockquote>
                              <p></p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="nthsfpo"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>seObjHasProperty 
                                  causing floating-point overflow if not handled 
                                  by callback</b><br>
                                  (for ISDK/C 4.40d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: On some systems, if an object has a hasProp 
                                  callback that does not return HP_HAS or HP_HASNOT, 
                                  or if the dynamic object does not have a hasProp, 
                                  then a floating-point overflow exception can 
                                  occur.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srccore/varutil.c, function seobjHasProperty(), 
                                  at line 3034 change this line:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   ret = (jsebool)JSE_FP_CAST_TO_SLONG(SEVAR_GET_NUMBER_VALUE(value));</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">to 
                                  this:</font></p>
                                <pre>   if ( handled )
      ret = (jsebool)JSE_FP_CAST_TO_SLONG(SEVAR_GET_NUMBER_VALUE(value));</pre>
                              </blockquote>
                              <p></p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="infnan"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>&quot;+Infinity 
                                  and &quot;-Infinity&quot; converted to NaN if 
                                  JSE_FLOATING_POINT==0</b><br>
                                  (for ISDK/C 4.40d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: If building in integer-only mode (i.e.&nbsp;#define&nbsp;JSE_FLOATING_POINT&nbsp;0), 
                                  &quot;+Infinity&quot; and &quot;-Infinity&quot; 
                                  will be read incorrectly and converted to NaN.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srccore/util.c, function convertStringToNumber(), 
                                  there are two places with this block of code 
                                  (line 2228 and 2235):</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   #           if (0!=JSE_FLOATING_POINT)
                  lenParsed++;
   #           endif</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">in 
                                  both cases the conditionals should be removed, 
                                  so the above blocks are replaced with the single 
                                  line:</font></p>
                                <pre>               lenParsed++;</pre>
                              </blockquote>
                              <p></p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="linkleak"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>memory 
                                  leak, and possible crash, using the #link statement</b><br>
                                  (for ISDK/C 4.40d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: Memory leaks and possible crashes using 
                                  the #link statement. The memory leak fix is 
                                  for Unix only, but the possible crash in running 
                                  out of memory applies to all systems.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srccore/extlib.c, function extensionFindLibPath(), 
                                  at about line 529, replace this line:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( !Success )</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">with 
                                  this</font></p>
                                <pre> <font face="Courier New, Courier, mono" size="2">if( !Success && FileName!=NULL )</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and 
                                  extensionLibraryStartup(), at about line 627 
                                  replace this block</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   #if defined(__JSE_UNIX__)
      {
         jsechar buffer[256];
         jse_sprintf(buffer,&quot;lib%s&quot;,LibraryName);
         FullLibraryPath = extensionFindLibPath(this,buffer,call);
      }
      if( FullLibraryPath==NULL || FullLibraryPath[0]=='\0' )
   #endif
         FullLibraryPath = extensionFindLibPath(this,LibraryName,call);</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">with 
                                  this block</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   #if defined(__JSE_UNIX__)
      {
         jsechar buffer[256];
         jse_sprintf(buffer,&quot;lib%s&quot;,LibraryName);
         FullLibraryPath = extensionFindLibPath(this,buffer,call);
      }
      if(FullLibraryPath == NULL || JSECHARPTR_GETC(FullLibraryPath)==UNICHR('\0'))
      {
         if( FullLibraryPath!=NULL ) jseMustFree(FullLibraryPath);
         FullLibraryPath = extensionFindLibPath(this,LibraryName,call);
      }
   #else
      FullLibraryPath = extensionFindLibPath(this,LibraryName,call);
   #endif</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and 
                                  then at about line 640, replace this block</font></p>
                                <pre>   <font face="Courier New, Courier, mono" size="2">callError(call,textcoreLINK_LIBRARY_NOT_EXISTS,LibraryName);
   jseMustFree(FullLibraryPath);
   return False;</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">with 
                                  this</font></p>
                                <pre><font face="Verdana, Arial, Helvetica, sans-serif" size="2">     <font face="Courier New, Courier, mono">callError(call,textcoreLINK_LIBRARY_NOT_EXISTS,LibraryName);
   if( FullLibraryPath ) jseMustFree(FullLibraryPath);
   return False;</font></font></pre>
                              </blockquote>
                              <hr width="90%">
                              <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>for 
                                4.40c --</b></font> (may apply to earlier versions)</p>
                              <p></p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="440calterarg"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>altering 
                                  &quot;arguments&quot; causes assertion failure</b><br>
                                  (for ISDK/C 4.40c) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: Using &quot;var&quot; or assigning 
                                  to the &quot;arguments&quot; variable will cause 
                                  an assertion failure in !NDEBUG versions.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srccore/call.c, function callCreateVariableObject(), 
                                  at about line 1230, replace this code:</font></p>
                                <blockquote> 
                                  <pre><font face="Courier New, Courier, mono" size="2">seobjCreateMemberCopy(call,tmpobj,STOCK_STRING(call,arguments),tmp,SE_DEFAULT);</font></pre>
                                </blockquote>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">with 
                                  this code:</font></p>
                                <blockquote> 
                                  <pre><font face="Courier New, Courier, mono" size="2">seobjNewMember(call,tmpobj,STOCK_STRING(call,arguments),
               tmp,jseDontDelete,SE_NM_CREATE);</font></pre>
                                </blockquote>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="gtmss"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>error 
                                  marking more than MARK_STACK_SIZE objects</b><br>
                                  (for ISDK/C 4.40c)</font> 
                                  <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
                                    Bug: If there are more than MARK_STACK_SIZE 
                                    tied to the call-&gt;Global object, then some 
                                    objects may never be marked and so may be 
                                    freed while still in use. This is could happen 
                                    in any configuration, but is most likely in 
                                    a JSE_MIN_MEMORY build working on a large 
                                    script with many global function variables.</font></p>
                                </li>
                              </ul>
                              <ul>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  The algorithm related to MARK_STACK_SIZE has 
                                  been fixed in garbage.c of the 4.40d release. 
                                  Get that release.</font></p>
                              </ul>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="numpm"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>ToNumber() 
                                  returns incorrect values for "+" and "-"</b><br>
                                  (for ISDK/C 4.40c)</font> 
                                  <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
                                    Bug: When ToNumber() is called with either 
                                    "+" or "-" as its argument, the return value 
                                    should be NaN. Instead, ToNumber() is returning 
                                    Infinity and -Infinity, respectively.</font></p>
                                </li>
                              </ul>
                              <ul>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In srccore/util.c, function convertStringToNumber(), 
                                  at about line 2260, change this code:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if ( lenParsed == lenStr )
   {
      val = neg ? jseNegInfinity : jseInfinity ;
   }</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">to 
                                  this</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if ( lenParsed == lenStr &amp;&amp; 2&lt;lenStr )
   {
      val = neg ? jseNegInfinity : jseInfinity ;
   }</font></pre>
                              </ul>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="cmprhnt"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Object 
                                  comparisons with wrong hint - Date comparisons 
                                  fail</b><br>
                                  (for ISDK/C 4.40c)</font> 
                                  <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
                                    Bug: Object comparison (&lt;, &lt;=, &gt;, 
                                    &gt;=) are not correctly following the hint 
                                    logic specified in section 11.8.5 (The Abstract 
                                    Relational Comparison Algorithm) of the ECMAScript 
                                    specification. When objects are converted 
                                    to a primitive value for comparison they should 
                                    be give &quot;hint Number&quot;. This would 
                                    only show up as a problem for any object that 
                                    does not have number as its default primitive; 
                                    the Date object is such an example, and so 
                                    the following test fails for the date object 
                                    because it is comparing as a string (the default 
                                    Date primitive type) instead of as a Nuimber 
                                    (the hint type for comparison).</font></p>
                                </li>
                                <pre><font face="Courier New, Courier, mono" size="2">   newer = new Date(&quot;Thu Oct 4 15:54:25 2001&quot;);
   older = new Date(&quot;Tue Sep 25 15:54:25 2001&quot;);
   Test.assert( older &lt; newer ); // fails because comparing as string</font></pre>
                              </ul>
                              <ul>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In srccore/varutil.c, function sevarECMACompareLess(), 
                                  change the first two instances of this code 
                                  (at lines 782 and 791):</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   sevarConvert(call,tmp,jseToPrimitive);</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
                                  to this</font><font face="Courier New, Courier, mono" size="2"></font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   sevarConvertToPrimitive(call,tmp,VNumber);</font></pre>
                              </ul>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="objwrapnodel"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>SEObjectWrapper 
                                  not deleting createVariable() objects</b><br>
                                  (for ISDK/C 4.40c)</font> 
                                  <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
                                    Bug: the underlying variable reference created 
                                    by SEObjectWrapper::createVariable() is not 
                                    being destroyed when the SEObjectWrapper C++ 
                                    object is deleted.</font></p>
                                  <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                    In srcapp/jseobject.cpp, function SEObjectWrapper::deleteHook(), 
                                    at about line 179, the first line of the function 
                                    should be changed from:</font> </p>
                                </li>
                                <pre><font face="Courier New, Courier, mono" size="2">   if ( NULL == propName )</font></pre>
                                <pre><font face="Verdana, Arial, Helvetica, sans-serif" size="2">to</font></pre>
                                <pre><font face="Courier New, Courier, mono" size="2">   if ( NULL != propName )</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and 
                                  a few lines down this statement may be removed:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   const jsecharptr propString = jseGetInternalString(jsecontext,...);</font></pre>
                              </ul>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="rtvrcrsh"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>jseReturnVar 
                                  may crash with strings, buffers, and objects</b><br>
                                  (for ISDK/C 4.40c)</font> 
                                  <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
                                    Bug: It is possible, although very unlikely, 
                                    that variables of type jseTypeString, jseTypeBuffer, 
                                    or jseTypeObject may be freed by the garbage 
                                    collector before they are assigned to a script 
                                    variable.</font></p>
                                  <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                    In srccore/garbage.c, function mark(), at 
                                    about line 847, locate these lines:</font></p>
                                </li>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( CALL_ERROR(mstackinfo.call) )
</font><font face="Courier New, Courier, mono" size="2">      MARK_VARIABLE(&amp;(mstackinfo.call-&gt;return_var),&amp;mstackinfo);</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and 
                                  remove the &quot;if&quot; statement so that 
                                  MARK_VARIABLE() is always called on the return_var.</font></p>
                              </ul>
                              <p>&nbsp;</p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="cmmbxprot"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>jseMemberEx 
                                  and jseIndexMemberEx do not search prototypes</b><br>
                                  (for ISDK/C 4.40c)</font> 
                                  <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
                                    Warning: In moving from version 4.30 to 4.40, 
                                    and if you were using the jseMemberEx() or 
                                    jseIndexMemberEx() functions without the jseDontSearchPrototype 
                                    flag, then you will find that with version 
                                    4.40 members will not be located in the _prototype 
                                    chain. This is because jseDontSearchPrototype 
                                    is assumed for jseMemberEx and jseIndexMemberEx, 
                                    as they are used to force creation of a member.</font></p>
                                  <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                    If you are expecting to use an existing member, 
                                    then instead of any of the jseMember???() 
                                    or jseIndexMember???() functions you should 
                                    be using the jseGetMember???() or jseGetIndexMember???() 
                                    functions.</font></p>
                                </li>
                              </ul>
                              <p>&nbsp;</p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="cfncstrcat"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>toString 
                                  on functions concatenates some identifiers</b><br>
                                  (for ISDK/C 4.40c)</font> 
                                  <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
                                    Bug: When a function is being converted to 
                                    a string, a required space may not be displayed 
                                    after some variables. For example, this code:</font></p>
                                </li>
                                <blockquote> 
                                  <pre><font face="Verdana, Arial, Helvetica, sans-serif" size="2">function blah()
{
   for (var prop in obj);
}
display(&quot;&quot; + blah);</font></pre>
                                </blockquote>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">may 
                                  produce this output (note that &quot;prop&quot; 
                                  and &quot;in&quot; have become concatenated):</font></p>
                                <blockquote> 
                                  <pre><font face="Verdana, Arial, Helvetica, sans-serif" size="2">function blah()
{
   for (var propin obj);
}
</font></pre>
                                </blockquote>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In srccore/function.c, function functionTextAsVariable(), 
                                  at about line 249, change the seTokIdentifier 
                                  to add a space after each identifier, as in:</font></p>
                                <blockquote> 
                                  <pre><font face="Verdana, Arial, Helvetica, sans-serif" size="2">else if( type==seTokIdentifier )
{
   growingAddTo(&amp;buff,GetStringTableEntry(call,tokGetName(c),NULL));
   growingAddTo(&amp;buff,UNISTR(&quot; &quot;));
}</font></pre>
                                </blockquote>
                              </blockquote>
                              <p>&nbsp; </p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="cnamparmgc"></a></font></p>
                              <ul>
                                <li> 
                                  <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>named-parameter 
                                    object for wrapper functions trashed by GC</b><br>
                                    (for ISDK/C 4.40c)</font> </p>
                                </li>
                                <li> 
                                  <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
                                    Problem: If garbage collection occurs while 
                                    a named-parameter object is available to a 
                                    wrapper function, that named-parameter object 
                                    will be freed and its use may crash the system.</font></p>
                                  <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                    In srccore/util.c, function mark(), near line 
                                    844, locate these lines:</font></p>
                                  <blockquote> 
                                    <pre><font face="Verdana, Arial, Helvetica, sans-serif" size="2">if( mstackinfo.call-&gt;hVariableObject!=hSEObjectNull )
   MARK_OBJECT(mstackinfo.call-&gt;hVariableObject,&amp;mstackinfo);</font></pre>
                                  </blockquote>
                                  <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and 
                                    after those lines add this code:</font></p>
                                  <blockquote> 
                                    <pre><font face="Verdana, Arial, Helvetica, sans-serif" size="2">if( mstackinfo.call-&gt;wrapper_named!=hSEObjectNull )
   MARK_OBJECT(mstackinfo.call-&gt;wrapper_named,&amp;mstackinfo);            </font></pre>
                                  </blockquote>
                                </li>
                              </ul>
                              <p>&nbsp;</p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="cstkxhst"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>&quot;internal 
                                  stack exhausted&quot; error with multiple calls 
                                  to jseCallFunction()</b><br>
                                  (for ISDK/C 4.40c)</font> 
                                  <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
                                    Bug: jseCallFunction() leaks ScriptEase stack 
                                    space, leading to an overflow and the 'internal 
                                    stack exhausted' error.</font></p>
                                  <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                    In srccore/jselib.c, function jseCallFunctionEx(), 
                                    at about line 2937 is a call to callFunctionFully(). 
                                    Immediately after callFunctionFull() add a 
                                    STACK_POP statement, so those lines become:</font></p>
                                  <blockquote> 
                                    <pre><font face="Verdana, Arial, Helvetica, sans-serif" size="2">callFunctionFully(...);
STACK_POP;
call-&gt;Global-&gt;call_func_mark = call_func_mark_save;
</font></pre>
                                  </blockquote>
                                </li>
                              </ul>
                              <p>&nbsp; </p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="cgetinhas"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>get 
                                  callback may crash during seobjHasProperty()</b><br>
                                  (for ISDK/C 4.40c)</font> </li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug: 
                                  dynamic get callback crash when called during 
                                  seobjHasProperty() to determine if the propery 
                                  exists.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In srccore/varutil.c, function seobjHasProperty(), 
                                  at about line 3002 change this line:</font></p>
                              </blockquote>
                              <ul>
                                <blockquote> 
                                  <pre><font face="Verdana, Arial, Helvetica, sans-serif" size="2">if( dest ) assert( sevarIsValid(call,dest) );</font></pre>
                                </blockquote>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">to 
                                  this:</font></p>
                              </blockquote>
                              <ul>
                                <blockquote> 
                                  <pre><font face="Verdana, Arial, Helvetica, sans-serif" size="2">assert( dest==NULL  ||  sevarIsValid(call,dest) );</font></pre>
                                </blockquote>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and 
                                  at about line 3058 move the STACK_POP after 
                                  the if block, instead of before the if block, 
                                  and insert a statement before the following 
                                  STACK_POP, so the code is:</font></p>
                              </blockquote>
                              <ul>
                                <blockquote> 
                                  <pre><font face="Verdana, Arial, Helvetica, sans-serif" size="2">   jsebool ret = (SEVAR_GET_TYPE(dest)!=VUndefined) || handled;
   if( ret &amp;&amp; (flags&amp;HP_REFERENCE)!=0 )
   {
      SEVAR_INIT_REFERENCE(dest,hobj,propname);
   }
   STACK_POP;
   return ret;
}
if ( dest==rhs ) dest = NULL;
STACK_POP;</font></pre>
                                </blockquote>
                              </ul>
                              <p>&nbsp;</p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"></font></p>
                              <!-- #EndEditable --></td>
                    </tr>
                    <tr> 
                      <td width="1">&nbsp;</td>
                      <td width="460">&nbsp;</td>
                    </tr>
                  </table>
                  </TD>
              </TR>
            </TABLE>
          </TD>
        </TR>
      </TABLE>
    </TD>
  </TR>
  <TR VALIGN=TOP ALIGN=LEFT> 
    <TD HEIGHT=2 width="5"></TD>
    <TD COLSPAN=2 height="2"> 
            <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH=100% HEIGHT=20 bgcolor="#FFFFFF">
              <TR ALIGN=LEFT VALIGN=TOP> 
          <TD> 
                  <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH=100%>
                    <TR VALIGN=TOP ALIGN=LEFT> 
                <TD WIDTH=20 HEIGHT=2 ALIGN=LEFT VALIGN=TOP><IMG ID="Picture13" HEIGHT=20 WIDTH=20 SRC="../../../curve_botleft.gif" BORDER=0></TD>
                      <TD height="2"><IMG SRC="../../../clearpixel.gif" WIDTH=592 HEIGHT=1 BORDER=0></TD>
                <TD WIDTH=20 ALIGN=LEFT VALIGN=TOP height="2"><IMG ID="Picture11" HEIGHT=20 WIDTH=20 SRC="../../../curve_bot.gif" BORDER=0></TD>
              </TR>
            </TABLE>
          </TD>
        </TR>
      </TABLE>
    </TD>
  </TR>
  <TR VALIGN=TOP ALIGN=LEFT> 
    <TD WIDTH=5 HEIGHT=6><IMG SRC="../../../clearpixel.gif" WIDTH=5 HEIGHT=1 BORDER=0></TD>
    <TD WIDTH=613><IMG SRC="../../../clearpixel.gif" WIDTH=613 HEIGHT=1 BORDER=0></TD>
    <TD WIDTH=22><IMG SRC="../../../clearpixel.gif" WIDTH=19 HEIGHT=1 BORDER=0></TD>
  </TR>
  <TR VALIGN=TOP ALIGN=LEFT> 
    <TD COLSPAN=2> 
            <P ALIGN=RIGHT><A HREF="../../../index.htm"><FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica">Home</FONT></A><FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica"> 
              | </FONT><A
                 HREF="../../../scripting/scripting.htm"><FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica">Scripting</FONT></A><FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica"> 
              | </FONT><A
                 HREF="../../../products/products.htm"><FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica">Products</FONT></A><FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica"> 
              | </FONT><A
                 HREF="../../../purchase/purchase.htm"><FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica">Purchase</FONT></A><FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica"> 
              | </FONT><A
                 HREF="../../../download/ndownload.htm"><FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica">Download</FONT></A><FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica"> 
              | </FONT><A
                 target="support" HREF="http://support.nombas.com/"><FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica">Support</FONT></A><FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica"> 
              | </FONT><A HREF="../../../company/company.htm"> <FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica">Company</FONT></A><FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica"><BR>
        <BR>
        Copyright &#169;2001, Nombas, Inc. All Rights Reserved.<BR>
        Questions? Visit </FONT><A HREF="http://support.nombas.com/"><FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica">http://support.nombas.com/</FONT></A> 
    </TD>
    <TD width="22"></TD>
  </TR>
</TABLE>
</td>
  </tr>
</table>
<SCRIPT language=JavaScript1.2>
  display_nombas_legacy_message();
</SCRIPT>
</BODY>
<!-- #EndTemplate --></HTML>
