
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 FINAL//EN">
<HTML><!-- #BeginTemplate "/us/Templates/erratapage.dwt" -->
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<!-- #BeginEditable "doctitle" -->
<TITLE>ScriptEase ISDK/C 5.00x Errata</TITLE>
<!-- #EndEditable --> <!-- begin metaTags -->
<META NAME="keywords" CONTENT="javascript,ecmascript,ecma,scriptease,jscript,scripting,nombas,isdk,sedesk,web application development,embedded devices,distributed computing,peer-to-peer,p2p,peer,data mining,javascript.com,cycletraders,integrated sdk,script ease,java,c++,c,simplicity,power,palm,windows ce,integration: sdk,integration:sdk,scriptease:desktop,scriptease: desktop,se:desktop,se:desk,se:isdk, se: isdk,development tools,devtools">
<META HTTP-EQUIV="DESCRIPTION" CONTENT="Nombas delivers simplicity and power through scripting by providing market-leading development tools and software for JavaScript and ECMAScript.">
<!-- end metaTags -->
<!-- begin navbar includes -->
<SCRIPT language=JavaScript1.2>
  navbarPath = '../../../';
</SCRIPT>
<SCRIPT language=JavaScript1.2 SRC="../../../navbarData.js"></SCRIPT>
<SCRIPT language=JavaScript1.2 SRC="../../../navbarMenu.js"></SCRIPT>
<SCRIPT language=JavaScript SRC="../../../imgRollover.js"></SCRIPT>
<!-- end navbar includes -->
<!-- begin style and icon definition -->
<LINK REL="SHORTCUT ICON" HREF="../../../nombas.ico">
<STYLE>
A:hover { color:#941810;}
</STYLE>
<!-- end style and icon definition -->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-1754630-10']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
</HEAD>
<BODY BGCOLOR="#06086F" LINK="#0000FF" VLINK="#800080" TEXT="#000000" TOPMARGIN=0 LEFTMARGIN=0 MARGINWIDTH=0 MARGINHEIGHT=0>
<table width="632" border="0" cellspacing="0" cellpadding="0">
  <tr>
    <td>
<TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH=213>
  <TR VALIGN=TOP ALIGN=LEFT>
    <TD WIDTH=28 HEIGHT=4><IMG SRC="../../../clearpixel.gif" WIDTH=28 HEIGHT=1 BORDER=0></TD>
    <TD></TD>
  </TR>
  <TR VALIGN=TOP ALIGN=LEFT>
    <TD HEIGHT=60></TD>
          <TD WIDTH=185 ALIGN=LEFT VALIGN=TOP><A HREF="../../../index.htm"><IMG ID="Picture1" HEIGHT=60 WIDTH=185 SRC="../../../logo.gif" BORDER=0 alt="Nombas Homepage"></A></TD>
  </TR>
</TABLE>
    <div id="nombas-legacy"></div>
<TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0>
  <TR VALIGN=TOP ALIGN=LEFT>
    <TD WIDTH=30 HEIGHT=10><IMG SRC="../../../clearpixel.gif" WIDTH=30 HEIGHT=1 BORDER=0></TD>
    <TD></TD>
  </TR>
  <TR VALIGN=TOP ALIGN=LEFT>
    <TD></TD>
    <TD WIDTH=582>
      <TABLE ID="Table1" BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH=582>
        <TR>
          <TD WIDTH=97>
                  <P><A HREF="../../../scripting/scripting.htm"
                            onmouseover="changeImages('scripting', '../../../htab_scripting.gif'); popUp('elMenu1',event); return true;"
onmouseout="changeImages('scripting', '../../../tab_scripting.gif'); popDown('elMenu1'); return true;"
><IMG
                             ID="scripting" HEIGHT=21 WIDTH=97 SRC="../../../tab_scripting.gif" VSPACE=0 HSPACE=0 ALIGN="TOP" BORDER=0 name="scripting" alt="Scripting"></A>
                </TD>
          <TD WIDTH=97>
                  <P><A HREF="../../../products/products.htm"
                            onmouseover="changeImages('products', '../../../htab_products.gif'); popUp('elMenu2',event); return true;"
onmouseout="changeImages('products', '../../../tab_products.gif'); popDown('elMenu2'); return true;"><IMG ID="products"
                             HEIGHT=21 WIDTH=97 SRC="../../../tab_products.gif" VSPACE=0 HSPACE=0 ALIGN="TOP" BORDER=0 name=products alt="Products"></A>
                </TD>
          <TD WIDTH=97>
                  <P><A HREF="../../../purchase/purchase.htm" onmouseover="changeImages('purchase', '../../../htab_purchase.gif');return true;"
onmouseout="changeImages('purchase', '../../../tab_purchase.gif');return true;"><IMG ID="purchase"
                             HEIGHT=21 WIDTH=97 SRC="../../../tab_purchase.gif" VSPACE=0 HSPACE=0 ALIGN="TOP" BORDER=0 name=purchase alt="Purchase"></A>
                </TD>
          <TD WIDTH=97>
                  <P><A HREF="../../../download/ndownload.htm" onmouseover="changeImages('download', '../../../htab_download.gif');return true;"
onmouseout="changeImages('download', '../../../tab_download.gif');return true;"><IMG ID="download"
                             HEIGHT=21 WIDTH=97 SRC="../../../tab_download.gif" VSPACE=0 HSPACE=0 ALIGN="TOP" BORDER=0 name=download alt="Download"></A>
                </TD>
          <TD WIDTH=97>
                  <P><A target="support" HREF="http://support.nombas.com/" onmouseover="changeImages('support', '../../../htab_support.gif'); return true;"
onmouseout="changeImages('support', '../../../tab_support.gif'); return true;"><IMG ID="support"
                             HEIGHT=21 WIDTH=97 SRC="../../../tab_support.gif" VSPACE=0 HSPACE=0 ALIGN="TOP" BORDER=0 name=support alt="Support"></A>
                </TD>
          <TD WIDTH=97>
                  <P><A HREF="../../../company/company.htm"
                            onmouseover="changeImages('company', '../../../htab_company.gif'); popUp('elMenu6',event); return true;"
onmouseout="changeImages('company', '../../../tab_company.gif'); popDown('elMenu6'); return true;"><IMG ID="company"
                             HEIGHT=21 WIDTH=97 SRC="../../../tab_company.gif" VSPACE=0 HSPACE=0 ALIGN="TOP" BORDER=0 name=company alt="Company"></A>
                </TD>
        </TR>
      </TABLE>
    </TD>
  </TR>
</TABLE>
      <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH=100%>
        <TR VALIGN=TOP ALIGN=LEFT>
    <TD WIDTH=5 HEIGHT=20><IMG SRC="../../../clearpixel.gif" WIDTH=5 HEIGHT=1 BORDER=0></TD>
          <TD>
            <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH=100% HEIGHT=20 bgcolor="#FFFFFF">
              <TR ALIGN=LEFT VALIGN=TOP>
          <TD>
                  <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH=100%>
                    <TR VALIGN=TOP ALIGN=LEFT>
                <TD WIDTH=20 HEIGHT=20 ALIGN=LEFT VALIGN=TOP><IMG ID="Picture12" HEIGHT=20 WIDTH=20 SRC="../../../curve_topleft.gif" BORDER=0></TD>
                      <TD><IMG SRC="../../../clearpixel.gif" WIDTH=592 HEIGHT=1 BORDER=0></TD>
                <TD WIDTH=20 ALIGN=LEFT VALIGN=TOP><IMG ID="Picture10" HEIGHT=20 WIDTH=20 SRC="../../../curve_top.gif" BORDER=0></TD>
              </TR>
            </TABLE>
          </TD>
        </TR>
      </TABLE>
    </TD>
  </TR>
</TABLE>
<TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH=637>
  <TR VALIGN=TOP ALIGN=LEFT>
    <TD HEIGHT=471 width="5"></TD>
    <TD COLSPAN=2 height="471">
      <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH=632 HEIGHT=200 bgcolor="#FFFFFF">
        <TR ALIGN=LEFT VALIGN=TOP>
          <TD height="471">
            <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH=516>
              <TR VALIGN=TOP ALIGN=LEFT>
                <TD WIDTH=14 HEIGHT=1><IMG SRC="../../../clearpixel.gif" WIDTH=13 HEIGHT=1 BORDER=0></TD>
                <TD WIDTH=502><IMG SRC="../../../clearpixel.gif" WIDTH=316 HEIGHT=1 BORDER=0></TD>
              </TR>
              <TR VALIGN=TOP ALIGN=LEFT>
                <TD width="14"></TD>
                <TD WIDTH=502><!-- #BeginEditable "hier" -->
                        <P ALIGN=LEFT><A HREF="../../../index.htm"><FONT SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica">Nombas</FONT></A><FONT SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica"> 
                          &gt; <a HREF="../../index.htm">SE:ISDK DevSpace</a> 
                          &gt; <a href="../index.htm">Errata</a> &gt; Integration 
                          SDK 5.00x Errata</FONT> 
                        <!-- #EndEditable --></TD>
              </TR>
            </TABLE>
            <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH=300>
              <TR VALIGN=TOP ALIGN=LEFT>
                <TD WIDTH=15 HEIGHT=5><IMG SRC="../../../clearpixel.gif" WIDTH=15 HEIGHT=1 BORDER=0></TD>
                <TD></TD>
              </TR>
              <TR VALIGN=TOP ALIGN=LEFT>
                <TD HEIGHT=80></TD>
                <TD WIDTH=600 ALIGN=LEFT VALIGN=TOP><IMG ID="Picture14" HEIGHT=80 WIDTH=600 SRC="../../bnr_devspace.gif" BORDER=0></TD>
              </TR>
              <TR VALIGN=TOP ALIGN=LEFT>
                <TD HEIGHT=368></TD>
                <TD WIDTH=600 ALIGN=LEFT VALIGN=TOP height="368">
                  <table width="100%" border="0">
                    <tr>
                      <td colspan="4" height="9"><img SRC="../../../clearpixel.gif" width="1" height="1"></td>
                    </tr>
                    <tr>
                      <td width="1" height="326">&nbsp;</td>
                            <td valign="top" height="326"><!-- #BeginEditable "main" --> 
                              <p><font size="4" face="Verdana, Arial, Helvetica, sans-serif"><b>Integration 
                                SDK 5.00x Errata</b></font><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><br>
                                <i><b>Fixes Affecting Users of the ScriptEase 
                                ISDKs</b></i></font></p>
                              <p><b><font color="#FF3333" face="Verdana, Arial, Helvetica, sans-serif" size="3">5.00x 
                                errate are no longer being actively released. 
                                5.00x users should upgrade to 5.01 and view errata 
                                at the page: <a href="index501.htm">Integration 
                                SDK 5.01x Errata</a></font></b></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a href="#v500f">5.00f 
                                  API</a> - latest update : </font><font face="Arial, Helvetica, sans-serif"><font face="Arial, Helvetica, sans-serif"><font face="Arial, Helvetica, sans-serif"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">September 
                                  17</font></font></font></font><font face="Verdana, Arial, Helvetica, sans-serif" size="2">, 
                                  2003</font></li>
                              </ul>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a href="#v500e">5.00e 
                                  API</a> - latest update: February 14, 2003</font></li>
                              </ul>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a href="#v500d">5.00d 
                                  API</a> - latest update: November 13, 2002</font></li>
                              </ul>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a href="#v500c">5.00c 
                                  API</a> - latest update: August 13, 2002</font></li>
                              </ul>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a href="#v500b">5.00b 
                                  API</a> - latest update: April 17, 2002</font></li>
                              </ul>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a href="#v500a">5.00a 
                                  API</a> - latest update: March 7, 2002</font></li>
                              </ul>
                              <hr width="90%">
                              <p><a name="v500f"></a> <font face="Verdana, Arial, Helvetica, sans-serif" size="2">API 
                                Errata, version <b>5.00f</b><br>
                                &nbsp;&nbsp;<b>New,</b> </font><font face="Arial, Helvetica, sans-serif"><font face="Arial, Helvetica, sans-serif"><font face="Arial, Helvetica, sans-serif"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">September 
                                17</font></font></font></font><font face="Verdana, Arial, Helvetica, sans-serif" size="2">, 
                                2003</font><br>
                              </p>
                              <p> 
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#hugu">hang 
                                  on assigning to undefined variable if global 
                                  object is SE_DYNA_UNDEF</a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#cafp">Alignment 
                                  errors with Clib *printf and *scanf floating-point 
                                  on HP-UX</a></font> 
                                <li><a href="#sscmss"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">system 
                                  can become corrupted if number of objects in 
                                  use is greater than MARK_STACK_SIZE</font></a> 
                                <li><a href="#slnr"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">when 
                                  converting numbers to strings, rounding will 
                                  not occur in some locales</font></a> 
                                <li><a href="#srfl"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">semicolon 
                                  required after assignment of function literals</font></a> 
                                <li><a href="#psndp"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Invalid 
                                  conversion of strings to number on PalmOS when 
                                  strings ends in decimal point</font></a> 
                                <li><a href="#s2nn"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">conversion 
                                  of strings to numeric sestrings may make non-unique 
                                  identifiers</font></a> 
                                <li><a href="#gvnana"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">global 
                                  VariableObject (activation) is not adjusted 
                                  if global object changes</font></a> 
                                <li><a href="#fcfgoo"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Function 
                                  constructor may fail if dynamic global object 
                                  overrides getters and putters</font></a> 
                                <li><a href="#bcue"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">seBrowserCreateEvent, 
                                  in browser framework, always makes an undefined 
                                  event</font></a> 
                                <li><a href="#ow2c"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">SEObjectWrapper 
                                  has too many contexts; may be NULL</font></a> 
                                <li><a href="#scknl"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Socket() 
                                  should return null on error</font></a> 
                                <li><a href="#mcpsem"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Memory 
                                  corruption on %s error messages</font></a> 
                                <li><a href="#pptykk"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Clib.strtok() 
                                  fails with seShareReadObject()</font></a> 
                                <li><a href="#anapgc"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">JSE_ALWAYS_IMPLICIT_* 
                                  flags are not applied to global code</font></a> 
                                <li><a href="#exrtu"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">eval(&quot;var 
                                  x = 100&quot;) returns undefined</font></a> 
                                <li><a href="#ioerg"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">seContinueFunc 
                                  callback does not remove temporaries</font></a> 
                                <li><a href="#sdlconl"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">SElib.dynamicLink() 
                                  expects string lengths to remain constant</font></a> 
                                <li><a href="#gndlbl"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">bad 
                                  error message, or crash, when &quot;goto&quot; 
                                  statement is not followed by a label</font></a> 
                                <li><a href="#nogo"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">&quot;goto&quot; 
                                  is not standard EcmaScript</font></a> 
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a href="#cpmpi">cached 
                                  prototypes (Array, Function, Object, String) 
                                  miss __parent__ inheritance</a></font> 
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a href="#tcgis">try/catch 
                                  grows internal stack</a></font></li>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a href="#cfml">seCreateFiber() 
                                  with JSE_SECURE uses unreleased memory</a></font></li>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a href="#comole">COMOBJ 
                                  leaks resources</a></font></li>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a href="#dprdbi">#define 
                                  prevents rest of script from being interpreted</a></font></li>
                                <li><a href="#edccee"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Empty 
                                  #defines can cause errors on expansion</font></a></li>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a href="#iaipdbi">The 
                                  #ifdef and #ifndef preprocessor directives behave 
                                  incorrectly</a></font></li>
                              </ul>
                              <p></p>
                              <hr width="90%">
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="v500e"></a> 
                                API Errata, version <b>5.00e</b><br>
                                &nbsp;&nbsp;<b>New</b>, February 14, 2003</font> 
                              </p>
                              <ul>
                                <li><a href="#spvng"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">seParseVar() 
                                  result may become invalid if SE_GLOBAL changes</font></a> 
                                <li><a href="#spvnc"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">seParseVar(...SE_VP_CREATE) 
                                  is not making sub-properties of objects</font></a> 
                                <li><a href="#scff"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">stack 
                                  corruption with long mode parameter to Clib.fopen() 
                                  and Clib.freopen()</font></a> 
                                <li><a href="#pdb"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">PalmOS 
                                  samples treat seInitialize() as a boolean</font></a> 
                                <li><a href="#ndfs"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">seEnd() 
                                  terminating an seEval(...SE_FUNC|SE_START...) 
                                  asserts</font></a> 
                                <li><a href="#daop"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">SEDBC 
                                  Database methods assume an open database</font></a> 
                                <li><a href="#ifoum"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug 
                                  in seIsFunc() or seFunctionAsText() if out-of-memory</font></a> 
                                <li><a href="#sesscetypo"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Typo 
                                  in seEval() errata</font></a> 
                                <li><a href="#reun"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">RegExp.$x 
                                  and RegExp.lastParen not overwriting previous 
                                  results with &quot;undefined&quot;</font></a> 
                                <li><a href="#asrt1"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">array 
                                  sort return invalid when array.length==1</font></a> 
                                <li><a href="#adcsi"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Allocation 
                                  error during compilation may leave some identifiers 
                                  locked</font></a> 
                                <li><a href="#ubbw"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">In 
                                  Unicode builds, size of Buffer and BLOb objects 
                                  is miscalculated</font></a> 
                                <li><a href="#tzce"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Error 
                                  in timezone calculation for Windows CE</font></a> 
                                <li><a href="#snnn"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">SE_NUM() 
                                  cannot accept negative values</font></a> 
                                <li><a href="#sfsonl"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">script 
                                  functions in shared objects are not locking 
                                  all data</font></a> 
                                <li><a href="#vxmmc"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">compilation 
                                  errors for vxWorks and EPOC min-memory options</font></a> 
                                <li><a href="#seinf"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">seInitializeObject() 
                                  helper function may not free object reference</font></a> 
                                <li><a href="#dnpnrd"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">dot-named 
                                  parse not recognizing dynamic objects</font></a> 
                                <li><a href="#nexnfd"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Number 
                                  toExponential() incorrect if fractionDigits 
                                  not specified</font></a> 
                                <li><a href="#ntpi"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Number 
                                  toPrecision() incorrect</font></a><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
                                  updated Dec 11, 2002</font> 
                                <li><a href="#dudgv"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">discrepencies 
                                  using delete on global variables</font></a> 
                                <li><a href="#nfpspf"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">non-floating-point 
                                  version of sprintf functions using %x or %X 
                                  may overwrite memory</font></a> 
                                <li><a href="#bples"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Blob.put() 
                                  loses existing settings for Buffer object</font></a> 
                                <li><a href="#srnin"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">string 
                                  replace, if no matches found, is not returning 
                                  the initial string</font></a> 
                                <li><a href="#aerreb"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">allocation 
                                  error in Unicode version of EvalBox demo</font></a> 
                                <li><a href="#ompfi"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">object-members 
                                  passed as parameters to functions passed incorrectly</font></a> 
                                <li><a href="#cemc"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">compilation 
                                  error if JSE_MUTLIPLE_GLOBAL==1 &amp;&amp; JSE_COMPACT_LIBFUNCS==0</font></a> 
                                <li><a href="#sessce"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">seEval(..SE_START...) 
                                  will grow stack if compilation error</font></a><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
                                  updated Jan 6, 2003</font> 
                              </ul>
                              <hr width="90%">
                              <font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="v500d"></a> 
                              API Errata, version <b>5.00d</b><br>
                              &nbsp;&nbsp;<b>New</b>, November 13, 2002</font> 
                              <ul>
                                <li><a href="#aomp"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">potential 
                                  crash with arguments object when receiving many 
                                  parameters</font></a> 
                                <li><a href="#srcnm"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">string.replace 
                                  crashes or consumes all memory when replacing 
                                  with null string</font></a> 
                                <li><a href="#pxnt"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">sePutXXX() 
                                  not returning TRUE as documented</font></a> 
                                <li><a href="#sgido"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">seGetXXX() 
                                  functions ignore dynamic object's hasProp when 
                                  retrieving an object value</font></a> 
                                <li><a href="#clfns"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">JSE_COMPACT_LIBFUNCS 
                                  not saving any memory</font></a> 
                                <li><a href="#ronf"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">some 
                                  objects made read-only with seShareReadObject() 
                                  may never be freed</font></a> 
                                <li><a href="#sgaae"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">seGetAttribs 
                                  may cause asser error, or return wrong value</font></a> 
                                <li><a href="#jclmc"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">JSE_COMPACT_LIBFUNCS 
                                  may crash while expanding used functions</font></a> 
                                <li><a href="#scflp"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">seCreateFiber 
                                  loses performances gains by reinitializing all 
                                  libraries</font></a> 
                                <li><a href="#fpcne"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">function.protoype.constructor 
                                  does not exist for all objects</font></a> 
                                <li><a href="#cfrfl"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">seCreateFiber 
                                  reinitializes function libraries</font></a> 
                                <li><a href="#eldv"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Errors 
                                  with extremely large Date values</font></a> 
                                <li><a href="#dtvc"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">default_this 
                                  parameter ignored in seEval(...SE_CONSTRUCTOR...)</font></a> 
                                <li><a href="#pphliv"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">during 
                                  script compilation peephole optimizer accesses 
                                  invalid memory</font></a> 
                                <li><a href="#mothra"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">sedbc 
                                  bugs with long binary data</font></a> 
                                <li><a href="#vsgax"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">virtual-stack 
                                  growth if retrieving values after an exception</font></a> 
                                <li><a href="#dgnhp"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">dynamic 
                                  get is not being called if hasProp callback 
                                  is NULL</font></a> 
                                <li><a href="#ssres"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">string.split() 
                                  incorrect if regular expression used as separator</font></a> 
                                <li><a href="#vsvn7f"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">very 
                                  short variable names incorrect if character 
                                  &gt; 0x7f</font></a> 
                                <li> <a href="#csecs"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Clib.system() 
                                  does not return exit code on Solaris</font></a> 
                              </ul>
                              <hr width="90%">
                              <font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="v500c"></a> 
                              API Errata, version <b>5.00c</b><br>
                              &nbsp;&nbsp;<b>New</b>, August 13, 2002</font> 
                              <ul>
                                <li><a href="#m1"><font face="Verdana, Arial, Helvetica, sans-serif" size="2">invalid 
                                  getArrayLength() results if no .length member</font></a> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#m2">SElib.interpret() 
                                  with no flags turns on all flags</a> </font> 
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a href="#m3">Unix 
                                  SElib.directory() function is broken</a> </font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#m4">On 
                                  Unix, some library functions mis-convert NaN 
                                  and omitted arguments</a> </font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#m5">array.slice(), 
                                  string.indexOf(), and string.slice() errors 
                                  on Unix and PalmOS</a> </font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#m6">some 
                                  unix data parameters can be off</a> </font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#cnu">fields 
                                  of call structure may not be initialized</a> 
                                  </font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#ifno">seIsFunc() 
                                  error for non-objects</a> </font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#sdisee">seDestroyContext 
                                  cannot be called within seEval</a> </font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#cenf">crash 
                                  with eval() in nested function</a> </font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#duse">decodeURI 
                                  is missing from standard ECMA libraries</a> 
                                  </font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#sicse">STACK_INFO 
                                  crashes within nested seEval()</a> </font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#mmss">JSE_MIN_MEMORY 
                                  builds truncate SE_SERVICES,SE_VALUE pointer</a> 
                                  </font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#wac">Win32 
                                  compilation errors if JSE_WIN_ALL defined</a> 
                                  </font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#nannnan">sePutNumber(NaN) 
                                  where NaN!=jseNaN are not recognized</a> </font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#pins">#include 
                                  statement inserts null-character into source 
                                  stream</a> </font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#eod">errors 
                                  with SE_OPT_DEBUGGER</a> </font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#svrr">seEval() 
                                  with SE_REPORT_ERRORS is not clearing the error 
                                  flag</a> </font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#stosf">stock 
                                  objects passed to seEval with SE_FUNC will not 
                                  work</a> </font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#gtyp">assert() 
                                  or memory leak from seEval(...SE_FUNC..) if 
                                  run-time error in script function</a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#ngfnw">SE_NEW_GLOBALS 
                                  flag for seEval() doesn't work</a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#jccnd">Compilation 
                                  errors if JSE_CONDITIONAL_COMPILE not defined</a></font> 
                              </ul>
                              <hr width="90%">
                              <font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="v500b"></a> 
                              API Errata, version <b>5.00b</b><br>
                              &nbsp;&nbsp;<b>New</b>, April 17, 2002</font> 
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#fpan">Function.prototype.apply() 
                                  not accepting null for thisObj parameter </a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#gisl">Documentation 
                                  incorrect about lifetime of seGetInternalString() 
                                  </a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#vltc">If 
                                  interpreting very long text lines, // comments 
                                  may extend over multiple lines</a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#sss">SE_SI_DEPTH 
                                  wrong for global code and for first function</a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#slnkpt">C++ 
                                  compilation errors in selink.h if JSE_LINK options 
                                  is not defined</a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#sszp">string 
                                  slice() function is not accepting zero parameters</a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#evfx">seEval(...SE_FUNC...) 
                                  does not generate exception if object is not 
                                  a function</a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#cr5$">5-character 
                                  variables names incorrect if either of last 
                                  two characters is '$'</a></font> 
                              </ul>
                              <hr width="90%">
                              <font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="v500a"></a> 
                              API Errata, version <b>5.00a</b><br>
                              &nbsp;&nbsp;<b>New</b>, March 7, 2002</font> 
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#strpsk">String 
                                  replace may skip matches if replacement string 
                                  is null-string (i.e. &quot;&quot;</a>)</font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#cdb">rare 
                                  crashes on memory overwrites using the dynamicBuffer 
                                  routines</a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#bjnmidx">Problems 
                                  with array lengths and numeric indices that 
                                  are large or non-integer</a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#opc">Foo.prototype.constructor 
                                  not assigned correctly for all builtin objects</a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#rspng">Array 
                                  split() error for negative starting point</a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#mthmnnz">Math.min(+0,-0) 
                                  wrongly returns +0</a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#ltmcrsh">Clib.localtime() 
                                  and Clib.gmtime() crash on out-of-range dates</a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#nrnan">Number 
                                  toString(with_radix) method is not handling 
                                  NaN, Infinity, and -Infinity</a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#ngmbd">Invalid 
                                  date computation on negative month</a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#npff">When 
                                  named parameters are disabled, calling a function 
                                  with seEval() fails</a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#noargv">argv[0] 
                                  is missing</a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#mthrndneg">Math.round() 
                                  returns -0 instead of +0 from -0.5 to -0</a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#pargnoenum">properties 
                                  of the arguments object should be DontEnum</a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#2pstincwith">post-inc/decrement 
                                  operator acts like pre-inc/decrement inside 
                                  a &quot;with&quot; block</a></font> 
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><a href="#pstincwith">post-increment 
                                  operator on local variable is ignoring &quot;with&quot; 
                                  statement</a></font> 
                              </ul>
                              <hr width="90%">
                              <p> 
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="3"><b>The 
                                Details</b> </font></p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>for 
                                5.00f</b> -- (may apply to earlier versions)</font></p>
                              <p><a name="hugu"></a></p>
                              <p> 
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>hang 
                                  on assigning to undefined variable if global 
                                  object is SE_DYNA_UNDEF</b><br>
                                  (for ISDK/C 5.00f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug: 
                                  If the global object is dynamic (i.e. setSetCallbacks 
                                  has been called on SE_GLOBAL), and if jseopt.h 
                                  defines JSE_CACHE_GLOBAL_VARS, and if a property 
                                  of the global is of type undefined, then assigning 
                                  to that property will result in an assertion 
                                  being raised (if a debug build) or in the engine 
                                  haning in an infinite loop.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In src/core/call.c, function secoreFindAnyVar(), 
                                  at about line 1899, change this code:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   #  if JSE_DYNAMIC_CALLBACKS==1
      if ( obj_flag==0 || VUndefined != SEVAR_GET_TYPE(wslot) )
   #  endif</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">to 
                                  this</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   #  if JSE_DYNAMIC_CALLBACKS==1
      if ( !(obj_flag==0 || VUndefined != SEVAR_GET_TYPE(wslot)) )
         wslot = STACK0;
      else
   #  endif</font></pre>
                              </blockquote>
                              <p><a name="cafp"></a></p>
                              <p> 
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Alignment 
                                  errors with Clib *printf and *scanf floating-point 
                                  on HP-UX</b><br>
                                  (for ISDK/C 5.00f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug: 
                                  If a call to the Clib *printf or *scanf methods 
                                  (e.g. Clib.sprintf) contains non-floating-point 
                                  data types following a floating-point type, 
                                  data alignment may be incorrect and invalid 
                                  data or crashes will result. This problem appears 
                                  only on HPUX systems.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  Replace src/lib/clib/sefmtio.c with the file 
                                  at <a href="ftp://ftp.nombas.com/pub/isdkeval/se500/sefmtio.c">ftp://ftp.nombas.com/pub/isdkeval/se500/sefmtio.c</a></font></p>
                              </blockquote>
                              <p><a name="sscmss"></a></p>
                              <p> 
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>system 
                                  can become corrupted if number of objects in 
                                  use is greater than MARK_STACK_SIZE</b><br>
                                  (for ISDK/C 5.00f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug: 
                                  If the number of objects in use is greater than 
                                  MARK_STACK_SIZE (defined in call.h) then memory 
                                  may become corrupted. This is a rare oocurence 
                                  and very difficult to duplicate. If you have 
                                  experienced such corruption when running with 
                                  very many objects, and if the problem is difficult 
                                  to duplicate, then this may be the cause.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In src/core/garbage.c, function mark(), this 
                                  block near line 936:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   for( i=0;i&lt;used;i++ )
   {
      rSEVar var;</font>
   
      var = &amp;SEMEMBERS_GET(basecall,mems,i,value);</pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">should 
                                  </font><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
                                  become:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   for( i=0;i&lt;used;i++ )
   {
      rSEVar var;</font>
   
      seVarName vn = SEMEMBERS_GET(basecall,mems,i,name);
      if( SE_NO_VARNAME != vn
       &amp;&amp; IsNormalSEStringTableEntry(vn)
       &amp;&amp; 0 == (HashListFromSEVarName(vn)-&gt;locks &amp; JSE_SESTRING_SWEEP_BIT) )
      {
         add_it = TRUE;
         break;
      }
   
      var = &amp;SEMEMBERS_GET(basecall,mems,i,value);</pre>
                              </blockquote>
                              <p><a name="slnr"></a></p>
                              <p> 
                              <ul>
                                <li><b><font face="Verdana, Arial, Helvetica, sans-serif" size="2">when 
                                  converting numbers to strings, rounding will 
                                  not occur in some locales</font></b><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><br>
                                  (for ISDK/C 5.00f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug: 
                                  In locales that use a comma to separate fractional 
                                  parts of floating-point numbers (e.g. 3,145). 
                                  JSE_NUMTOSTRING_ROUNDING will not round.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In src/misc/utilstr.c, function EcmaNumberToString(), 
                                  at around line 979, this statement:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if ( NULL == (decimal=strchr_sechar((secharptr)buffer,'.')) )</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">should 
                                  become:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if ( NULL == (decimal=strchr_sechar((secharptr)buffer,'.'))
     && NULL == (decimal=strchr_sechar((secharptr)buffer,',')) )</font></pre>
                              </blockquote>
                              <p><a name="srfl"></a></p>
                              <p> 
                              <ul>
                                <li><b><font face="Verdana, Arial, Helvetica, sans-serif" size="2">semicolon 
                                  required after assignment of function literals</font></b><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><br>
                                  (for ISDK/C 5.00f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug: 
                                  An error may be generate after a script line 
                                  iniating a function literal, as in this example:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   var a = function() { return; } // compiler says semicolon needed here
   var b = function() { return; }</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In src/core/expressn.c, function secompilePrimaryExpression(), 
                                  at around line 3022, add this as the last statement 
                                  (before the break) for &quot;case seTokFunction:&quot;:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   This->last_token = NULL;</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and 
                                  in src/core/statemnt.c, function secompile_semicolon(), 
                                  change the &quot;else if&quot; statement at 
                                  about line 49 to:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   else if ( !This->automatic_semicolon_insertion
          || ( NULL != This->last_token
            && seTokEOL != tokType(This->last_token)
            && seTokEOF != tokType(This->token)
            && '}' != tokType(This->token) ) )</font></pre>
                              </blockquote>
                              <p><a name="psndp"></a></p>
                              <p> 
                              <ul>
                                <li><b><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Invalid 
                                  conversion of strings to number on PalmOS when 
                                  strings ends in decimal point</font></b><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><br>
                                  (for ISDK/C 5.00f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug: 
                                  On the PalmOS, a string ending in a decimal 
                                  point is not recognized as a valid number. For 
                                  example the following would evaluate as false:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   &quot;4.&quot; == 4</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In src/misc/palmos/crt/string/string.c function 
                                  strtod_sechar(), at about line 126 replace this 
                                  code:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if ( isdigit_sechar(*(nptr+1)) )
      nptr++;</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">with:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if ( isdigit_sechar(*(nptr+1))  ||  IS_WHITESPACE(*(nptr+1)) )
      nptr++;</font></pre>
                              </blockquote>
                              <p><a name="s2nn"></a></p>
                              <p> 
                              <ul>
                                <li><b><font face="Verdana, Arial, Helvetica, sans-serif" size="2">conversion 
                                  of strings to numeric sestrings may make non-unique 
                                  identifiers</font></b><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><br>
                                  (for ISDK/C 5.00f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug: 
                                  When string identifiers are converted to sestrings 
                                  (the internal representation of all identifiers), 
                                  some strings may be wrongly treated as if they 
                                  were integer indices and may produce non-unique 
                                  internal identifiers. Exactly when this happens 
                                  depends on compilers and hardware and how they 
                                  treat the ascii character set. The results of 
                                  this problem may be exceedingly rare (requiring 
                                  two unusual string names to collide), hard to 
                                  trace to this source problem (error will likely 
                                  occur long after the collision has been made), 
                                  and severe (crash is likely).</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In src/core/util.c replace the function CreateSEVarName() 
                                  with with the file at <a href="ftp://ftp.nombas.com/pub/isdkeval/se500/createsevarname.c">ftp://ftp.nombas.com/pub/isdkeval/se500/createsevarname.c</a></font></p>
                              </blockquote>
                              <p><a name="gvnana"></a></p>
                              <p> 
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>global 
                                  VariableObject (activation) is not adjusted 
                                  if global object changes</b></font><br>
                                  (for ISDK/C 5.00f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug: 
                                  If the VariableObject is the same as the global 
                                  object (i.e. in global scope) and the global 
                                  object is changed the variable object retains 
                                  its old value.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In src/core/se500.c, function sePutMember(), 
                                  change code at about line 2603 from:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( SEVAR_GET_TYPE(tmp)==SE_TYPE_OBJECT )
   {
      HSEOBJECT_ASSIGN(CALL_GLOBAL(call),SEVAR_GET_OBJECT(tmp));
   }</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">to:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( SEVAR_GET_TYPE(tmp)==SE_TYPE_OBJECT )
   {
      if ( CALL_VAROBJ(call) == call->hGlobalObject )
         HSEOBJECT_ASSIGN(CALL_VAROBJ(call),SEVAR_GET_OBJECT(tmp));
      HSEOBJECT_ASSIGN(CALL_GLOBAL(call),SEVAR_GET_OBJECT(tmp));
   }</font></pre>
                              </blockquote>
                              <p><a name="fcfgoo"></a></p>
                              <p> 
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Function 
                                  constructor may fail if dynamic global object 
                                  overrides getters and putters</b><br>
                                  (for ISDK/C 5.00f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug: 
                                  If the function constructor is called to make 
                                  an anonymous function, and if the global object 
                                  is dynamic and the getters and putters do not 
                                  accept &quot;anonymous&quot; as a real variable, 
                                  then no function is created.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In src/lib/ecma/seobject.c function Ecma_Function_construct(), 
                                  at about line 292 add these local variables:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   const struct seObjectCallbacks * save_global_callbacks;
   const struct seObjectCallbacks * save_activation_callbacks;</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and 
                                  </font><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
                                  then at about line 325, after the final call 
                                  to add_to_buffer(..) and before the call to 
                                  seExists(), insert this block:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   /* it is possible that global behavior has been overloaded - temporarily disable that */
   save_global_callbacks = seGetCallbacks(se,SE_GLOBAL,SE_VALUE);
   if ( NULL != save_global_callbacks )
      seSetCallbacks(se,SE_GLOBAL,SE_VALUE,NULL);
   save_activation_callbacks = seGetCallbacks(se,SE_ACTIVATION,SE_VALUE);
   if ( NULL != save_activation_callbacks )
      seSetCallbacks(se,SE_ACTIVATION,SE_VALUE,NULL);</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and 
                                  finally add this block at the end of the function 
                                  (around line 401):</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   /* restore previous global callbacks */
   if ( NULL != save_activation_callbacks )
      seSetCallbacks(se,SE_ACTIVATION,SE_VALUE,save_activation_callbacks);
   if ( NULL != save_global_callbacks )
      seSetCallbacks(se,SE_GLOBAL,SE_VALUE,save_global_callbacks);</font><font face="Courier New, Courier, mono" size="2">;</font></pre>
                              </blockquote>
                              <p><a name="bcue"></a></p>
                              <p> 
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>seBrowserCreateEvent, 
                                  in browser framework, always makes an undefined 
                                  event</b><br>
                                  (for ISDK/C 5.00f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug: 
                                  The seBrowserCreateEvent() function, for creating 
                                  HTML browser events if using our browser framework, 
                                  is ignoring the specified event text and always 
                                  creating an undefined event.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In src/browser/sebrowse.c function seBrowserCreateEvent(), 
                                  at about line 1304 change:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   ret = seEval(se,func,SE_FUNC,NULL,NULL,SE_DEFAULT,&amp;params);</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">to:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   ret = seEval(se,func,SE_FUNC,NULL,stack,SE_DEFAULT,&amp;params);</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">then 
                                  at about line 1329 change:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   sePutObject(se,loc,SE_UNIMEM(eventname),func);</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">to:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   seMustPutDirectObject(se,loc,SE_UNIMEM(eventname),func);</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">finally 
                                  at about line 1333 change:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   seFreeObject(se,loc);</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">to:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if ( loc ) seFreeObject(se,loc);</font></pre>
                              </blockquote>
                              <p><a name="ow2c"></a></p>
                              <p> 
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>SEObjectWrapper 
                                  has too many contexts; may be NULL</b><br>
                                  (for ISDK/C 5.00f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug: 
                                  The SEObjectWrapper class, used for auto-wrapping 
                                  C++ classes, defines two fields to hold the 
                                  current context. They are not both updated together 
                                  and one may be NULL when needed. This may cause 
                                  a crash if the NULL value is used.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In src/app/jseobject.h and src/app/jseobject.cpp, 
                                  the SEObjectWrapper class defines two members 
                                  to save the current context, m_context and m_execContext. 
                                  There should only be one such member. In src/app/jseobject.h 
                                  definitiion of the SEObjectWrapper class remove 
                                  the m_execContext member, and move the m_context 
                                  member under &quot;private:&quot;. Then change 
                                  all references of m_execContext to m_context. 
                                  Also, in src/app/jseobject.cpp remove the constructor 
                                  initializers for m_execContext().</font></p>
                              </blockquote>
                              <p><a name="scknl"></a></p>
                              <p> 
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Socket() 
                                  should return null on error</b><br>
                                  (for ISDK/C 5.00f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug: 
                                  If a call to Socket() fails it should return 
                                  null (as documented). Currently it is always 
                                  returning an object.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In src/lib/socket/sesocket.c replace the Socket_call 
                                  method with this code:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">      static SE_CALLBACK(void)
   Socket_call(secontext se,sememcount argc)
   {
      seobject obj = seMakeObject(se);
      buildSocketObject(se,argc,obj);
      if ( NULL == sePtrFromObj(se,obj,SESOCKET_PTR_NAME,False) )
         sePutNull(se,SE_RETURN,SE_VALUE);
      else
         sePutObject(se,SE_RETURN,SE_VALUE,obj);
   }</font></pre>
                              </blockquote>
                              <p><a name="mcpsem"></a></p>
                              <p> 
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Memory 
                                  corruption on %s error messages</b><br>
                                  (for ISDK/C 5.00f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug: 
                                  If an error messages is generated with a format 
                                  string containing the &quot;%s&quot; formatting 
                                  type, and if the string that %s refers to is 
                                  very long, then an assert will be generated 
                                  (in debug mode), or a memory-overwrite will 
                                  likely cause a crash (in release mode). For 
                                  example, this script would cause such a crash:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   var bigstr = "func";
   for (var i = 0; i < 5000; i++ )
      bigstr += "x";
   bigstr += "()";
   eval(bigstr);</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">This 
                                  can also be a problem if you are using %s in 
                                  any of your seThrow() calls but are not limiting 
                                  the length of string arguments.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In the next release (5.00g) the handling for 
                                  error messages has been adjusted to manage arbitrarily 
                                  long parameters. But for 5.00f the quickest 
                                  and safest approach is to edit the files src/core/rsrccore.h 
                                  and src/lib/common/rsrclib.h and change all 
                                  occurences of &quot;%s&quot; in those files 
                                  to be &quot;%.30s&quot;. If you are using a 
                                  build that relies on our implementation of se_vsprintf 
                                  in src/misc/utilstr.c (if your system does not 
                                  supply a native implementation of vsprintf) 
                                  then contact http://support.nombas.com/ for 
                                  a replacement function.</font></p>
                              </blockquote>
                              <p><a name="pptykk"></a></p>
                              <p> 
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Clib.strtok() 
                                  fails with seShareReadObject()</b><br>
                                  (for ISDK/C 5.00f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug: 
                                  If the Clib object is shared in multiple thread 
                                  via seShareReadObject() and the Clib.strtok() 
                                  method is called then data will be corrupted.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  Replace src/clib/sestring.c with the file at 
                                  <a href="ftp://ftp.nombas.com/pub/isdkeval/se500/sestring.c">ftp://ftp.nombas.com/pub/isdkeval/se500/sestring.c</a></font></p>
                              </blockquote>
                              <p><a name="anapgc"></a></p>
                              <p> 
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>JSE_ALWAYS_IMPLICIT_* 
                                  flags are not applied to global code</b><br>
                                  (for ISDK/C 5.00f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug: 
                                  The descriptions for JSE_ALWAYS_IMLICIT_THIS 
                                  and JSE_ALWAYS_IMPLICIT_PARENTS say that all 
                                  functions will act is if they had the SE_IMPLICIT_THIS 
                                  and SE_IMPLICIT_PARENTS flag set. But this is 
                                  not happening with the global script code (which 
                                  may be seen as code within a global initialization 
                                  function).</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  A simple fix is to use SE_INIT_IMPLICIT_THIS 
                                  and SE_INIT_IMPLICIT_PARENTS flags in your call 
                                  to seEval(). Otherwise, to fix this in the ScriptEase 
                                  code locate these lines in src/core/call.c, 
                                  function callFunction, near line 634:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   #     if JSE_ALWAYS_IMPLICIT_PARENTS==1
         /* all function have this assumed automatically, except for the initialization */
         if ( !isinit || (func->attributes & SE_IMPLICIT_PARENTS) )
   #     else</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and 
                                  replace with this code</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   #     if JSE_ALWAYS_IMPLICIT_PARENTS==0
         if( func->attributes & SE_IMPLICIT_PARENTS )</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  and a few lines down, replace this block: </font></p>
                                <pre>   #     if JSE_ALWAYS_IMPLICIT_THIS==1
         /* all function have this assumed automatically, except for the initialization */
         if ( !isinit || (func->attributes & SE_IMPLICIT_THIS) )
   #     else</pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  with: </font></p>
                                <pre>   #     if JSE_ALWAYS_IMPLICIT_THIS==0
         if( func->attributes & SE_IMPLICIT_THIS )</pre>
                              </blockquote>
                              <p><a name="exrtu"></a></p>
                              <p> 
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>eval(&quot;var 
                                  x = 100&quot;) returns undefined</b><br>
                                  (for ISDK/C 5.00f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Problem: 
                                  eval() is supposed to return the result of the 
                                  last expression evaluated. But in the case of 
                                  the last expression being a variable initializer 
                                  (e.g. &quot;var x = 10&quot;) the return from 
                                  eval() or seEval() will be undefined. We put 
                                  this behavior in to match what happens in the 
                                  popular browsers. But this does not appear to 
                                  be correct behavior accoding to the ECMA specification, 
                                  nor according to major boooks on the language, 
                                  nor according to common sense (eval(&quot;var 
                                  x; x=10&quot;) returns 10 so why shouldn't eval(&quot;var 
                                  x=10&quot;) do the same?).</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In src/core/statemnt.c, function secompileVar(), 
                                  locate the comment around line 228 beginning 
                                  with &quot;/* we don't do anything with the 
                                  value&quot; and replace with this block:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   #if SE_ECMA_RETURNS==1
   #if defined(SE_VARINIT_NO_RETURN)
      /* we don't do anything with the value - note I've checked the
       * browsers and while something like 'a = 15;' will auto-return
       * 15, 'var a = 15;' does not. Therefore, it is incorrect to put
       * a seSaveExpr here.
       */
   #else
      secompileGetValue(This);
      SEASSERT( This->expr.type==EXPR_STACKTOP );
      if( LOCAL_TEST_IF_INIT_FUNCTION(This->locfunc) )
         secompileAddItem0(This,seSaveExpr);
   #endif
   #endif</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">If 
                                  you need the browser-like behavior, so that 
                                  eval(&quot;var x=10&quot;) returns undefined, 
                                  just define </font><font size="2" face="Courier New, Courier, mono">SE_VARINIT_NO_RETURN</font> 
                                  and recompile<font size="2" face="Verdana, Arial, Helvetica, sans-serif">.</font></p>
                              </blockquote>
                              <p><a name="ioerg"></a></p>
                              <p> 
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>seContinueFunc 
                                  callback does not remove temporaries</b><br>
                                  (for ISDK/C 5.00f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug: 
                                  If temporary objects or strings are created 
                                  in your seContinueFunc callback (e.g. via seMakeObject, 
                                  seGetString, etc...) then those temporaries 
                                  are not automatically cleaned up when your the 
                                  seContinueFunc callback returns (as is suggested 
                                  by our documentation on Lifetime rules). This 
                                  can lead to growing use of memory as your program 
                                  runs.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In src/core/srccore.h remove all CALL_CONTINUE 
                                  and callMayIContinue macros, to be replaced 
                                  with this function prototype:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   sebool callMayIContinue(struct seCall *call);</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and 
                                  in src/core/call.c add the callMayIContinue() 
                                  function found at <a href="ftp://ftp.nombas.com/pub/isdkeval/se500/callmayicontinue.c">ftp://ftp.nombas.com/pub/isdkeval/se500/callmayicontinue.c</a>:</font></p>
                              </blockquote>
                              <p><a name="sdlconl"></a></p>
                              <p> 
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>SElib.dynamicLink() 
                                  expects string lengths to remain constant</b><br>
                                  (for ISDK/C 5.00f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug: 
                                  If a DLL (or shared object or code fragment) 
                                  receives a string datum from SElib.dynamicLink() 
                                  and changes the data in that string so that 
                                  its length is shorter than the original string, 
                                  we will assume the length has not changed and 
                                  store data beyond the end of the string into 
                                  the passed parameter. In Unicode and ASCII builds 
                                  this will just leave the string length incorrect. 
                                  In MBCS builds this could potentially cause 
                                  a failure if the data beyond the null character 
                                  is invalid MBCS sequences.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In src/lib/common/sedyna.c, function CallDynamicFunction(), 
                                  at about line 245 change the statement from:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   sePutString(se,SE_ARGS,SE_INDEX((sememcount)(i+first_parameter)),\
               (secharptr)data,BufferLengths[i]);</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">to:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   sePutString(se,SE_ARGS,SE_INDEX((sememcount)(i+first_parameter)),\
               (secharptr)data,SE_PS_STRLEN);</font></pre>
                              </blockquote>
                              <p><a name="gndlbl"></a></p>
                              <p> 
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>bad 
                                  error message, or crash, when &quot;goto&quot; 
                                  statement is not followed by a label</b><br>
                                  (for ISDK/C 5.00f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug: 
                                  If a goto is compiled, but is not followed by 
                                  a proper label, then the error message will 
                                  be invalid, may display garbage, and may crash.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In src/core/statemnt.c, function secompileStatement(), 
                                  in the &quot;case seTokGoto:&quot; change line 
                                  1069 from:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   callQuit(call,textcoreGOTO_LABEL_NOT_FOUND);</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">to:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   callQuit(call,textcoreNOT_LOOP_LABEL);</font></pre>
                              </blockquote>
                              <p><a name="nogo"></a></p>
                              <p> 
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>&quot;goto&quot; 
                                  is not standard EcmaScript</b><br>
                                  (for ISDK/C 4.40f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Issue: 
                                  ScriptEase implements the &quot;goto&quot; statement, 
                                  but most other EcmaScript implementations do 
                                  not recognize the keyword.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  To disable the &quot;goto&quot; keyword, in 
                                  srccore/codeprt2.c function GetVariableNameOrKeyword(), 
                                  at about line 478, change this line:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">      if ( -1 != find )</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">to:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">      if ( -1 != find
   #    if defined(JSE_DISABLE_GOTO)
        && find != textcoreKeyword_goto
   #    endif
       )</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Then, 
                                  if you want to disable the &quot;goto&quot; 
                                  keyword, compile with JSE_DISABLE_GOTO defined. 
                                  (JSE_DISABLE_GOTO will be added as a standard 
                                  options to jseopt.h in the next release).</font></p>
                              </blockquote>
                              <p><a name="cpmpi"></a></p>
                              <p> 
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>cached 
                                  prototypes (Array, Function, Object, String) 
                                  miss __parent__ inheritance</b><br>
                                  (for ISDK/C 5.00f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug: 
                                  Some common objects have their <font face="Courier New, Courier, mono">Object.prototype</font> 
                                  object cached for faster access. These objects 
                                  are <font face="Courier New, Courier, mono">Array</font>, 
                                  <font face="Courier New, Courier, mono">Function</font>, 
                                  <font face="Courier New, Courier, mono">Object</font>, 
                                  and <font face="Courier New, Courier, mono">String</font>. 
                                  When refreshing this &quot;prototype cache&quot; 
                                  the real objects may not be found if inheritance 
                                  is through the __parent__ chain instead of through 
                                  standard _prototype chain. The resulting bug 
                                  will usally be that statements that use these 
                                  cached prototypes (e.g. <font face="Courier New, Courier, mono">new&nbsp;String()</font>, 
                                  <font face="Courier New, Courier, mono">&quot;foo&quot;.toString()</font>) 
                                  will fail, while objects that do not use this 
                                  cache (e.g. <font face="Courier New, Courier, mono">new&nbsp;Date()</font>) 
                                  will work.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  The function AssignGlobalPrototype() in src/core/call.c 
                                  should be replaced with the version found at 
                                  <a href="ftp://ftp.nombas.com/pub/isdkeval/se500/assignglobalprototype_500f.txt">ftp://ftp.nombas.com/pub/isdkeval/se500/assignglobalprototype_500f.txt</a> 
                                  </font></p>
                              </blockquote>
                              <p><a name="tcgis"></a></p>
                              <p> 
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>try/catch 
                                  grows internal stack</b><br>
                                  (for ISDK/C 5.00f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug: 
                                  Each try/catch will leave one element on the 
                                  internal stack. The stack space is restored 
                                  whenever the containing function returns. But 
                                  if the function does not return then many try/catch 
                                  blocks will eventually throw an out-of-stack 
                                  error. For example, the following script would 
                                  eventually exhause internal stack space:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   for ( ; ; )
   {
      try
      {
         throw &quot;blah&quot;;
      }
      catch(e)
      {

      }
   }</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In src/core/operator.c, function secode_ReasonToQuit(), 
                                  remove all 3 lines declaring or referencing 
                                  the variable <font face="Courier New, Courier, mono">w_new_loc</font>. 
                                  These are near lines 885, 893, and 898.</font></p>
                              </blockquote>
                              <p><a name="cfml"></a></p>
                              <p> 
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>seCreateFiber() 
                                  with JSE_SECURE uses unreleased memory</b><br>
                                  (for ISDK/C 5.00f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug: 
                                  If compiling with JSE_SECURE defined, then each 
                                  call to seCreateFiber() allocates about 32 bytes 
                                  that are not released until the top-level context 
                                  is destroyed.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  The simplest fix is to remove JSE_SECURE from 
                                  your JSEOPT.H file. If compiling with JSE_TASK_SCHEDULER 
                                  and JSE_SECURE then in src/core/util.c, function 
                                  callNewSettings(), at about line 1202 replace 
                                  this line:</font></p>
                                <pre><font face="Courier New, Courier, mono">   if( success && (call->prev == NULL ||</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">with:</font></p>
                                <pre><font face="Courier New, Courier, mono">   if( success && ((call->prev == NULL && call->fiber_prev==NULL)||</font></pre>
                              </blockquote>
                              <p><a name="comole"></a></p>
                              <p> 
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>COMOBJ 
                                  leaks resources</b><br>
                                  (for ISDK/C 5.00f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug: 
                                  COMOBJ can leaks resources when working with 
                                  type libraries and pass-by-ref COM objects. 
                                  Over time total memory use will grow.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  Replace src/lib/comobj/* code with files found 
                                  at <a href="ftp://ftp.nombas.com/pub/isdkeval/se500/comobj_2003_03_20.zip">ftp://ftp.nombas.com/pub/isdkeval/se500/comobj_2003_03_20.zip</a></font></p>
                              </blockquote>
                              <p><a name="dprdbi"></a></p>
                              <p> 
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>#define 
                                  prevents rest of script from being interpreted</b><br>
                                  (for ISDK/C 5.00f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug: 
                                  When interpreting a script from text, the #define 
                                  directive causes the rest of the script to be 
                                  ignored. </font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In src/core/define.c, function defineProcessSourceStatement(), 
                                  around line 237 (right at end of the for loop, 
                                  after the else block) add this code:</font></p>
                                <pre>   /* Check if we have reached the end of the line */
   if ( SECHARPTR_GETC(c) == '\n' || SECHARPTR_GETC(c) == '\r' )
   {
      end = c; break;
   }
#  if JSE_UNICODE==1
   if ( SECHARPTR_GETC(c) == 0x2028 || SECHARPTR_GETC(c) == 0x2029 )
   {
      end = c; break;
   }
#  endif</pre>
                              </blockquote>
                              <p><a name="edccee"></a></p>
                              <p> 
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Empty 
                                  #defines can cause errors on expansion</b><br>
                                  (for ISDK/C 5.00f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug: 
                                  If a preprocessor macro is defined without a 
                                  body, then errors can occur when that macro 
                                  is expanded in the script. </font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In src/core/source.c, function sourceNewFromText(), 
                                  around line 380 change this block:</font></p>
                                <pre>   if ( !sourceNextLine(This,call,False,&success,True)|| !success )
   {
      sourceDelete(This,call);
      return NULL;
   }</pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">to:</font></p>
                                <pre>   sourceNextLine(This,call,False,&success,True);
   if ( !success )
   {
      sourceDelete(This,call);
      return NULL;
   }</pre>
                              </blockquote>
                              <p><a name="iaipdbi"></a></p>
                              <p> 
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>The 
                                  #ifdef and #ifndef preprocessor directives behave 
                                  incorrectly</b><br>
                                  (for ISDK/C 5.00f)</font></li>
                              </ul>
                              <blockquote> 
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Bug: 
                                  The #ifdef and #ifndef directives rely on comparisons 
                                  against the ECMAScript undefined value to determine 
                                  if a symbol is defined. This behavior causes 
                                  errors when the directive is applied to an empty 
                                  macro. These directives now only test names 
                                  in respect to whether or not they have been 
                                  defined by #define, or are members of the SE_DEFINE 
                                  object.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In src/core/source.c, function sourceConditionalCompilationFilter(), 
                                  around line 769 change this line:</font></p>
                                <pre>   if ( !sourceEvaluateConditionalCompilation(This,call,\
            SourceToEvaluate,textcoreCCD_ifdef==find,True) )</pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">to:</font></p>
                                <pre>   if ( !sourceEvaluateIfdef(This,call,SourceToEvaluate,textcoreCCD_ifdef==find) )</pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Next, 
                                  the sourceEvaluteIfdef() function needs to be 
                                  added to src/core/source.c. The source for this 
                                  function can be found at <a href="ftp://ftp.nombas.com/pub/isdkeval/se500/ifdef.c">ftp://ftp.nombas.com/pub/isdkeval/se500/ifdef.c</a></font></p>
                              </blockquote>
                              <hr width="90%">
                              <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>for 
                                5.00e --</b></font> <font face="Verdana, Arial, Helvetica, sans-serif" size="2">(may 
                                apply to earlier version)</font></p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="spvng"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>seParseVar() 
                                  result may become invalid if SE_GLOBAL changes</b><br>
                                  (for ISDK/C 5.00e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: If the object returned by seParseVar() 
                                  represents the current SE_GLOBAL, then that 
                                  object will only be correct until SE_GLOBAL 
                                  is assigned to a new value. This is because 
                                  seParseVar is returning the SE_GLOBAL shortcut 
                                  itself, and not a lock on the existing object 
                                  that is represented by SE_GLOBAL. </font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  Replace seParseVar() function in src/core/se500.c 
                                  with the version found at <a href="ftp://ftp.nombas.com/pub/isdkeval/se500/separsevar.c">ftp://ftp.nombas.com/pub/isdkeval/se500/separsevar.c</a></font></p>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="spvnc"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>seParseVar(...SE_VP_CREATE) 
                                  is not making sub-properties of objects</b><br>
                                  (for ISDK/C 5.00e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: According to the documentation, seParseVar() 
                                  with the SE_VP_CREATE flag should create any 
                                  members that do not already exist, but this 
                                  is not happening if the members are more than 
                                  one level deep. For example, seParseVar(...&quot;yabba.dabba.doo&quot;...SE_VP_CREATE) 
                                  will generate a ConversionError if &quot;yabba&quot; 
                                  does not already exist.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In src/core/se500.c, functions seParseVar(), 
                                  at about line 3132 (3 lines below the &quot;got_name:&quot; 
                                  tag), this block:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( flags&SE_VP_CREATE )
   {
      seConvert(se,obj,SE_STR(mem),SE_TOOBJECT);
   }</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">should 
                                  be replaced by this block:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( flags&SE_VP_CREATE )
   {
      if( seGetType(se,obj,SE_STR(mem))==SE_TYPE_UNDEFINED )
      {
         seobject tmpobj = seMakeObject(se);
         sePutObject(se,obj,SE_STR(mem),tmpobj);
         seFreeObject(se,tmpobj);
      }
      else
      {
         seConvert(se,obj,SE_STR(mem),SE_TOOBJECT);
      }
   }</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="scff"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>stack 
                                  corruption with long mode parameter to Clib.fopen() 
                                  and Clib.freopen()</b><br>
                                  (for ISDK/C 5.00e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: If the mode parameter to Clib.fopen() or 
                                  Clib.freopen() parameter is longer than 18 characters, 
                                  a stack buffer overflow will occur. </font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In src/lib/sestdio.c, functions Clib_fopen() 
                                  and Clib.freopen() change this line (at about 
                                  line 671 and 737)</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   strcpy_sechar((secharptr)NewMode,Mode);</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">to 
                                  this </font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   memset(NewMode,0,sizeof(NewMode));
   strncpy_sechar((secharptr)NewMode,Mode,sizeof(NewMode)/sizeof(NewMode[0])-2);</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="pdb"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>PalmOS 
                                  samples treat seInitialize() as a boolean</b><br>
                                  (for ISDK/C 5.00e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: The PalmTst and EvalBox samples treat 
                                  the return value from seInitialize() as a boolean, 
                                  assuming zero indicates error and non-zero indicates 
                                  success. This can cause an invalid seInitialize(), 
                                  such as if the SEISDK or MathLib PRCs are not 
                                  loaded, to be mis-interpreted as a successful 
                                  load of the engine. Instead, seInitialize(), 
                                  as documented, returns a <font face="Courier New, Courier, mono">uint</font> 
                                  indicating the version of the engine that is 
                                  initializing. In recent release more distinct 
                                  values are returned from seInitialize() to help 
                                  determine what part of initialization failed--the 
                                  invalid return value use to be only 0, which 
                                  is why treating seInitialize() as a boolean 
                                  has worked on previous releases. </font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In samples/evalbox/palmos/evalbox.c the test 
                                  on seInitialize() should change from</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   ErrFatalDisplayIf( (!seInitialize(&gSEFuncTable)),</font></pre>
                                <p>to</p>
                                <pre><font face="Courier New, Courier, mono" size="2">   ErrFatalDisplayIf( (SE_ENGINE_VERSION_ID!=seInitialize(&gSEFuncTable)),</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Also, 
                                  in tests/testers/build/palmos/palmtst.c, the 
                                  results of seInitialize() should be assigned 
                                  to a <font face="Courier New, Courier, mono">uint 
                                  ver;</font> local variable, and the ErrFatalDisplayIf() 
                                  first argument should change from <font face="Courier New, Courier, mono">(!success)</font> 
                                  to <font face="Courier New, Courier, mono">(ver!=SE_ENGINE_VERSION_ID)</font>.</font></p>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="ndfs"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>seEnd() 
                                  terminating an seEval(...SE_FUNC|SE_START...) 
                                  asserts</b><br>
                                  (for ISDK/C 5.00e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: Using seEnd() to terminate an seEval using 
                                  the SE_FUNC option (and SE_START obviously) 
                                  will cause asserts to trigger.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In src/core/se500.c, after this line (which 
                                  is found at about line 6140):</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   struct evalFuncStart *info;</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">add 
                                  the following block:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   while( call->start_info->done_with_func!=FRAME )
   {
      callReturnFromFunction(call);
   }</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="daop"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>SEDBC 
                                  Database methods assume an open database</b><br>
                                  (for ISDK/C 5.00e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: Some methods of the Database object assume 
                                  that the .connect() method succeeded. If .connect() 
                                  did not succeed then these methods may crash. 
                                  It may be considered bad programming for a script 
                                  to call these methods after connect failed, 
                                  but a script language should be able to recover 
                                  from &quot;bad programming&quot;.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  Replace src/lib/sedbc/database.c with the file 
                                  found at <a href="ftp://ftp.nombas.com/pub/isdkeval/se500/database.c">ftp://ftp.nombas.com/pub/isdkeval/se500/database.c</a></font></p>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="ifoum"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Bug 
                                  in seIsFunc() or seFunctionAsText() if out-of-memory</b><br>
                                  (for ISDK/C 5.00e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: If an out-of-memory condition occurs while 
                                  caling seIsFunc() or seFunctionAsText(), then 
                                  invalid memory may be referenced and a possible 
                                  crash.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In src/core/se500.c, function seIsFunc(), at 
                                  about line 4369, add to this conditional</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( hobj )</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">so 
                                  it becomes</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( hobj  &amp;&amp;  !IS_OUT_OF_MEM_OBJ(call,hobj) )</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="sesscetypo"></a> 
                                </font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Typo 
                                  in seEval() errata</b><br>
                                  (for ISDK/C 5.00e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: An earlier 5.00e errata mistakenly placed 
                                  a semi-colon at the end of an if clause. The 
                                  semi-colon could cause invalid stack use, especially 
                                  with the <font face="Courier New, Courier, mono">SE_START</font> 
                                  flag.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  That previous errata has been updated here: 
                                  <a href="#sessce">seEval(..SE_START...) will 
                                  grow stack if compilation error</a> </font></p>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="reun"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>RegExp.$x 
                                  and RegExp.lastParen not overwriting previous 
                                  results with &quot;undefined&quot;</b><br>
                                  (for ISDK/C 5.00e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: When the results of a regular expression 
                                  call should result in <font face="Courier New, Courier, mono">undefined</font> 
                                  for for<font face="Courier New, Courier, mono"> 
                                  RegExp.$1...RegExp.$9</font> or <font face="Courier New, Courier, mono">RegExp.lastParen</font>, 
                                  the results of the most-recent previous call 
                                  are not over-written with <font face="Courier New, Courier, mono">undefined</font>.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In src/lib/ecma/seregexp.c, function RegExp_ExecOrCallOrTest(), 
                                  the three calls to <font face="Courier New, Courier, mono">sePutUndefined(...)</font> 
                                  (at lines 623, 673, and 690) should be replaced 
                                  with <font face="Courier New, Courier, mono">seMustPutUndefined(...)</font>.</font></p>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="asrt1"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>array 
                                  sort return invalid when array.length==1</b><br>
                                  (for ISDK/C 5.00e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: If <font face="Courier New, Courier, mono">array.length==1</font>, 
                                  then <font face="Courier New, Courier, mono">array.sort()</font> 
                                  will return <font face="Courier New, Courier, mono">undefined</font>.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In src/lib/ecma/seobject.c, function Ecma_Array_sort(), 
                                  the code (near line 913) for &quot;&lt;=1&quot; 
                                  elements should be changed to:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( num_items <= 1 )
   {
      seAssign(se,SE_RETURN,SE_VALUE,SE_THIS,SE_VALUE);
      return;
   }</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="adcsi"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Allocation 
                                  error during compilation may leave some identifiers 
                                  locked</b><br>
                                  (for ISDK/C 5.00e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: If memory allocation fails during compilation, 
                                  it is possible for local identifiers to remain 
                                  locked or not immediately freed.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In src/core/loclfunc.c, function loclAddVarName(), 
                                  near line 303 -1 is being returned without calling 
                                  RemoveVarNameLock() to free the recent lock 
                                  on that varname. That code should instead be:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( new_items==NULL )
   {
      RemoveVarNameLock(name);
      return (uword16)(-1);
   }</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="ubbw"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>In 
                                  Unicode builds, size of Buffer and BLOb objects 
                                  is miscalculated</b><br>
                                  (for ISDK/C 5.00e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: When building with JSE_UNICODE, the size 
                                  of Buffer and BLOb objects is being doubled 
                                  erroneously. This can show up in basic BLOb 
                                  methods, or in conversion methods of functions 
                                  such as Clib.fwrite and SElib.dynamicLink.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In src/lib/common/seblob.c, function blobLength(), 
                                  at about line 586 the <font face="Courier New, Courier, mono">type&gt;=0</font> 
                                  case shoulod be reduced to this:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( type >= 0 )
   {
      return (SE_POINTER_UINDEX) type;
   }</font>
</pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="tzce"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Error 
                                  in timezone calculation for Windows CE</b><br>
                                  (for ISDK/C 5.00e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: Timezone offset from GMT is miscalculated 
                                  in the Date object in Windows CE.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Fix</b>: 
                                  In src/lib/ecma/sedate.c, function millisec_from_gmtime(), 
                                  the last line of the __JSE_WINCE__ section should 
                                  be removed. I.E., the following line should 
                                  be removed:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   JSE_FP_SUB_EQ(diff,JSE_FP_MUL(msPerSecond,\
                                 JSE_FP_MUL(SecondsPerMinute,MinutesPerHour)));</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="snnn"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>SE_NUM() 
                                  cannot accept negative values</b><br>
                                  (for ISDK/C 5.00e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: The manual implies that SE_NUM() can 
                                  accept any integer, but it really takes only 
                                  positive integers (type sememcount).</font></p>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="sfsonl"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>script 
                                  functions in shared objects are not locking 
                                  all data</b><br>
                                  (for ISDK/C 5.00e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: When a script function is being created 
                                  as a shared object via seShareReadObject(), 
                                  not all of its constants, strings, and varname 
                                  are being locked. This may lead to the data 
                                  becoming invalid after the garbage collector 
                                  runs. The most likely time this bug will become 
                                  a problem when a main thread loads a script 
                                  and then turns the global into a shared object 
                                  so that those script functions can be used by 
                                  all threads.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  moveFunctionToReadShared() in src/core/se500.c, 
                                  and localDelete() in src/core/loclfunc.c, should 
                                  be replaced by the code found at <a href="%3Cfont%20size=%222%22%20face=%22Verdana,%20Arial,%20Helvetica,%20sans-serif%22%3Eftp://ftp.nombas.com/pub/isdkeval/se500/funclock.txt%3C/font%3E">funclock.txt</a></font></p>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="vxmmc"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>compilation 
                                  errors for vxWorks and EPOC min-memory options</b><br>
                                  (for ISDK/C 5.00e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: vxWorks and Symbian compiler errors when 
                                  using JSE_MIN_MEMORY or the defaults asociated 
                                  with JSE_MIN_MEMORY (!JSE_INLINES, SEASSERT_TINY_VERSION).</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/core/seobject.h, at about line 307 (the 
                                  first line within the <font face="Courier New, Courier, mono">#if&nbsp;JSE_INLINES==0</font><font face="Verdana, Arial, Helvetica, sans-serif"> 
                                  section) add the following statement:</font></font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   struct Global_;</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">next 
                                  alter the SEASSERT macros in src/include/sedefopt.h. 
                                  Add (void) to the first macro at line 795 so 
                                  it reads </font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   #     define SEASSERT(condition) ((void)0)</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and 
                                  for the next SEASSERT macro, at line 798, also 
                                  add a (void) so it reads:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   #     define SEASSERT(condition)   \
         (void)((condition)?(1):seDbgAssert((int)__ASSERT_FILENO__,(int)__LINE__))</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="seinf"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>seInitializeObject() 
                                  helper function may not free object reference</b><br>
                                  (for ISDK/C 5.00e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: seInitializeObject() will leave an reference 
                                  allocated if not called from a wrapper or callback 
                                  function.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/misc/seapiext.c, function seInitializeObject(), 
                                  just before the return statement (at about line 
                                  620) add this statement:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   seFreeObject(se,globalObject);</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="dnpnrd"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>dot-named 
                                  parse not recognizing dynamic objects</b><br>
                                  (for ISDK/C 5.00e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: Our dot-named parser, used in code 
                                  such as '<font face="Courier New, Courier, mono">function 
                                  foo.goo()&nbsp;{&nbsp;}</font>', was not fully 
                                  recognizing dynamic objects in the name, directly 
                                  accessing the object's internal members rather 
                                  than going through the object's dynamic routines.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/core/varutil.c, function GetDotNamedVar(), 
                                  at about line 1801 this block of code:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   #        if JSE_DYNAMIC_CALLBACKS!=0
               if( SEOBJ_IS_DYNAMIC_PROP(call,hobj,put) )
               {
                  sevarPutValueEx(call,me,varname,tmp2,False);
                  STACK_POP;
               }
   #        endif</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">should 
                                  be replaces with this code:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   #        if JSE_DYNAMIC_CALLBACKS!=0
               if( SEOBJ_IS_DYNAMIC_PROP(call,hobj,put) )
                  sevarPutValueEx(call,me,varname,tmp2,False);
               else
   #        endif</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">next, 
                                  find this at about line 1784</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">         else if( (dotFound || FinalMustBeVObject) )
         {
            seobjGetMember(call,hobj,varname,tmp);</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and 
                                  replace with </font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">         else if( (dotFound || FinalMustBeVObject) )
         {
   #        if JSE_DYNAMIC_CALLBACKS!=0
            /* the call to get the member's value was already done in the if-statement
             * above.
             */
            if( !SEOBJ_IS_DYNAMIC_PROP(call,hobj,get) )
#           endif
               seobjGetMember(call,hobj,varname,tmp);</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
                                  lastly, find this line at about line 1764</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">         if( seobjGetMemberSlotNoExpand(call,hobj,varname)==sememcount_NOT_FOUND )</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and 
                                  replace with this block:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   #     if JSE_DYNAMIC_CALLBACKS!=0</font><font face="Courier New, Courier, mono" size="2">
         if( (SEOBJ_IS_DYNAMIC_PROP(call,hobj,get) &&
              sevarGetValue(call,me,varname,tmp,SE_DEFAULT)==FALSE) ||
             (!SEOBJ_IS_DYNAMIC_PROP(call,hobj,get) &&
              seobjGetMemberSlotNoExpand(call,hobj,varname)==sememcount_NOT_FOUND) )
   #     else
         if( seobjGetMemberSlotNoExpand(call,hobj,varname)==sememcount_NOT_FOUND )
   #     endif</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="nexnfd"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Number 
                                  toExponential() incorrect if fractionDigits 
                                  not specified</b><br>
                                  (for ISDK/C 5.00e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: <font face="Courier New, Courier, mono">Number.prototype.toExponential(fractionDigits)</font> 
                                  is treating <font face="Courier New, Courier, mono">fractionDigits</font> 
                                  as <font face="Courier New, Courier, mono">0</font> 
                                  if unspecified. Instead <font face="Courier New, Courier, mono">toExponential()</font> 
                                  should use as many digits as necessary.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/lib/ecma/seobject.c, function Ecma_Number_toSomething(), 
                                  at about line 1825 a block of code should be 
                                  added after <font face="Courier New, Courier, mono">f&nbsp;=&nbsp;0;</font> 
                                  as follows:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   f = 0;
   if ( _toExponential == toWhat )
   {
      sechar buffer[ECMA_NUMTOSTRING_MAX];
      secharptr cptr = (secharptr)buffer;
      /* convert using standard tostring rules */
      EcmaNumberToString(se,buffer,x);
      /* from buffer count how many digits are needed after the decimal,
       * that's all digits minus 1
       */
      if ( SECHARPTR_GETC(cptr) == '-' ) SECHARPTR_INC(cptr);/* skip any negative */
      for ( ; ; )
      {
         sechar c = SECHARPTR_GETC(cptr);
         SECHARPTR_INC(cptr);
         if ( '0' <= c  && c <= '9' )
            f++;
         else if ( '.' != c )
            break;
      }
      f--;
   }</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="ntpi"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Number 
                                  toPrecision() incorrect</b><br>
                                  (for ISDK/C 5.00e) Updated Dec 11, 2002</font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: <font face="Courier New, Courier, mono">Number.prototype.toPrecision(precision)</font> 
                                  is converting <font face="Courier New, Courier, mono">precision</font> 
                                  digits beyond the decimal, when it should be 
                                  converting <font face="Courier New, Courier, mono">precision-1</font> 
                                  digits. </font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/lib/ecma/seobject.c, function Ecma_Number_toSomething(), 
                                  at about line 1868 the entire toPrecision block 
                                  should be replaced with this code:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   else
   {
      senumber abs_x = JSE_FP_FABS(se,x);</font>

      <font face="Courier New, Courier, mono" size="2">SEASSERT( _toPrecision == toWhat );
      /* field width must be an int */
      /* if x&gt;=pow(10,-6) &amp;&amp; x&lt;pow(10,f), use fixed-point notation
       * otherwise, use exponential notation */
      if( JSE_FP_LTE(JSE_FP_POW(se,JSE_FP_CAST_FROM_SLONG(10),JSE_FP_CAST_FROM_SLONG(-6)),abs_x)
       &amp;&amp; JSE_FP_LT(abs_x, JSE_FP_POW(se,JSE_FP_CAST_FROM_SLONG(10),JSE_FP_CAST_FROM_SLONG(f))) )
      {
         senumber f10 = JSE_FP_LOG10(se,abs_x);
         sint d10 = (sint)JSE_FP_CAST_TO_SLONG(f10);
         f -= d10;
         if ( !jseIsNegative(f10) )
            f--;
         JSE_FP_DTOSTR(se,x,(int)f,buffer,UNISTR(&quot;f&quot;));
      }
      else
      {
         JSE_FP_DTOSTR(se,x,(int)f-1,buffer,UNISTR(&quot;e&quot;));
      }
   }</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="dudgv"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>discrepencies 
                                  using delete on global variables</b><br>
                                  (for ISDK/C 5.00e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: When <font face="Courier New, Courier, mono">delete</font> 
                                  is used on global variables that were not created 
                                  with the <font face="Courier New, Courier, mono">var</font> 
                                  keyword, the variables are not being deleted 
                                  or the wrong boolean is being returned.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/core/expressn.c, function secompileOperatorExpression() 
                                  under <font face="Courier New, Courier, mono">case&nbsp;seTokDelete:</font>, 
                                  replace this else block at about line 3011:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   else
   {
      /* not a reference, return 'true', 11.4.1 */
      ...
   }</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">with 
                                  this code:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   else if( This-&gt;expr.type==EXPR_GLOBAL )
   {
      secompileAddItem0(This,sePushGlobalObject);
      secompileAddItem1(This,seDeleteMember,This-&gt;expr.name);
   }
   else
   {
      /* not a reference, return 'true', 11.4.1 */
      secompileDiscard(This);
      secompileAddItem0(This,sePushTrue);
   }</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Then 
                                  in src/core/call.c, callFunction(), find this 
                                  comment:</font></p>
                                <p></p>
                                <pre>   <font face="Courier New, Courier, mono" size="2">/* no need to set the attributes directly, the variable object
    * cannot be referenced by the script, which makes it
    * effectively 'DontDelete'.
    */</font></pre>
                                <p> <font face="Verdana, Arial, Helvetica, sans-serif" size="2">which 
                                  is no longer true. Replace it with:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   seobjSetAttributes(call,wLoc-&gt;data.ref_val.hBase,
                      wLoc-&gt;data.ref_val.reference,
                      SE_DONTDELETE);</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and 
                                  in src/core/varutil.c, function seobjDeleteMember(), 
                                  at about line 1846 the case with the comment 
                                  </font></p>
                                <pre><font face="Verdana, Arial, Helvetica, sans-serif" size="2">   </font><font face="Courier New, Courier, mono" size="2">/* member doesn't exist; don't delete what does not exist */</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">should 
                                  be changed to <font face="Courier New, Courier, mono">return 
                                  True;</font></font></p>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="nfpspf"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>non-floating-point 
                                  version of sprintf functions using %x or %X 
                                  may overwrite memory</b><br>
                                  (for ISDK/C 5.00e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: If JSE_FLOATING_POINT is not defined (i.e. 
                                  integer only), and <font face="Courier New, Courier, mono">%x</font> 
                                  or <font face="Courier New, Courier, mono">%X</font> 
                                  is used in the formatting string of any in any 
                                  of the sprintf functions (e.g. <font face="Courier New, Courier, mono">se_vsprintf</font>, 
                                  <font face="Courier New, Courier, mono">sprintf_sechar</font>, 
                                  etc...), then memory may be overwritten at the 
                                  end of the string buffer.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/misc/utilstr.c, function se_vsprintf, 
                                  in <font face="Courier New, Courier, mono">case&nbsp;'X':</font> 
                                  at about line 750 this statement::</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   </font>strcat_sechar(buf,c);
</pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">should 
                                  be changed to:</font> </p>
                                <pre><font face="Courier New, Courier, mono" size="2">   strcpy_sechar(buf,c);</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="bples"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Blob.put() 
                                  loses existing settings for Buffer object</b><br>
                                  (for ISDK/C 5.00e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: If Blob.put() is called to alter an exsting 
                                  buffer, then a new buffer is created that loses 
                                  all non-default information of the old buffer, 
                                  such as .unicode or .bigEndian setting, or any 
                                  additional properties that have been added to 
                                  that buffer object.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/lib/selib/blobobj.c, add this new function 
                                  near the top of the file:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   #if defined(JSE_SELIB_BLOB_PUT) || defined(JSE_SELIB_BLOB_SIZE)
      static void JSE_NEAR_CALL
   replaceSeBufferArg0(secontext se,void *new_data,SE_POINTER_UINDEX new_data_length)
   {
      struct seMemberDesc mem;
      seobject oldb;

      </font><font face="Courier New, Courier, mono" size="2">seStoreMember(&amp;mem,SE_INDEX(0));

      </font><font face="Courier New, Courier, mono" size="2">oldb = isBufferType(se,SE_ARGS,&amp;mem)
           ? seGetObject(se,SE_ARGS,SE_INDEX(0)) : NULL ;

      </font><font face="Courier New, Courier, mono" size="2">sePutBuffer(se,SE_ARGS,SE_INDEX(0),new_data,new_data_length);

      if ( NULL != oldb )
      {
         seobject newb;
         sestring size_str, mem_str;
         sememcount objcount, i;

         </font><font face="Courier New, Courier, mono" size="2">/* copy everything from the old buffer, except size */
         size_str = seInternalizeString(se,UNISTR(&quot;size&quot;),SE_IS_STRLEN);
         newb = seGetObject(se,SE_ARGS,SE_INDEX(0));
         objcount = seObjectMemberCountDirect(se,oldb);
         for ( i = 0; i &lt; objcount; i++ )
         {
            sememcount len;
            seconstcharptr name;
               name = seObjectMemberName(se,oldb,SE_INDEX(i),&amp;len);
            mem_str = seInternalizeString(se,name,len);
               if ( mem_str != size_str )
            {
               seAssign(se,newb,SE_STR(mem_str),oldb,SE_INDEX(i));
            }
               seFreeInternalString(se,mem_str);
         }
         seFreeInternalString(se,size_str);
      }
   }
   #endif /* #if defined(JSE_SELIB_BLOB_PUT) || defined(JSE_SELIB_BLOB_SIZE) */</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and 
                                  in both the Blob_put() and Blob_size() functions 
                                  replace the calls to</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   sePutBuffer(se,SE_ARGS,SE_INDEX(0),_ptr_,_len_)</font></pre>
                                <pre><font face="Verdana, Arial, Helvetica, sans-serif" size="2">with</font></pre>
                                <pre><font face="Courier New, Courier, mono" size="2">   replaceSeBufferArg0(se,_ptr_,_len_)</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="srnin"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>string 
                                  replace, if no matches found, is not returning 
                                  the initial string</b><br>
                                  (for ISDK/C 5.00e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: If String.prototype.replace() is called 
                                  and no replacement is made, then the original 
                                  string should be returned.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/lib/ecma/seobject.c, function string_which_search_helper(), 
                                  at about line 3728 is a comment &quot;<font face="Courier New, Courier, mono">...could 
                                  be no match...</font>&quot; After the <font face="Courier New, Courier, mono">seAssignConvert()</font> 
                                  call just below that comment this function should 
                                  return. With the <font face="Courier New, Courier, mono">return</font> 
                                  statement that block becomes:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   /* could be no match, if replace, return the string from thisVar */
   if( seGetType(se,SE_RETURN,SE_VALUE) == SE_TYPE_NULL &&
       mode == SE_REPLACE_MODE )
   {
      seAssignConvert(se,SE_RETURN,SE_VALUE,SE_THIS,SE_VALUE,SE_TOSTRING);
      return;
   }</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="aerreb"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>allocation 
                                  error in Unicode version of EvalBox demo</b><br>
                                  (for ISDK/C 5.00e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: Memory corruption can occur if a string 
                                  with newlines is written to the output window 
                                  in Unicode versions of the EvalBox demo.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In samples/evalbox/evalbox.cpp, at the first 
                                  line of WriteToStdOutWindow (about line 456) 
                                  <font face="Courier New, Courier, mono">sizeof(sechar)</font> 
                                  should be multiplied by length, not added to 
                                  length. I.E. This line</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   secharptr text = (secharptr)seGCMalloc(se,sizeof(sechar)\
                                            +(2*strlen_sechar(InitText))+1/*not null*/);</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">should 
                                  be this:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   secharptr text = (secharptr)seGCMalloc(se,sizeof(sechar)\
   </font><font face="Courier New, Courier, mono" size="2">                                         *(2*strlen_sechar(InitText))+1/*not null*/);</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="ompfi"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>object-members 
                                  passed as parameters to functions passed incorrectly</b><br>
                                  (for ISDK/C 5.00e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: When a script passes an object member to 
                                  a function, the function may receive the wrong 
                                  parameter. For example, this code will treat 
                                  <font face="Courier New, Courier, mono">arguments[0]</font> 
                                  incorrectly:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   function foo(p1)
   {
      writeln(arguments[0]);
   }</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/core/secode.c, function do_op_member(), 
                                  at about line 267 is an if statement following 
                                  a comment about &quot;Can't allow 'doubly-indirect' 
                                  things...&quot;. And else clause should be added 
                                  after that if statement so the entire block 
                                  becomes this code:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( !seobjGetChildMember(call,SEVAR_GET_OBJECT(wObjVar),mem,tmp)
    || SEVAR_GET_TYPE(tmp)&lt;VReference )
   {
      SEVAR_INIT_REFERENCE(wObjVar,SEVAR_GET_OBJECT(wObjVar),mem);
   }
   else
   {
      SEVAR_COPY(wObjVar,tmp);
   }</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="cemc"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>compilation 
                                  error if JSE_MUTLIPLE_GLOBAL==1 &amp;&amp; JSE_COMPACT_LIBFUNCS==0</b><br>
                                  (for ISDK/C 5.00e) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: If jseopt.h defines JSE_MULTILE_GLOBAL 
                                  but does not define JSE_COMPACT_LIBFUNCS, then 
                                  there is a coompilation error.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/core/util.c, function lib500New(), at 
                                  about line 2470 the conditional::</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   #     if JSE_MULTIPLE_GLOBAL==1;</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">should 
                                  be:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   #     if JSE_MULTIPLE_GLOBAL==1 &amp;&amp; JSE_COMPACT_LIBFUNCS==1;</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="sessce"></a></font></p>
                              <ul>
                                <li><b><font face="Verdana, Arial, Helvetica, sans-serif" size="2">seEval(..SE_START...) 
                                  will grow stack if compilation error</font></b><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><br>
                                  (for ISDK/C 5.00e) Updated January 6, 2003</font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: If there are compilation errors on 
                                  a script in seEval() when using the SE_START 
                                  flag, then a value will be left on the VM stack. 
                                  If !NDEBUG then an SEASSERT() will be triggered, 
                                  otherwise the stack will grow by one value each 
                                  time this happens.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/core/se500.c, near the bottom of function 
                                  seEval(), at about line 5991, this line:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( (flags&SE_START)==0 )</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">should 
                                  be replaced by this line:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( !ret || (flags&SE_START)==0 )</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Note</b>: 
                                  This errata item was previously listed with 
                                  an inavlid semi-colon at the end of each <font face="Courier New, Courier, mono">if</font> 
                                  line above. See the errata on that error here: 
                                  <a href="#sesscetypo">Typo in seEval() errata</a> 
                                  </font></p>
                                <hr width="90%">
                              </blockquote>
                              <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>for 
                                5.00d --</b></font> <font face="Verdana, Arial, Helvetica, sans-serif" size="2">(may 
                                apply to earlier version)</font></p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="aomp"></a></font></p>
                              <ul>
                                <li><b><font face="Verdana, Arial, Helvetica, sans-serif" size="2">potential 
                                  crash with arguments object when receiving many 
                                  parameters</font></b><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><br>
                                  (for ISDK/C 5.00d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: possible memory leak and/or crashes with 
                                  arguments object in certain configurations.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/core/garbage.c, function seobj_new(), 
                                  replace this line (at about line 448):</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   ResizeObjectMembers(call,hobj,wanted);</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">with 
                                  this code</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   wSEVar tmp = STACK_PUSH;
   SEVAR_INIT_NEW_OBJECT(tmp,hobj);
   ResizeObjectMembers(call,hobj,wanted);
   STACK_POP;</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="srcnm"></a></font></p>
                              <ul>
                                <li><b><font face="Verdana, Arial, Helvetica, sans-serif" size="2">string.replace 
                                  crashes or consumes all memory when replacing 
                                  with null string</font></b><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><br>
                                  (for ISDK/C 5.00d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: When using string.replace() to delete a 
                                  character from a string, by replacing it with 
                                  &quot;&quot;, the call may crash or use too 
                                  much memory.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/lib/ecma/seobject.c, function add_string(), 
                                  add this statement as the second line of the 
                                  function (at about line 3285):</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if ( !add_len ) return;</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="pxnt"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>sePutXXX() 
                                  not returning TRUE as documented</b><br>
                                  (for ISDK/C 5.00d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: sePutXXX is often not returning true 
                                  on member creation.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  in src/core/se500.c, function sePutMember(), 
                                  locate this section in <font face="Courier New, Courier, mono">case&nbsp;SE_STOCK_TYPE:</font> 
                                  (at about line is currently (at about line 2734):</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( flags &amp; SE_GF_DIRECT )
   {
      /* Put the member directly, bypass dynamic calls */</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and 
                                  just before those lines add this line:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   ret = (seobjGetMemberSlot(call,obj,name)==sememcount_NOT_FOUND);</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="sgido"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>seGetXXX() 
                                  functions ignore dynamic object's hasProp when 
                                  retrieving an object value</b><br>
                                  (for ISDK/C 5.00d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: seGetXXX ignores a dynamic object's 
                                  hasProp when trying to get an object member's 
                                  value.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  in src/core/se500.c, function seGetMember(), 
                                  the <font face="Courier New, Courier, mono">else</font> 
                                  block under <font face="Courier New, Courier, mono">case&nbsp;SE_STOCK_TYPE:</font> 
                                  is currently (at about line 2232):</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   wSEVar tmpobj = STACK_PUSH;
   SEVAR_INIT_OBJECT(tmpobj,obj);

   </font><font face="Courier New, Courier, mono" size="2">ret = sevarGetValue(call,tmpobj,name,&amp;(call-&gt;save.api_temp),
                       (flags&amp;SE_GF_DIRECT)?(GV_NO_PROTOTYPE|GV_NO_DYNAMIC):
                       GV_DEFAULT);
   STACK_POP;</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">but 
                                  should be changed to</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   wSEVar tmpobj = STACK_PUSH;

</font><font face="Courier New, Courier, mono" size="2">   #if (JSE_DYNAMIC_CALLBACKS==1) &amp;&amp; JSE_EXECUTE_SEGMENT==1
   ret = TRUE;
   SEVAR_INIT_UNDEFINED(tmpobj);
   /* If the object says it does not have the property,
    * believe it. Return FALSE with the undefined value.
    */
   if( (flags&amp;SE_GF_DIRECT)==0 &amp;&amp;
       SEOBJ_IS_DYNAMIC_PROP(call,obj,hasProp) )
   {
      if( seobjCallDynamicProperty(call,obj,SE_HASPROP_CALLBACK,
                                   name,NULL,tmpobj) )
      {
         ret = (sebool)JSE_FP_CAST_TO_SLONG(SEVAR_GET_NUMBER_VALUE(tmpobj));

        </font><font face="Courier New, Courier, mono" size="2"> if( ret==FALSE )
         {
            SEVAR_INIT_UNDEFINED(&amp;(call-&gt;save.api_temp));
         }
      }
   }

   </font><font face="Courier New, Courier, mono" size="2">if( ret )
   {
   #endif

   </font><font face="Courier New, Courier, mono" size="2">SEVAR_INIT_OBJECT(tmpobj,obj);
   ret = sevarGetValue(call,tmpobj,name,&amp;(call-&gt;save.api_temp),
                       (flags&amp;SE_GF_DIRECT)?(GV_NO_PROTOTYPE|GV_NO_DYNAMIC):
                        GV_DEFAULT);</font><font face="Courier New, Courier, mono" size="2">

   # if (JSE_DYNAMIC_CALLBACKS==1) &amp;&amp; JSE_EXECUTE_SEGMENT==1
   }
   # endif

   </font><font face="Courier New, Courier, mono" size="2">STACK_POP;</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="clfns"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>JSE_COMPACT_LIBFUNCS 
                                  not saving any memory</b><br>
                                  (for ISDK/C 5.00d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: Our internal optimization to keep wrapper 
                                  functions in a compact form until first accessed 
                                  was being undone, causing more memory to be 
                                  used than is needed.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  in src/core/varutil.c, find the function GetDotNamedVar 
                                  and look for this line (at about line 1758):</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( !seobjGetMember(call,hobj,varname,tmp) )</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">change 
                                  that to</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( seobjGetMemberSlotNoExpand(call,hobj,varname)==sememcount_NOT_FOUND )</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">then 
                                  find (at about line 1778):</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   else if( (dotFound || FinalMustBeVObject)
         &amp;&amp; SEVAR_GET_TYPE(tmp)!=VObject )
   {</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and 
                                  replace with:</font></p>
                                <p></p>
                                <pre>   <font face="Courier New, Courier, mono" size="2">else if( (dotFound || FinalMustBeVObject) )
   {
      seobjGetMember(call,hobj,varname,tmp);
      if( SEVAR_GET_TYPE(tmp)!=VObject )
      {</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">this 
                                  will have made the code in the if-block now 
                                  inside two if-blocks, so indent that code and 
                                  put an extra '}' where the original if-block 
                                  ended.</font></p>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="ronf"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>some 
                                  objects made read-only with seShareReadObject() 
                                  may never be freed</b><br>
                                  (for ISDK/C 5.00d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: Some objects made read-sharable are 
                                  not freed.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/core/se500.c, function moveObjectToReadShared, 
                                  remove this block (at about line 6454) so that 
                                  only the existing <font face="Courier New, Courier, mono">else</font> 
                                  block remains:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   </font>if( call-&gt;Global-&gt;all_hobjs==hobj )
   {
      call-&gt;Global-&gt;all_hobjs = SEOBJECT_GET(call,hobj,hNext);
   }
   else</pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="sgaae"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>seGetAttribs 
                                  may cause asser error, or return wrong value</b><br>
                                  (for ISDK/C 5.00d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: seGetAttribs will not work correctly 
                                  under certain circumstances.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/core/se500.c, function seGetArribs, replace 
                                  these lines (at about line 3527):</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   assert( SEVAR_GET_TYPE(&amp;(call-&gt;save.api_temp))==VReference );

   </font>slot = seobjGetMemberSlot(call,call-&gt;save.api_temp.data.ref_val.hBase,
                             call-&gt;save.api_temp.data.ref_val.reference);</pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">and 
                                  replace it with:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   if( SEVAR_GET_TYPE(&amp;(call-&gt;save.api_temp))==VReference )
   {
      slot = seobjGetMemberSlot(call,call-&gt;save.api_temp.data.ref_val.hBase,
                                call-&gt;save.api_temp.data.ref_val.reference);
   }
   else
   {
      assert( SEVAR_GET_TYPE(&amp;(call-&gt;save.api_temp))==VReferenceIndex );
      slot = (sememcount)call-&gt;save.api_temp.data.ref_val.reference;
   }</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="jclmc"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>JSE_COMPACT_LIBFUNCS 
                                  may crash while expanding used functions</b><br>
                                  (for ISDK/C 5.00d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: Extensive testing shows that in a worst 
                                  case, a crash may occur while expanding functions 
                                  added with JSE_COMPACT_LIBFUNCS in effect.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/core/var.c, function seobjGetIndexMember, 
                                  find (at about line 533):</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   #  if JSE_COMPACT_LIBFUNCS==1
      if( type==VLibFunc )
      {
         struct seLibFunc libFunc = loc-&gt;data.libfunc_val;
         /* libfuncexpand must write to member, so free it here first */
         libfuncExpand(call,hobj,member,libFunc,type);
      }
   #  else</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">and 
                                  replace it with:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   #  if JSE_COMPACT_LIBFUNCS==1
      if( type==VLibFunc )
      {
         struct seLibFunc libFunc = loc-&gt;data.libfunc_val;
         /* libfuncexpand must write to member, so free it here first */
         libfuncExpand(call,hobj,member,libFunc,type);
         mems = SEOBJECT_GET(call,hobj,hsemembers);
         loc = &amp;SEMEMBERS_GET(call,mems,member,value);
      }
   #  else</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="scflp"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>seCreateFiber 
                                  loses performances gains by reinitializing all 
                                  libraries</b><br>
                                  (for ISDK/C 5.00d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: seCreateFiber is reinitializing the 
                                  function libraries, when they should be shared. 
                                  Because it reinitialized them in the same global, 
                                  it just overwrote the existing libraries resulting 
                                  in a performance decrease to 'redo' already-done 
                                  work.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:in 
                                  src/core/se500.c, the function seCreateFiber, 
                                  find this line (at about line 1130):</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   call->CallSettings = SE_EXIT_LEVEL|SE_NEW_DEFINES|SE_NO_INHERIT;</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">and 
                                  replace it with:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   call->CallSettings = SE_EXIT_LEVEL|SE_NEW_DEFINES|SE_NO_INHERIT|SE_NO_LIBRARIES;</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">in 
                                  src/core/call.c, the function callDelete, find 
                                  the first incidence of this block (at about 
                                  line this if statement:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   if( ((call->CallSettings & SE_NO_INHERIT) &&
       !(call->CallSettings & SE_NO_LIBRARIES)) ||
       call->prev == NULL )</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">and 
                                  replace with:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   if( ((call->CallSettings & SE_NO_INHERIT) &&
        !(call->CallSettings & SE_NO_LIBRARIES)) ||
       (call->prev==NULL
   #   if JSE_TASK_SCHEDULER==1
        && fiberSibling==NULL
   #   endif
        ) )</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="fpcne"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>function.protoype.constructor 
                                  does not exist for all objects</b><br>
                                  (for ISDK/C 5.00d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: Script functions, which may be called 
                                  with the <font face="Courier New, Courier, mono">new</font> 
                                  operator, do not automatically have a <font face="Courier New, Courier, mono">prototype.constructor</font> 
                                  property, and so object instances created with 
                                  new may not inherit a <font face="Courier New, Courier, mono">.constructor</font> 
                                  property. This auto-constructor behavior is 
                                  not part of the ECMAScript standard (according 
                                  to our interpretation) but it is described in 
                                  most books about ECMAScript and in most browsers.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  Implementating this behavior, without adversely 
                                  affecting performance or memory use, required 
                                  too many changes to fit into an errata. The 
                                  new code is in the 5.00e release with the SE_AUTO_CONSTRUCTOR 
                                  compile-time option.</font></p>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="cfrfl"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>seCreateFiber 
                                  reinitializes function libraries</b><br>
                                  (for ISDK/C 5.00d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: seCreateFiber is reinitializing the 
                                  function libraries, when they should be shared. 
                                  Because it reinitialized them in the same global, 
                                  it just overwrote the existing libraries resulting 
                                  in a performance decrease to 'redo' already-done 
                                  work.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  in src/core/se500.c, the function seCreateFiber, 
                                  find this line at about 1130:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   call->CallSettings = SE_EXIT_LEVEL|SE_NEW_DEFINES|SE_NO_INHERIT;</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and 
                                  replace with this:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   call->CallSettings = SE_EXIT_LEVEL|SE_NEW_DEFINES|SE_NO_INHERIT|SE_NO_LIBRARIES;</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
                                  and in src/core/call.c, function callDelete(), 
                                  at at about line 1906, replace this block:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( ((call->CallSettings & SE_NO_INHERIT) &&
</font><font face="Courier New, Courier, mono" size="2">       !(call->CallSettings & SE_NO_LIBRARIES)) ||
</font><font face="Courier New, Courier, mono" size="2">       call->prev == NULL )</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">with 
                                  this</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   </font><font face="Courier New, Courier, mono" size="2">if( ((call->CallSettings & SE_NO_INHERIT) &&
      </font><font face="Courier New, Courier, mono" size="2"> !(call->CallSettings & SE_NO_LIBRARIES)) ||
       (call->prev==NULL
   #   if JSE_TASK_SCHEDULER==1
       </font><font face="Courier New, Courier, mono" size="2">&& fiberSibling==NULL
   </font><font face="Courier New, Courier, mono" size="2">#   endif
     </font><font face="Courier New, Courier, mono" size="2">) )</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="eldv"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Errors 
                                  with extremely large Date values</b><br>
                                  (for ISDK/C 5.00d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: Date values larger than the maximum 
                                  allowable to new Date() can cause nearly-infinite 
                                  loops.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/lib/ecma/sedate.c, function do_date_construction(), 
                                  near line 1150 find this block:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   else
   {
      value = seGetNumber(se,SE_ARGS,SE_INDEX(0));
   }</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and 
                                  replace with this:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   else
   {
      value = seGetNumber(se,SE_ARGS,SE_INDEX(0));
      value = TimeClip(se,value);
   }</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="dtvc"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>default_this 
                                  parameter ignored in seEval(...SE_CONSTRUCTOR...)</b><br>
                                  (for ISDK/C 5.00d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: Using the SE_CONSTRUCTOR option of 
                                  seEval()ing a function, if you set a default_this 
                                  in the params structure, it is ignored.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/core/se500.c, seEvalFunc(), find this 
                                  at about line 5042:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( flags & SE_CONSTRUCTOR )
   {
      wSEVar tmp;

      sevarInitNewObject(call,this_var,func_var);</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and 
                                  replace with this:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( flags & SE_CONSTRUCTOR )
   {
      wSEVar tmp;

      if( params!=NULL && params->default_this!=NULL )
      {
         SEVAR_INIT_OBJECT(this_var,params->default_this->obj);
      }
      else
      {
         sevarInitNewObject(call,this_var,func_var);
      }</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="pphliv"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>during 
                                  script compilation peephole optimizer accesses 
                                  invalid memory</b><br>
                                  (for ISDK/C 5.00d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: The peephole optimizer can access invalid 
                                  memory during script compilation. In rare circumstance 
                                  this may cause a crash.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/core/expressn.c, function secompileDelete, 
                                  at about line 1240 change this statement:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   memmove( sptr, sptr+size, elementMoveCount * sizeof(secodeelem) );</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">to</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   memmove( This->opcodes+offsetTo, This->opcodes+offsetFrom,
</font><font face="Courier New, Courier, mono" size="2">            elementMoveCount * sizeof(secodeelem) );</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">A 
                                  few lines further down, in the function secompilePeephole(), 
                                  at about line 1277 add these local variables:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   uint i, nxti;</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">and 
                                  then at about line 1287 replace this block</font></p>
                                <pre>   /* The array can move and its size can change, so need
    * to recalculate ending point each iteration.
    */
   for( sptr = This->opcodes; sptr < (beyond_end = This->opcodes + This->opcodesUsed); )
   {</pre>
                                <p><font face="Courier New, Courier, mono" size="2"> 
                                  </font><font size="2" face="Verdana, Arial, Helvetica, sans-serif">with 
                                  </font><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  this block</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   /* The array can move and its size can change, so need
    * to recalculate ending point each iteration.
    */
   for( i = 0; i<this->opcodesUsed; )
   {
      sptr = This->opcodes + i;
      beyond_end = This->opcodes + This->opcodesUsed;
      nxti = i+1+SECODE_DATUM_SIZE(*sptr);</font></pre>
                                <p><font face="Courier New, Courier, mono" size="2"> 
                                  </font><font size="2" face="Verdana, Arial, Helvetica, sans-serif">and 
                                  later in the same function, at about line 1344, 
                                  is an secompileDelete statement followed by 
                                  a reference to SE_GLOBAL_NOTDIRECTXLAT. Insert 
                                  a line between those two statement so it now 
                                  reads:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( !secompileDelete(This,sptr,&targetted,-change) )
      break;
   sptr = This->opcodes + i;
   if ( SE_GLOBAL_NOTDIRECTXLAT <= c )</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">and 
                                  finally, in this same function (at about line 
                                  1661) replace this line</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   sptr = nxt;</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">with 
                                  this line</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   i = nxti;</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="mothra"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>sedbc 
                                  bugs with long binary data</b><br>
                                  (for ISDK/C 5.00d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: SEDBC can crash when reading from or 
                                  writing to database columns representing any 
                                  of the large binary data types.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/lib/sedbc/jse_rfx.c, function jseFieldExchange_LongString(), 
                                  case rf_value, at about line 2393 is a call 
                                  to SQLBindParameter passing the 8th paramater 
                                  as &quot;<font face="Courier New, Courier, mono">&amp;value</font>&quot;. 
                                  That parameter should be &quot;<font face="Courier New, Courier, mono">value</font>&quot;. 
                                  (I.E. <font face="Courier New, Courier, mono">value</font> 
                                  instead of the address of <font face="Courier New, Courier, mono">value</font>.) 
                                  And in src/lib/sedbc/obj_oper.c, function LongBinaryToBuffer(), 
                                  at about line 118 is a comparison on whether 
                                  allocation succeed that is backwards. The line</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( pWritableBuffer )</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">should 
                                  be changed to</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( !pWritableBuffer )</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="vsgax"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>virtual-stack 
                                  growth if retrieving values after an exception</b><br>
                                  (for ISDK/C 5.00d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: If an exception is generated during 
                                  a call to the SE API, items may be left on the 
                                  script stack. This is not likely to cause a 
                                  problem in a run-time system, but in debug mode 
                                  will cause the SE_API_RETURN() macro to emit 
                                  a &quot;stack growth&quot; assertion.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/core/var.h, in the macros for SEVAR_DEREFERENCE, 
                                  are two lines (lines 399 419) like this::</font></p>
                                <p></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( !CALL_QUIT(c) ) STACK_POP;                 \</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">in 
                                  both cases the CALL_QUIT() test should be removed, 
                                  so they both become:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   STACK_POP;                                     \</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="dgnhp"></a></font></p>
                              <ul>
                                <li><b><font face="Verdana, Arial, Helvetica, sans-serif" size="2">dynamic 
                                  get is not being called if hasProp callback 
                                  is NULL</font></b><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><br>
                                  (for ISDK/C 5.00d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: If an object has dynamic callbacks 
                                  via seSetCallbacks, but does not implement a 
                                  hasProp callback, then the get callback should 
                                  be called to determine if the object has the 
                                  given property. This is not happening in 5.00d.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  in src/core/varutil.c, the function seobjHasProperty, 
                                  near the top (at about line 2492) is:</font></p>
                                <p></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( SEOBJ_IS_DYNAMIC_PROP(call,hobj,hasProp) )</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">replace 
                                  with:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( SEOBJ_IS_DYNAMIC_PROP(call,hobj,hasProp)
    || SEOBJ_IS_DYNAMIC_PROP(call,hobj,get) )</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
                                  and then a few lines down (at about line 2500) 
                                  immediately after this comment:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   /* Make sure that we initialize it in case GC happens */</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
                                  add these lines: </font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( !SEOBJ_IS_DYNAMIC_PROP(call,hobj,hasProp) )
      handled = FALSE;
   else</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="ssres"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>string.split() 
                                  incorrect if regular expression used as separator</b><br>
                                  (for ISDK/C 5.00d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: String.prototype.split(separator) returns 
                                  the wrong results when separator is a regular 
                                  expression and does not match the first character 
                                  of the string.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/lib/ecma.c, function Ecma_String_split(), 
                                  at about line 2840 (just after the second call 
                                  to SplitMatch) this statement:</font></p>
                                <p></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( z!=NULL );</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">should 
                                  be changed to:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( z!=NULL && (!R || seGetLong(se,z,SE_STOCK(index))==0) );</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="vsvn7f"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>very 
                                  short variable names incorrect if character 
                                  &gt; 0x7f</b><br>
                                  (for ISDK/C 5.00d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: If a variable name or identifier is 3 characters 
                                  or less, and any of the characters is a value 
                                  between 0x7f and 0xff (inclusive) (e.g. foo[&quot;\xb9&quot;]) 
                                  it will be converted incorrectly, causing an 
                                  assert() or invalid program excecution.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/core/util.c, in the function CreateVarName, 
                                  at about line 393 this statement:</font></p>
                                <p></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   ret |= ((uword32)c) << shift;</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">should 
                                  be changed to:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   ret |= ((uword32)(usechar)c) << shift;</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="csecs"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Clib.system() 
                                  does not return exit code on Solaris</b><br>
                                  (for ISDK/C 5.00d) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: Solaris Clib.system doesn't return 
                                  exit code of child properly.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/lib/clib/sestdlib.c, the function Clib_system, 
                                  at the end is this block:</font></p>
                                <p></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   #  else
      s</font><font face="Courier New, Courier, mono" size="2">ePutNumber(se,SE_RETURN,SE_VALUE,system_sechar(command));
</font><font face="Courier New, Courier, mono" size="2">   #  endif</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">replace 
                                  with:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   #  else
      sePutNumber(se,SE_RETURN,SE_VALUE,system_sechar(command));
</font>
<font face="Courier New, Courier, mono" size="2">   #  ifdef __sun__
         sePutNumber(se,SE_RETURN,SE_VALUE,
                     WEXITSTATUS(seGetLong(se,SE_RETURN,SE_VALUE)));
   #  endif
   #  endif</font></pre>
                              </blockquote>
                              <hr width="90%">
                              <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>for 
                                5.00c --</b></font> <font face="Verdana, Arial, Helvetica, sans-serif" size="2">(may 
                                apply to earlier version)</font></p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="m1"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>invalid 
                                  getArrayLength() results if no .length member</b><br>
                                  (for ISDK/C 5.00c) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: On some systems, getArrayLength() returns 
                                  2+ billion for the length on objects that do 
                                  not have a LENGTH member.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  src/lib/lang/selngmsc.c, Lang_getArrayLength() 
                                  function, find:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   maxIndex = max((sememcount)seGetLong(se,obj,SE_STOCK(length)),maxIndex);</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and 
                                  add before it:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( seExists(se,obj,SE_STOCK(length)) )</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="m2"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>SElib.interpret() 
                                  with no flags turns on all flags</b><br>
                                  (for ISDK/C 5.00c) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: Not passing the flags argument to SElib.interpret 
                                  can turn on all the flags rather than turning 
                                  on none.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  src/lib/selib/selibmsc.c, SELib_interpret function, 
                                  at the beginning is:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( argc > 0 )
      flags = seGetInteger(se,SE_ARGS,SE_INDEX(1));</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">change 
                                  that to (just the 0 changed to a 1):</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( argc > 1 )
      flags = seGetInteger(se,SE_ARGS,SE_INDEX(1));</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="m3"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>Unix 
                                  SElib.directory() function is broken</b><br>
                                  (for ISDK/C 5.00c) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: Unix SElib.directory() function is 
                                  broken.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  src/lib/selib/sedir.c, AddToDirectoryStructure 
                                  function search and find:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   sePutObject(se,StrVarArray,SE_INDEX(Total++),elem);</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and 
                                  replace with:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   sePutObject(se,StrVarArray,SE_NUM(Total++),elem);</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="m4"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>On 
                                  Unix, some library functions mis-convert NaN 
                                  and omitted arguments</b></font><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><br>
                                  (for ISDK/C 5.00c) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: Certain Unix library functions improperly 
                                  handle a NaN argument (and an ommited argument).</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>:in 
                                  src/misc/seapiext.h find this line:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   #if JSE_FLOATING_POINT==0 || defined(__JSE_PALMOS__)</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and 
                                  replace with this line:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   #if JSE_FLOATING_POINT==0 || defined(__JSE_PALMOS__) || defined(__JSE_UNIX__)</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">Do 
                                  the same in src/misc/seapiext.c right at the 
                                  top.</font></p>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="m5"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>array.slice(), 
                                  string.indexOf(), and string.slice() errors 
                                  on Unix and PalmOS</b></font><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><br>
                                  (for ISDK/C 5.00c) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: array.slice(), string.indexOf(), and 
                                  string.slice() don't work properly on Unix in 
                                  certain cases. This applies to the palm as well.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/lib/ecma/seobject.c, function Ecma_Array_slice(), 
                                  at the top the variables start and end are initialized 
                                  via seGetLong. Change both to seGetInteger. 
                                  Also, Change the initialization of length from 
                                  seGetULong to seGetUInt32.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">In 
                                  src/lib/ecma/seobject.c, function Ecma_String_indexOf, 
                                  the start variable is initialized using seGetLong. 
                                  Change that to seGetInteger.</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">In 
                                  src/lib/ecma/seobject.c, find the Ecma_String_slice 
                                  function. Replace the initialization references 
                                  in start and end from seGetLong to seGetInteger.</font></p>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="m6"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>some 
                                  unix data parameters can be off</b><br>
                                  (for ISDK/C 5.00c) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: Some data paramters in unix are off, 
                                  especially those referring to DST and offset 
                                  from GMT.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  in src/lib/ecma/sedate.c, function millisec_from_gmtime, 
                                  find this #elif block:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   #  elif defined(__JSE_MAC__) || defined(__JSE_VXWORKS__) \
        || defined(__DEFAULT_TIME_C_FUNCTION__) || defined(__JSE_MAC_MACH_O__)</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and 
                                  add __JSE_UNIX__ to it like this:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   #  elif defined(__JSE_MAC__) || defined(__JSE_VXWORKS__) \
        || defined(__DEFAULT_TIME_C_FUNCTION__) || defined(__JSE_MAC_MACH_O__) \
        || defined(__JSE_UNIX__)</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="cnu"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>fields 
                                  of call structure may not be initialized</b><br>
                                  (for ISDK/C 5.00c) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: Some fields of the call structure may not 
                                  be initialized. Specifically, the useCache boolean 
                                  flag is sometimes checked before it is initialized. 
                                  This has not been shown to cause any run-time 
                                  errors, yet.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/core/call.c, function callInterpret(), 
                                  at about line 1374, add a call to memset() following 
                                  the existing call to coreMalloc(), so the code 
                                  is now:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   call = (struct Call *)coreMalloc(sizeof(struct Call));
   if( call==NULL ) return NULL;
   memset(call,0,sizeof(struct Call));</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="ifno"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>seIsFunc() 
                                  error for non-objects</b><br>
                                  (for ISDK/C 5.00c) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: seIsFunc generates an error if called on 
                                  a non-object. It should just return FALSE, i.e. 
                                  is not a function.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  in src/core/se500.c, function seIsFunc(), at 
                                  about line 3745, replace this code:</font></p>
                                <p></p>
                                <pre><font face="Courier New, Courier, mono" size="2">      seGetMember(call,object,type,memdata,VObject,SE_DEFAULT);
      assert( SEVAR_GET_TYPE(&(call->api_temp))==VObject ||
              SEVAR_GET_TYPE(&(call->api_temp))==VUndefined );</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
                                  with this one line</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   seGetMember(call,object,type,memdata,VUndefined,SE_DEFAULT);</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="sdisee"></a></font></p>
                              <ul>
                                <li><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><b>seDestroyContext 
                                  cannot be called within seEva</b></font><b>l</b><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><br>
                                  (for ISDK/C 5.00c) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: seDestroyContext was written with the 
                                  assumption that no seEvals would be currently 
                                  executing inside it when called. Since people 
                                  want to be able to just abort and cleanup the 
                                  context, the function has been changed to support 
                                  this.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  src/core/se500.c, replace the existing seDestroyContext 
                                  with this new version:</font></p>
                                <p></p>
                                <pre><font face="Courier New, Courier, mono" size="2">      JSECALLSEQ( void )
   seDestroyContext(secontext se)
   {
      struct Call *call;
      sebool again;
      assert_is_context( call );

      do
      {
         call = CALL_FROM_JSECONTEXT(se);
         again = (call->prev)!=NULL;
         callDelete(call);
      }
      while( again );
   }</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="cenf"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>crash 
                                  with eval() in nested function</b><br>
                                  (for ISDK/C 5.00c) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: Crash in eval() inside nested function 
                                  calls. This bug applies to any wrapper function 
                                  trying to call seEval().</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  src/core/call.c, function callCreateVariableObject(), 
                                  at about line 1098 find:</font></p>
                                <p></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   while( !FUNCTION_IS_LOCAL(func_orig) || (lookfunc!=NULL && lookfunc!=func_orig) || depth-->0 )
   {</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
                                  </font><font face="Courier New, Courier, mono" size="2">and 
                                  replace with</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   while( !FUNCTION_IS_LOCAL(func_orig) || (lookfunc!=NULL && lookfunc!=func_orig) || depth>0 )
   {
      if( depth ) depth--;</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="duse"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>decodeURI 
                                  is missing from standard ECMA libraries</b><br>
                                  (for ISDK/C 5.00c) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: The standard ECMAScript function &quot;decodeURI&quot; 
                                  has been wrongly names &quot;decodedURI&quot;.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  src/lib/ecma/ecmamisc.c at about line 1065 change:</font></p>
                                <p></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   SE_FUNCTION( UNISTR("decodedURI"), Ecma_decodeURI, 1, 1, SE_SECURE, SE_DONTENUM )</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
                                  </font><font face="Courier New, Courier, mono" size="2">to</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   SE_FUNCTION( UNISTR("decodeURI"), Ecma_decodeURI, 1, 1, SE_SECURE, SE_DONTENUM )</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="sicse"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>STACK_INFO 
                                  crashes within nested seEval()</b><br>
                                  (for ISDK/C 5.00c) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: Using STACK_INFO within nested interprets 
                                  can crash.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  src/core/se500.c in the seGetMember function, 
                                  find this block at about line 1214:</font></p>
                                <p></p>
                                <pre> <font face="Courier New, Courier, mono" size="2">     save = &amp;(init_call-&gt;save);

   </font><font face="Courier New, Courier, mono" size="2">in_prev_call:</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and 
                                  change it to:</font></p>
                                <p></p>
                                <pre>   <font face="Courier New, Courier, mono" size="2">in_prev_call:
      </font><font face="Courier New, Courier, mono" size="2">save = &amp;(scall-&gt;save);</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="mmss"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>JSE_MIN_MEMORY 
                                  builds truncate SE_SERVICES,SE_VALUE pointer</b><br>
                                  (for ISDK/C 5.00c) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: Putting a pointer to SE_SERVICES,SE_VALUE 
                                  in a min-mem build causes the pointer to be 
                                  truncated to 16 bits.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  There are two places in se500.c where 'GenericData' 
                                  is referenced and those require the corrections. 
                                  In both cases, the casts should go through the 
                                  SE_POINTER_UINT datatype instead of sememcount 
                                  since the former is always pointer-sized. The 
                                  two changes:</font></p>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">around 
                                  line 1831:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   SEVAR_INIT_SLONG(&(call->save.api_temp), (SE_POINTER_SINT)(call->Global->GenericData));</font></pre>
                                <pre><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and around line 2374:</font></pre>
                                <pre><font face="Courier New, Courier, mono" size="2">   call->Global->GenericData = (void *)(SE_POINTER_UINT)SEVAR_GET_SLONG(tmp);</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="wac"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Win32 
                                  compilation errors if JSE_WIN_ALL defined</b><br>
                                  (for ISDK/C 5.00c) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: Win32 builds on se500 with the JSE_WIN_ALL 
                                  libraries turned on have compile errors.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  </font><font size="2" face="Verdana, Arial, Helvetica, sans-serif">In 
                                  src/lib/win/sent.c line 111, remove the AsmVar 
                                  parameter so the line now looks like:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   buf = seGetBuffer(se,SE_ARGS,SE_INDEX(0),&CodeLen);</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">in 
                                  src/lib/win/sewin.c line 77 remove one of the 
                                  two '0' parameters so the line now looks like:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   seSetArray(se,EStuff.var,0);</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">in 
                                  src/lib/win/sewin.c lines 272 and 273 remove 
                                  the commas at the end of the lines so they look 
                                  like:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   </font><font face="Courier New, Courier, mono" size="2">SE_INITFUNC(WinLibInitFunction) SE_TERMFUNC(WinLibTermFunction)</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="nannnan"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>sePutNumber(NaN) 
                                  where NaN!=jseNaN are not recognized</b><br>
                                  (for ISDK/C 5.00c) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: If your code gives the interpreter 
                                  any representation of NaN that is not bitwise 
                                  identical to jseNaN, then it may not be recognized 
                                  as NaN during internal math operations. In debug 
                                  builds asserts will be triggered, and in NDEBUG 
                                  builds the interpreter may hang.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  </font><font size="2" face="Verdana, Arial, Helvetica, sans-serif">In 
                                  src/core/se500.c, function sePutNumberEx(), 
                                  at about line 3978, before the call to SEVAR_INIT_NUMBER(), 
                                  add this code:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   #  if JSE_FLOATING_POINT==1
         if ( jseIsAnyNaN(val) )
            val = jseNaN;
   #  endif</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="pins"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>#include 
                                  statement inserts null-character into source 
                                  stream</b><br>
                                  (for ISDK/C 5.00c) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: When processing the <font face="Courier New, Courier, mono">#include 
                                  &quot;filespec&quot;</font> directive within 
                                  seEval() or sePrecompile(), a null character 
                                  will be written at the end of <font face="Courier New, Courier, mono">filespec</font>. 
                                  This is a problem if the original source is 
                                  from SE_TEXT and that original text must not 
                                  be overwritten (must be re-used or is in read-only 
                                  memory). </font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  </font><font size="2" face="Verdana, Arial, Helvetica, sans-serif">In 
                                  src/core/source.c, function sourceInclude(), 
                                  at about line 859 replace this code:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   assert( sizeof_sechar(EndQuoteChar) == sizeof_sechar('\0') );
   assert( sizeof_sechar('\0') == sizeof(secharptrdatum) );
   SECHARPTR_PUTC(End,'\0');
   sourceSetPtr(*source,SECHARPTR_NEXT(End));
   *source = sourceNewFromFile(call,*source,src,&success);</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">with 
                                  this code:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   seconstcharptr filespec = StrCpyMallocLen(src,SECHARPTR_DIFF(End,src));
   sourceSetPtr(*source,SECHARPTR_NEXT(End));
   *source = sourceNewFromFile(call,*source,filespec,&success);
   jseMustFree((void *)filespec);</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="eod"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>errors 
                                  with SE_OPT_DEBUGGER</b><br>
                                  (for ISDK/C 5.00c) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: SE_OPT_DEBUGGER does not work correctly.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  </font><font size="2" face="Verdana, Arial, Helvetica, sans-serif">In 
                                  src/core/secode.c, function secodeInterpret() 
                                  case seContFunc, at about line 960 find this 
                                  line:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( call->Global->Params.seOptions&SE_OPT_DEBUGGER ) break;</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">and 
                                  change this to:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( call->Global->Params.seOptions&SE_OPT_DEBUGGER ) return TRUE;</font></pre>
                                <font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="svrr"></a></font></blockquote>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>seEval() 
                                  with SE_REPORT_ERRORS is not clearing the error 
                                  flag</b><br>
                                  (for ISDK/C 5.00c) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: seEval() with SE_REPORT_ERRORS not correctly 
                                  leaving the context with no error after it is 
                                  reported.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/core/se500.c, at the end of seEval()</font><font size="2" face="Verdana, Arial, Helvetica, sans-serif">, 
                                  find:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( flags&SE_REPORT_ERRORS && CALL_ERROR(call) )
      CALL_SET_STATE(call,StateNormal);</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">and 
                                  change this to:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( flags&SE_REPORT_ERRORS && CALL_ERROR(call) )
      CALL_SET_NORMAL(call);</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="stosf"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>stock 
                                  objects passed to seEval with SE_FUNC will not 
                                  work</b><br>
                                  (for ISDK/C 5.00c) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: When calling seEval() with stock objects 
                                  and the SE_FUNC flag (e.g. seEval(...,SE_THIS,...,SE_FUNC,...)) 
                                  the stock object will not be recognized. This 
                                  is most likely to show up when the object is 
                                  SE_NOWHERE as a result of an invalid call to 
                                  seGetObject().</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/core/se500.c, function seEvalFunc(), 
                                  add this to the local variable declarations 
                                  at the top</font><font size="2" face="Verdana, Arial, Helvetica, sans-serif">:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   hSEObject realobj = seobjectTohSEObject(call,func_obj);</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">and 
                                  about 20 lines further down in the same function, 
                                  just before the statement &quot;<font face="Courier New, Courier, mono">pushes&nbsp;+=&nbsp;2;</font>&quot;, 
                                  replace this line:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   SEVAR_INIT_OBJECT(func_var,func_obj-&gt;obj);</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
                                  with this:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   SEVAR_INIT_OBJECT(func_var,realobj);</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="gtyp"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>assert() 
                                  or memory leak from seEval(...SE_FUNC..) if 
                                  run-time error in script function</b><br>
                                  (for ISDK/C 5.00c) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: When using seEval() to call a function, 
                                  errors in the function could trigger assertions. 
                                  In release builds, this would result in a slight 
                                  memory leak.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/core/call.c, function callFunctionFully(), 
                                  at about line 139, replace this line</font><font size="2" face="Verdana, Arial, Helvetica, sans-serif">:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( !callMayIContinue(call) )</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">with 
                                  this:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( !CALL_ERROR(call) && !callMayIContinue(call) )</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
                                  and 5 lines further down remove the following 
                                  3 statements:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">      wSEVar ret = STACK_PUSH;
      SEVAR_INIT_UNDEFINED(ret);
      callError(call,textcoreMAYICONTINUE);</font></pre>
                                <font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="ngfnw"></a></font></blockquote>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>SE_NEW_GLOBALS 
                                  flag for seEval() doesn't work</b><br>
                                  (for ISDK/C 5.00c) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: Specifying a new global in calls to 
                                  seEval using the seEval parameters structure 
                                  can fail to take effect.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/core/se500.c, function seEval(), at about 
                                  line 5120, replace this line</font><font size="2" face="Verdana, Arial, Helvetica, sans-serif">:</font></p>
                                <pre><font face="Courier New, Courier, mono">   HowToInterpret &= ~SE_NEW_GLOBALS<font size="2">;</font></font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">with 
                                  this:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   settings &= ~SE_NEW_GLOBALS</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="jccnd"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Compilation 
                                  errors if JSE_CONDITIONAL_COMPILE not defined</b><br>
                                  (for ISDK/C 5.00c) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: If jseopt.h does not #define JSE_CONDITIONAL_COMPILE 
                                  then there are compilation problems.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/core/source.c, function sourceNextLine(), 
                                  </font><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  locate the following line at about line 710 
                                  and move it to the first line of the function:</font></p>
                                <pre><font face="Courier New, Courier, mono">   sebool firstPass = True<font size="2">;</font></font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">and 
                                  in src/core/security.c, function checkSecurity(), 
                                  at about line 68 replace this line:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   #  if JSE_COMPILER==1</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">with 
                                  this line</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   #  if JSE_COMPILER==1 && JSE_CONDITIONAL_COMPILE==1</font></pre>
                              </blockquote>
                              <hr width="90%">
                              <p> 
                              <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>for 
                                5.00b --</b></font> <font face="Verdana, Arial, Helvetica, sans-serif" size="2">(may 
                                apply to earlier version)</font></p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="fpan"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Function.prototype.apply() 
                                  not accepting null for thisObj parameter</b><br>
                                  (for ISDK/C 5.00b) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: Function.prototype.apply() should accept 
                                  null or undefined as the first parameter, using 
                                  the global object for these cases. Instead an 
                                  error message is generated.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/lib/ecma/seobject.c, function Ecma_Function_apply, 
                                  </font><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  at about line 386 replace this conditional:</font></p>
                                <pre><font face="Courier New, Courier, mono">   if( argc &gt; 0 )</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">with 
                                  this:</font></p>
                                <pre><font face="Courier New, Courier, mono">   if( argc &gt; 0
    &amp;&amp; SE_TYPE_NULL &lt; seGetType(se,SE_ARGS,SE_INDEX(0)) )</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="gisl"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Documentation 
                                  incorrect about lifetime of seGetInternalString()</b><br>
                                  (for ISDK/C 5.00b) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: The documentation for the function 
                                  <font face="Courier New, Courier, mono">seGetInternalString()</font>, 
                                  states:</font></p>
                                <pre><font face="Courier New, Courier, mono">   The returned pointer is valid as long as
   the sestring it is obtained from is valid.</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  That statement is not correct, and should instead 
                                  be:</font></p>
                                <pre><font face="Courier New, Courier, mono">   The text represented by many sestring values
   is internally stored in a compact format, and
   so the string returned by this call may be
   stored in a temporary location; the returned
   pointer is guaranteed to be valid only until
   the next call into the script-engine API.</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="vltc"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>If 
                                  interpreting very long text lines, // comments 
                                  may extend over multiple lines</b><br>
                                  (for ISDK/C 5.00b) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: If interpreting <font face="Courier New, Courier, mono">seEval(...SE_TEXTSE...)</font> 
                                  where any line of the raw text string is very 
                                  long (usually many hundreds of characters), 
                                  and if within the line there is an end-of-line 
                                  comments (<font face="Courier New, Courier, mono">//</font>), 
                                  that comment may wrongly extend until the end 
                                  of the buffer.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/core/code.c, add this function:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">      static seconstcharptr JSE_NEAR_CALL
   endOfSourceLine(seconstcharptr src)
   {
      sechar c;
      do {
         SECHARPTR_INC(src);
      } while ( (c = SECHARPTR_GETC(src))!=0  &amp;&amp;  c!='\r'  &amp;&amp;  c!='\n' );
      return src;
   }</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">and 
                                  in the function tokGetNext() change the three 
                                  instance of this line:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   goto EndOfSourceLine;</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">to 
                                  this :</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   status-&gt;srcptr = endOfSourceLine(status-&gt;srcptr); continue;</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="sss"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>SE_SI_DEPTH 
                                  wrong for global code and for first function</b><br>
                                  (for ISDK/C 5.00b) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: SE_SI_DEPTH was wrong. Outside of any 
                                  function ought to be depth 0, in the first function 
                                  depth 1, etc. Instead, both outside and the 
                                  first function were 0.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/core/se500.c, function seGetMember(), 
                                  within this case block: </font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   case 11: /* SE_SI_DEPTH */</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  are two instances of the following statment:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   if( fptr ) depth++;</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">Replace 
                                  the first such instance, at about line 1296, 
                                  replace with this statement:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   depth++;</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">and 
                                  remove the second instance, at about line 1305.</font></p>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="slnkpt"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>C++ 
                                  compilation errors in selink.h if JSE_LINK options 
                                  is not defined</b><br>
                                  (for ISDK/C 5.00b) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: If compiling a C++ file, with JSE_LINK 
                                  not defined in jseopt.h, the compiler will warn 
                                  of mis-matched <font face="Courier New, Courier, mono">extern 
                                  &quot;C&quot;</font> directives.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/include/selink.h, at about line 132 add 
                                  an <font face="Courier New, Courier, mono">extern&nbsp;&quot;C&quot;</font> 
                                  this statement just before the definition of 
                                  <font face="Courier New, Courier, mono">struct&nbsp;jseFuncTable_t</font>, 
                                  so those lines are: </font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   #  define jseFuncs(CC) (**((struct jseFuncTable_t ** _FAR_ *)CC))
   #ifdef __cplusplus
   extern &quot;C&quot; {
   #endif
   struct jseFuncTable_t {</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">and 
                                  around line 116 add another <font face="Courier New, Courier, mono">extern&nbsp;&quot;C&quot;</font> 
                                  statement before the <font face="Courier New, Courier, mono">#endif</font> 
                                  so those lines are:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   #ifdef __cplusplus
      }
   #endif
   #endif /* #if JSE_LINK==1 || defined(JSETOOLKIT_LINK) */ </font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="sszp"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>string 
                                  slice() function is not accepting zero parameters</b><br>
                                  (for ISDK/C 5.00b) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: String.prototype.slice() will report 
                                  an error if it is passed no parameters. Instead, 
                                  it should treat calls to <font face="Courier New, Courier, mono">string.slice()</font> 
                                  as <font face="Courier New, Courier, mono">string.slice(0)</font>.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/lib/ecma/seobject.c, at about line 3760, 
                                  change this line: </font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   SE_METHOD( UNISTR("slice"), Ecma_String_slice,1,2,SE_SECURE,SE_DONTENUM)</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">to 
                                  this</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   SE_METHOD( UNISTR("slice"), Ecma_String_slice,0,2,SE_SECURE,SE_DONTENUM)</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="evfx"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>seEval(...SE_FUNC...) 
                                  does not generate exception if object is not 
                                  a function</b><br>
                                  (for ISDK/C 5.00b) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Problem: Calling seEval() with a function (the 
                                  SE_FUNC flag) will return False but will not 
                                  generate an exception and will not call the 
                                  seAttErrorFunc or sePrintErrorFunc. Instead, 
                                  this will call the internal API function. In 
                                  other words, calling seEval() with an invalid 
                                  function object is viewed as an API error instead 
                                  of a scripting error.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  The underlying API philosophy is the seEval() 
                                  should behave much like the script eval() function, 
                                  and so using a non-function object as an API 
                                  error is wrong. In src/core/se500.c, function 
                                  seEvalFunc(), at about line 4172 changine this 
                                  line: </font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   seAPIError(call,UNISTR("Object passed as a function to seEval is not really a function."));</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">to 
                                  this</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   callQuit(call,textcoreNOT_FUNCTION_VARIABLE,UNISTR(""));</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="cr5$"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>5-character 
                                  variables names incorrect if either of last 
                                  two characters is '$'</b><br>
                                  (for ISDK/C 5.00b) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: In many cases, internal representation 
                                  of variable names will be incorrect if the string 
                                  is 4 or 5 characters long and either of the 
                                  last two characters are '$'. For example, the 
                                  names &quot;book&quot; and &quot;book$&quot; 
                                  would conflict and both represent the same variable.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srcore/util.c, function CreateVarName(), 
                                  at about line 349 (following the test for <font face="Courier New, Courier, mono">'$'&nbsp;==&nbsp;c</font>, 
                                  change this line:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   if( i==4 )</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">to 
                                  this</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   if( i==5 )</font></pre>
                              </blockquote>
                              <hr width="90%">
                              <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>for 
                                5.00a --</b></font> </p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="strpsk"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>String 
                                  replace may skip matches if replacement string 
                                  is null-string (i.e. &quot;&quot;)</b><br>
                                  (for ISDK/C 5.00a) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: If the replacement expression in a string 
                                  replace() method is the zero-length string, 
                                  then characters may be skipped in performing 
                                  the replacement. For example, this script would 
                                  fail the test:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   var str = '6 abcdef';
   var rtn = str.replace(/[^0-9\.]/g,'');
   Test.assert( rtn == "6" );  // in error would be &quot;6acf&quot;</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srclib/ecma/seobject.c, function string_search_helper(), 
                                  replace the block of code beginning with &quot;<font face="Courier New, Courier, mono">/*&nbsp;The&nbsp;return&nbsp;from&nbsp;exec&nbsp;should&nbsp;be&nbsp;an&nbsp;object</font><font face="Verdana, Arial, Helvetica, sans-serif">&quot;</font> 
                                  with the code found at <a href="ftp://ftp.nombas.com/pub/isdkeval/se500/string_search_helper.txt">ftp://ftp.nombas.com/pub/isdkeval/se500/string_search_helper.txt</a></font></p>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="cdb"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>rare 
                                  crashes on memory overwrites using the dynamicBuffer 
                                  routines</b><br>
                                  (for ISDK/C 5.00a) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: Code may overwrite one byte beyond allocated 
                                  memory when using the dynamicbuffer functions.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/lib/common/selibutl.c, function dynamicBufferAppendLength(), 
                                  at about line 142 change this line:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   } while( buf->used + length > buf->allocated );</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">to 
                                  this:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   } while( buf->used + length >= buf->allocated );</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="bjnmidx"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Problems 
                                  with array lengths and numeric indices that 
                                  are large or non-integer</b><br>
                                  (for ISDK/C 5.00a) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: There are many problems with handling array 
                                  and object members that are either very large 
                                  (e.g. <font face="Courier New, Courier, mono">obj[2147483650]</font>) 
                                  or are non-integer numbers (e.g. <font face="Courier New, Courier, mono">obj[3.14159]</font>, 
                                  <font face="Courier New, Courier, mono">obj[1e34]</font>). 
                                  There are also related problems with setting 
                                  an array length to a very large number (e.g. 
                                  array.length=<font face="Courier New, Courier, mono">2147483650</font>).</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  The number of changes needed to fix these problems 
                                  in such a way that they would work on all build 
                                  types (fp, fpemul, nofp) without a loss of performance 
                                  was very large. Because the number of changes 
                                  was so large we recommend that you update to 
                                  version 5.00b.</font></p>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="opc"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Foo.prototype.constructor 
                                  not assigned correctly for all builtin objects</b><br>
                                  (for ISDK/C 5.00a) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: For all builtin objects, this statement 
                                  should be true: <font face="Courier New, Courier, mono">Foo.prototype.constructor==Foo</font>. 
                                  For example <font face="Courier New, Courier, mono">Boolean.prototype.constructor==Boolean</font> 
                                  and <font face="Courier New, Courier, mono">Number.prototype.constructor==Number</font>.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  Version 5.00b defines SE_CLASS() differently, 
                                  so that these relationships are created automatically. 
                                  In version 5.00a the behavior is in almost all 
                                  respects identical to the defined behavior, 
                                  and so this code does not need changing. If 
                                  you must get this exact behavior in 5.00a then 
                                  in src/lib/ecma/*.c locate all of the lines 
                                  like this (where instead of &quot;Foo&quot; 
                                  find &quot;Number&quot;, and &quot;String&quot;, 
                                  etc...):</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   </font><font size="2" face="Courier New, Courier, mono">SE_METHOD( JseStr(NULL,constructor), Ecma_Foo_builtin, 0, 0, SE_SECURE, SE_DONTENUM ) </font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">delete 
                                  those lines, and instead add after the enclosing 
                                  SE_END_CLASS statement:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   SE_COPY( UNISTR(&quot;Foo.prototype.constructor&quot;), UNISTR(&quot;Foo&quot;), SE_DONTENUM )</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="rspng"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Array 
                                  split() error for negative starting point</b><br>
                                  (for ISDK/C 5.00a) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: Array split() is not handling negative 
                                  start values correctly. This error shows up 
                                  in different ways with different compilers, 
                                  but the following example would fail on all 
                                  systems:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   var a = [1,2,3,4,5,6];
   var b = a.splice(-100,1);
   Test.assert( a == &quot;2,3,4,5,6&quot; );  // wrongly returns &quot;1,2,3,4,5&quot;
   Test.assert( b == &quot;1&quot; );          // wrongly returns &quot;&quot;</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/lib/ecma/seobject.c, function Ecma_Array_splice(), 
                                  at about line 1179 change the code from:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   start = (slong) max( length + start, 0 );</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
                                  to</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   start = (slong) max( (slong)length + start, 0 );</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="mthmnnz"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Math.min(+0,-0) 
                                  wrongly returns +0</b><br>
                                  (for ISDK/C 5.00a) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: Math.min() is not returning -0 when comparing 
                                  -0 against +0.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/lib/ecma/mathobj.c, function Ecma_Math_min(), 
                                  at about line 390 change the comparison from:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( JSE_FP_LT(current,minval) )</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"> 
                                  to</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if( JSE_FP_LT(current,minval) || ( jseIsNegZero(current) && jseIsZero(minval) ) )</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="ltmcrsh"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Clib.localtime() 
                                  and Clib.gmtime() crash on out-of-range dates</b><br>
                                  (for ISDK/C 5.00a) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: Script calls to Clib.localtime() or Clib.gmtime() 
                                  crash if the input time is out of the range 
                                  of standard C library time routines.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/lib/clib/setime.c, function GenericTimeLib(), 
                                  at about line 304 just after any of the ConversionFunc 
                                  functions will have been called, insert this 
                                  code:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if ( t == NULL )
   {
      sePutNull(se,SE_RETURN,SE_VALUE);
      return;
   }</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="nrnan"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Number 
                                  toString(with_radix) method is not handling 
                                  NaN, Infinity, and -Infinity</b><br>
                                  (for ISDK/C 5.00a) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: Converting an instance of a Number object 
                                  toString, using a radix (e.g.&nbsp;<font face="Courier New, Courier, mono">(new&nbsp;Number(foo)).toString(16);</font>) 
                                  does not produce correct results if the number 
                                  is NaN, Infinity, or -Infinity.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/lib/ecma/seobject.c, function Ecma_Number_toString(), 
                                  at about line 1709 cahnge the JSE_NUMBER_TO_STRINGWITHRADIX 
                                  code to be this:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   if ( 0 < argc )
   {
      slong radix = seGetLong(se,SE_ARGS,SE_INDEX(0));
      if ( radix==10  ||  !jseIsFinite(num) )
         EcmaNumberToString(se,buffer,num);
      else
         EcmaNumberToStringWithRadix(se,num,(sint)radix,buffer);
   }
   else</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="ngmbd"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Invalid 
                                  date computation on negative month</b><br>
                                  (for ISDK/C 5.00a) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: Date calculations are incorrect, and can 
                                  trigger debugger asserts, if month is negative. 
                                  For example, the following script should set 
                                  the month to October (month 9) and year to 1980, 
                                  but instead it sets the month to January (month 
                                  0) and year to 1981.</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   var foo = new Date("12:00 February 4, 1982");
   foo.setUTCMonth(-15);</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/lib/ecma/sedate.c, function MakeDay(), 
                                  insert code between lines 640 and 642 add code 
                                  so those lines become:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   r6 = m%12;
   if ( r6 < 0 )
   {
      r6 += 12;
      r5--;
   }
   t = TimeFromYear(se,r5);</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="npff"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>When 
                                  named parameters are disabled, calling a function 
                                  with seEval() fails</b><br>
                                  (for ISDK/C 5.00a) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: If <font face="Courier New, Courier, mono">JSE_NAMED_PARAMS</font> 
                                  (named paramters) is not enabled in your jseopt.h 
                                  file, then calling a function with <font face="Courier New, Courier, mono">seEval()</font> 
                                  will fail.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/core/se500.c, function seEvalFunc(), 
                                  at line 4171 alter the code from:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">      if( args!=NULL )
      {
   #     if JSE_NAMED_PARAMS==1
         if( (flags & SE_NAMED_PARAMS)==0 )
         {</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">to</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">      if( args!=NULL )
      {
   #     if JSE_NAMED_PARAMS==1
         if( (flags & SE_NAMED_PARAMS)==0 )
   #     endif
         {</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and 
                                  at about 4213 change from</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">         }
         else
   #     endif /* #if JSE_NAMED_PARAMS==1 */
         {
            wSEVar onstack;</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">to 
                                  </font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">         }
   #     if JSE_NAMED_PARAMS==1
         else
         {
            wSEVar onstack;                                  </font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">and 
                                  finally at about line 4239 change from</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">            onstack = STACK_PUSH;
            SEVAR_INIT_OBJECT(onstack,args);
         }
      }</font></pre>
                                <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2">to</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">            onstack = STACK_PUSH;
            SEVAR_INIT_OBJECT(onstack,args);
         }
   #     endif
      }</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="noargv"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>argv[0] 
                                  is missing</b><br>
                                  (for ISDK/C 5.00a) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: When building with the JSE_MAIN_ARGC_ARGV 
                                  option, argv[0] is supposed to be the script 
                                  name, but argv[0] is missing.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  Many changes were needed to correct this. These 
                                  changes will be released shortly with version 
                                  5.00b</font></p>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="mthrndneg"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Math.round() 
                                  returns -0 instead of +0 from -0.5 to -0</b><br>
                                  (for ISDK/C 5.00a) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: Math.round(val) should return -0 for -0.5 
                                  &lt;= val &lt;= -0, according to section 15.8.2.15 
                                  of the ECMAScript specification, but is returning 
                                  +0.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/lib/ecma/mathobj.c, function Ecma_Math_round, 
                                  the &quot;<font face="Courier New, Courier, mono">if</font>&quot; 
                                  statement and block should be changed to:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   if ( jseIsFinite(val) &amp;&amp; !jseIsZero(val) )
   {
      senumber half = JSE_FP_DIV(jseOne,JSE_FP_CAST_FROM_SLONG(2));
      /* exception to standard math if between -0.5 and -0, inclusive */
      if ( JSE_FP_LT(val,jseZero)  &amp;&amp;  JSE_FP_LTE(JSE_FP_NEGATE(half),val) )
         val = jseNegZero;
      else
         val = JSE_FP_FLOOR(se,JSE_FP_ADD(val,half));
   }</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="pargnoenum"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>properties 
                                  of the arguments object should be DontEnum</b><br>
                                  (for ISDK/C 5.00a) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: callee, length, and numbered members of 
                                  the arguments object are enumerable, should 
                                  be DontEnum.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/core/call.c, function callCreateArguments(), 
                                  replace this statement:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   seobjCreateMemberCopy(call,hArgs,STOCK_STRING(call,callee),tmp,SE_DEFAULT);</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">with 
                                  this:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   seobjCreateMemberCopy(call,hArgs,STOCK_STRING(call,callee),tmp,SE_DONTENUM);</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">and 
                                  replace three instances of this statement:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   mems->attributes = SE_DEFAULT;</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">with 
                                  this:</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   mems->attributes = SE_DONTENUM;</font></pre>
                              </blockquote>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="2pstincwith"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>post-inc/decrement 
                                  operator acts like pre-inc/decrement inside 
                                  a &quot;with&quot; block</b><br>
                                  (for ISDK/C 5.00a) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: If a variable member of an object is altered 
                                  with the post-increment or pre-decrement operator, 
                                  and if that is a member of an object scoped 
                                  with &quot;with&quot;, then the code will instead 
                                  act like a pre-increment or pre-decrement operator.</font></p>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In src/core/secode.c, function secodeInterpret(), 
                                  find the switch case started with:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   case sePostDecLocalWith:
   case sePostIncLocalWith:
   case sePreDecLocalWith:
   case sePreIncLocalWith:
   {</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">at 
                                  the end of that block is this line:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   DO_CREMENT(w_rhs,w_lhs,(jsebool)(t&1),t<=sePreDecLocal)</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">change 
                                  the sePreDecLocal to sePreDecLocalWith so it 
                                  reads:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   DO_CREMENT(w_rhs,w_lhs,(jsebool)(t&1),t<=sePreDecLocalWith)</font></pre>
                              </blockquote>
                              <p></p>
                              <p><font face="Verdana, Arial, Helvetica, sans-serif" size="2"><a name="pstincwith"></a></font></p>
                              <ul>
                                <li><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>post-increment 
                                  operator on local variable is ignoring &quot;with&quot; 
                                  statement</b><br>
                                  (for ISDK/C 5.00a) </font></li>
                              </ul>
                              <blockquote> 
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"> 
                                  Bug: If a local variable is also a member of 
                                  the current &quot;with&quot; object, then post-increment 
                                  will modify the local variable instead of the 
                                  variable in the &quot;with&quot; object. For 
                                  example, the following would wrong increment 
                                  &quot;foo&quot; and not &quot;myobj.foo&quot;</font></p>
                                <pre><font face="Courier New, Courier, mono" size="2">   function blah()
   {
      var foo = 14;
      var myobj = new Object();
      myobj.foo = 88;
      with ( myobj )
      {
         foo++;
      }</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif"><b>Fix</b>: 
                                  In srccore/expressn.c, function secompilePostfixExpression(), 
                                  change the EXPR_LOCAL case (approx line 2445):</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   secompileAddItem2(this,sePostIncLocal+inc,this-&gt;expr.index,this-&gt;with_depth);</font></pre>
                                <p><font size="2" face="Verdana, Arial, Helvetica, sans-serif">to 
                                  be these lines:</font></p>
                                <pre><font size="2" face="Courier New, Courier, mono">   if ( This-&gt;with_depth )
      secompileAddItem2(This,sePostIncLocalWith+inc,This-&gt;expr.index,This-&gt;with_depth);
   else
      secompileAddItem1(This,sePostIncLocal+inc,This-&gt;expr.index);</font></pre>
                              </blockquote>
                              <!-- #EndEditable --></td>
                    </tr>
                    <tr>
                      <td width="1">&nbsp;</td>
                      <td width="460">&nbsp;</td>
                    </tr>
                  </table>
                  </TD>
              </TR>
            </TABLE>
          </TD>
        </TR>
      </TABLE>
    </TD>
  </TR>
  <TR VALIGN=TOP ALIGN=LEFT>
    <TD HEIGHT=2 width="5"></TD>
    <TD COLSPAN=2 height="2">
            <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH=100% HEIGHT=20 bgcolor="#FFFFFF">
              <TR ALIGN=LEFT VALIGN=TOP>
          <TD>
                  <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH=100%>
                    <TR VALIGN=TOP ALIGN=LEFT>
                <TD WIDTH=20 HEIGHT=2 ALIGN=LEFT VALIGN=TOP><IMG ID="Picture13" HEIGHT=20 WIDTH=20 SRC="../../../curve_botleft.gif" BORDER=0></TD>
                      <TD height="2"><IMG SRC="../../../clearpixel.gif" WIDTH=592 HEIGHT=1 BORDER=0></TD>
                <TD WIDTH=20 ALIGN=LEFT VALIGN=TOP height="2"><IMG ID="Picture11" HEIGHT=20 WIDTH=20 SRC="../../../curve_bot.gif" BORDER=0></TD>
              </TR>
            </TABLE>
          </TD>
        </TR>
      </TABLE>
    </TD>
  </TR>
  <TR VALIGN=TOP ALIGN=LEFT>
    <TD WIDTH=5 HEIGHT=6><IMG SRC="../../../clearpixel.gif" WIDTH=5 HEIGHT=1 BORDER=0></TD>
    <TD WIDTH=613><IMG SRC="../../../clearpixel.gif" WIDTH=613 HEIGHT=1 BORDER=0></TD>
    <TD WIDTH=22><IMG SRC="../../../clearpixel.gif" WIDTH=19 HEIGHT=1 BORDER=0></TD>
  </TR>
  <TR VALIGN=TOP ALIGN=LEFT>
    <TD COLSPAN=2>
            <P ALIGN=RIGHT><A HREF="../../../index.htm"><FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica">Home</FONT></A><FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica">
              | </FONT><A
                 HREF="../../../scripting/scripting.htm"><FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica">Scripting</FONT></A><FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica">
              | </FONT><A
                 HREF="../../../products/products.htm"><FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica">Products</FONT></A><FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica">
              | </FONT><A
                 HREF="../../../purchase/purchase.htm"><FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica">Purchase</FONT></A><FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica">
              | </FONT><A
                 HREF="../../../download/ndownload.htm"><FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica">Download</FONT></A><FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica">
              | </FONT><A
                 target="support" HREF="http://support.nombas.com/"><FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica">Support</FONT></A><FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica">
              | </FONT><A HREF="../../../company/company.htm"> <FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica">Company</FONT></A><FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica"><BR>
        <BR>
        Copyright &#169;2001, Nombas, Inc. All Rights Reserved.<BR>
        Questions? Visit </FONT><A HREF="http://support.nombas.com/"><FONT COLOR="#FFFFFF" SIZE="-2" FACE="Verdana,Tahoma,Arial,Helvetica">http://support.nombas.com/</FONT></A>
    </TD>
    <TD width="22"></TD>
  </TR>
</TABLE>
</td>
  </tr>
</table>
<SCRIPT language=JavaScript1.2>
  display_nombas_legacy_message();
</SCRIPT>
</BODY>
<!-- #EndTemplate --></HTML>
