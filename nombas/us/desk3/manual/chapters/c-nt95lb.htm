<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML EXPERIMENTAL 970324//EN">
<HTML>
<HEAD>
<META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter">
<LINK REL="STYLESHEET" HREF="desk3man.css">
<TITLE>ScriptEase:Desktop v3 Manual: The Windows NT and `95 Library</TITLE>
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-1754630-10']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
</HEAD>
<BODY BACKGROUND="desk3pat.gif">
<TABLE WIDTH="225" BORDER="0" CELLSPACING="0" CELLPADDING="0">
  <TR>
    <TD WIDTH="71"><a href="b-win3lb.htm"><IMG SRC="prev.gif" WIDTH="71" height="18" border="0"></a></TD>
    <TD WIDTH="80"><a href="../index.htm"><IMG SRC="tocidx.gif" WIDTH="80" height="18" border="0"></a></TD>
    <TD WIDTH="74"><a href="d-unixlb.htm"><IMG SRC="next.gif" WIDTH="74" height="18" border="0"></a></TD>
  </TR>
</TABLE>

<H1 CLASS="Title">
The Windows NT and `95 Library</H1>
<P CLASS="Abstract">
The routines in this section are specific to Windows 95 and Windows NT. They are available to any ScriptEase script executed under Windows 95 or Windows NT. Most of these routines allow the programmer to have more power than is generally acknowledged as safe under ScriptEase guidelines. Be cautious when you use them.</P>
<HR><TABLE>
<TR>
<TH>
<H6 CLASS="fnam">
<A NAME="997943">
 </A>
asm</H6>
</TH>
<TH>
<H6 CLASS="cHead">
&nbsp;</H6>
</TH>
</TR>
<TR>
<TD>
<P CLASS="lkey">
DESCRIPTION</P>
</TD>
<TD>
<P CLASS="cb">
Execute imbedded assembled code.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
SYNTAX</P>
</TD>
<TD>
<P CLASS="Function-Syntax">
int asm(byte[] buf[, int eax[, int ebx[, int ecx[, int edx[, int esi[, <BR>
int edi]]]]]])</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
COMMENT</P>
</TD>
<TD>
<P CLASS="cb">
Make a call to the routine that you have coded into buf. eax, ebx, ecx, and edx are optional; if some or all are supplied, then the eax, ebx, ecx, and edx will be set to these values when the code at buf is called. The code in buf will be executed with a far call to that address, and is responsible for returning via retf or other means. The ScriptEase calling code will restore ALL registers except ss, sp, eax, ebx, ecx, and edx</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
RETURN</P>
</TD>
<TD>
<P CLASS="cb">
Returns a long value for whatever is in EAX when buf returns.</P>
</TD>
</TR>
</TABLE>
<HR><TABLE>
<TR>
<TH COLSPAN="2">
<H6 CLASS="fnam">
<A NAME="998947">
 </A>
BaseWindowFunction</H6>
</TH>
</TR>
<TR>
<TD>
<P CLASS="lkey">
DESCRIPTION</P>
</TD>
<TD>
<P CLASS="cb">
Call base procedure of ScriptEase-made or subclassed window.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
SYNTAX</P>
</TD>
<TD>
<P CLASS="Function-Syntax">
int BaseWindowFunction(int Handle, int Message, int Param1,<BR>
int Param2)</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
COMMENTS</P>
</TD>
<TD>
<P CLASS="cb">
This calls the base procedure of a window created with a WindowFunction in MakeWindow() or subclassed with SubclassWindow(). This function would normally be used within your ScriptEase window function to pass the window parameter to the base procedure before handling it in your own code. Remember that if your window function returns no value, ScriptEase will call the base procedure automatically. This is the preferred method. </P>
<P CLASS="fit">
<EM CLASS="Element">
Handle</EM>
: Window handle for window receiving this message. This must be the window handle of a window created with MakeWindow() or subclassed with SubclassWindow(). </P>
<P CLASS="fit">
<EM CLASS="Element">
Message</EM>
: The message ID </P>
<P CLASS="fit">
<EM CLASS="Element">
Param1</EM>
: First parameter for this Message ID </P>
<P CLASS="fit">
<EM CLASS="Element">
Param2</EM>
: Second parameter for this Message ID </P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
RETURN</P>
</TD>
<TD>
<P CLASS="cb">
Returns the value returned by the base window function. If Handle is not a window with a WindowFunction created with MakeWindow() or is not window subclassed with SubclassWindow() then returns 0.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
SEE ALSO</P>
</TD>
<TD>
<P CLASS="cb">
BreakWindow(), DoWindows(), MakeWindow(), SubclassWindow()</P>
</TD>
</TR>
</TABLE>
<HR><TABLE>
<TR>
<TH COLSPAN="2">
<H6 CLASS="fnam">
<A NAME="997945">
 </A>
BreakWindow</H6>
</TH>
</TR>
<TR>
<TD>
<P CLASS="lkey">
DESCRIPTION</P>
</TD>
<TD>
<P CLASS="cb">
Destroy a window created with MakeWindow(), or remove SubClass.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
SYNTAX</P>
</TD>
<TD>
<P CLASS="cb">
bool BreakWindow([int WindowHandle])</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
COMMENTS</P>
</TD>
<TD>
<P CLASS="cb">
<EM CLASS="Element">
WindowHandle</EM>
 is a handle of a window created with a previous call to MakeWindow(). It is not an error for WindowHandle to be no-longer-valid. </P>
<P CLASS="cb">
If WindowHandle is a window created with MakeWindow(), then this destroys the window, calling all appropriate Windows' internal DestroyWindow() functions. Child windows are always removed before the parent. Any child windows of WindowHandle (created by earlier calls to MakeWindow() with WindowHandle as the parent) will be automatically destroyed with BreakWindow() before WindowHandle is destroyed.</P>
<P CLASS="cb">
If WindowHandle is a window controlled by SubclassWindow() then this will remove the WindowFunction from the message function loop.</P>
<P CLASS="cb">
If WindowHandle is not supplied, then all windows created with MakeWindow() will be removed. </P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
RETURN</P>
</TD>
<TD>
<P CLASS="cb">
Returns True if the window was destroyed or un-subclassed, else False. If WindowHandle is not specified then returns True if all windows created with MakeWindow() were destroyed, else False. If WindowHandle is specified and WindowHandle window does not exist, then returns True.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
EXAMPLE</P>
</TD>
<TD>
<P CLASS="cb">
See DoWindows() for an example.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
SEE ALSO</P>
</TD>
<TD>
<P CLASS="cb">
BaseWindowFunction(), DoWindows(), MakeWindow()</P>
</TD>
</TR>
</TABLE>
<HR><TABLE>
<TR>
<TH>
<H6 CLASS="fnam">
<A NAME="997946">
 </A>
DoWindows</H6>
</TH>
<TH>
<H6 CLASS="cHead">
&nbsp;</H6>
</TH>
</TR>
<TR>
<TD>
<P CLASS="lkey">
DESCRIPTION</P>
</TD>
<TD>
<P CLASS="cb">
Process window messages.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
SYNTAX</P>
</TD>
<TD>
<P CLASS="cb">
bool DoWindows([bool Peek = False])</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
COMMENTS</P>
</TD>
<TD>
<P CLASS="cb">
This function processes windows messages for this application.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
RETURN</P>
</TD>
<TD>
<P CLASS="cb">
If Peek is TRUE (default is FALSE) this function returns immediately, regardless of whether there were messages for this application or not. If Peek is not supplied or is False, then this function yields control to other applications until a message has been processed (subject to filtering by MessageFilter()) for this application or for any window SubClassed by this application.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
NOTE</P>
</TD>
<TD>
<P CLASS="cb">
This function should not be called recursively. That is, you should not call DoWindows() while within a message function processed during a previous call to DoWindows().</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
RETURN</P>
</TD>
<TD>
<P CLASS="cb">
Returns TRUE if any of the windows created with MakeWindow() or subclassed with SubClassWindow() are still open (i.e., have not received WM_NCDESTROY), else returns FALSE if no windows are still valid.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
EXAMPLE</P>
</TD>
<TD>
<P CLASS="cb">
The following sample script will display a standard Windows window. All messages sent to that window will be logged to the ScriptEase text window. When that window is closed, through any standard Windows closing method, then this program will terminate.</P>
<P CLASS="ciTable">
 #define WS_OVERLAPPEDWINDOW</P>
<P CLASS="ciTable">
 #define WS_VISIBLE</P>
<P CLASS="ciTable">
 #define CW_USEDEFAULT </P>
<P CLASS="ciTable">
 if ( MakeWindow(NULL,NULL,&quot;WindowFunction&quot;, </P>
<P CLASS="ciTable">
            &quot;Display Windows' messages&quot;,                 </P>
<P CLASS="ciTable">
            WS_OVERLAPPEDWINDOW | WS_VISIBLE,</P>
<P CLASS="ciTable">
            CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, </P>
<P CLASS="ciTable">
            CW_USEDEFAULT, NULL,0) ) </P>
<P CLASS="ciTable">
{  </P>
<P CLASS="ciTable">
}</P>
<P CLASS="ciTable">
	WindowFunction(hwnd,msg,parm1,parm2,counter) </P>
<P CLASS="ciTable">
{ </P>
<P CLASS="ciTable">
}</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
SEE ALSO</P>
</TD>
<TD>
<P CLASS="cb">
BaseWindowFunction(), MakeWindow()</P>
</TD>
</TR>
</TABLE>
<HR><TABLE>
<TR>
<TH COLSPAN="2">
<H6 CLASS="fnam">
<A NAME="997982">
 </A>
DynamicLink</H6>
</TH>
</TR>
<TR>
<TD>
<P CLASS="lkey">
DESCRIPTION</P>
</TD>
<TD>
<P CLASS="cb">
Call a function in a Dynamic Link Library (DLL).</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
SYNTAX</P>
</TD>
<TD>
<P CLASS="Function-Syntax">
int DynamicLink(string ModuleName, string ProcedureName,<BR>
int CallingConvention,...)</P>
<P CLASS="Function-Syntax">
int DynamicLink(string ModuleName, int Ordinal, <BR>
int CallingConvention,...) </P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
COMMENTS</P>
</TD>
<TD>
<P CLASS="cb">
There are three versions of DynamicLink(): one for OS/2, one for Windows 3.x, and one for Windows `95 or NT. These three versions differ slightly in the way they are called, so if you wish to use the function in a script that will be run on different platforms you must create an operating system filter with the preprocessor directives #if, #ifdef, #elif, #else, and #endif. </P>
<P CLASS="cb">
DynamicLink() is a flexible method for making calls to the operating system or to dynamic link libraries (DLLs). If an operating-system function is needed but is not provided explicitly, this call will provide it. If you know the proper conventions for the call, then you can wrap a ScriptEase routine around a call to DynamicLink, and the call becomes available. </P>
<P CLASS="cb">
<EM CLASS="Element">
ModuleName</EM>
 is the name of the dynamic link that the procedure is located in. </P>
<P CLASS="cb">
<EM CLASS="Element">
ProcedureName</EM>
 is the name of the procedure in the ModuleName dynamic link library, if this procedure can be referenced by name.</P>
<P CLASS="cb">
<EM CLASS="Element">
Ordinal</EM>
 is the ordinal number of this procedure in the ModuleName dynamic link library. </P>
<P CLASS="cb">
<EM CLASS="Element">
CallingConvention</EM>
 may be any of the following:</P>
<P CLASS="deTable-indent">
<EM CLASS="Element">
CDECL</EM>
	Push right parameter first; Caller pops parameters.</P>
<P CLASS="deTable-indent">
<EM CLASS="Element">
STDCALL</EM>
	Push right parameter first; Caller pops parameters. </P>
<P CLASS="deTable-indent">
<EM CLASS="Element">
PASCAL</EM>
	Push left parameter first; Caller pops parameters.</P>
<P CLASS="cb">
The final parameters will be passed to the dynamically-linked function. All values will be passed as 32-bit values. If a parameter is undefined when DynamicLink() is called, then it is assumed that that parameter will be a 32-bit value that will be filled in (i.e., the address of a 32-bit data element is passed to the function, and that function will set the value). </P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
&nbsp;</P>
</TD>
<TD>
<P CLASS="cb">
If any parameter is a structure then it must be a structure that defines the binary data types in memory to represent the following variable. Before calling the DLL function, the structure will be copied to a binary buffer as described in BLObPut() and fwrite(). After calling the DLL function the binary data will be converted back into the data structure according to the rules defined in BLObGet() and fread(). Data conversion will be performed according to the current BigEndianMode setting (see fread()).</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
RETURN</P>
</TD>
<TD>
<P CLASS="cb">
Any of these calls return the value returned by the dynamically-linked function. 32-bits are returned.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
SEE ALSO</P>
</TD>
<TD>
<P CLASS="cb">
fread() for the definition of passing of structures.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
EXAMPLE</P>
</TD>
<TD>
<P CLASS="cb">
This example displays a simple message box, and waits for user to press Enter: </P>
<P CLASS="ciTable">
#define MESSAGE_BOX_ORDINAL 391 #define MB_OK  0x0000</P>
<P CLASS="ciTable">
// Message box contains one push button: OK. </P>
<P CLASS="ciTable">
#define MB_TASKMODAL 0x2000 </P>
<P CLASS="ciTable">
// Must respond to this message</P>
<P CLASS="ciTable">
DynamicLink(&quot;USER32&quot;,MESSAGE_BOX_ORDINAL,STDCALL,</P>
<P CLASS="ciTable">
            NULL, &quot;This is a simple message box&quot;,</P>
<P CLASS="ciTable">
            &quot;Title of box&quot;,   MB_OK | MB_TASKMODAL);</P>
<P CLASS="cb">
This accomplishes the same thing: </P>
<P CLASS="ciTable">
#define MB_OK  0x0000 </P>
<P CLASS="ciTable">
// Message box contains one push button: OK. </P>
<P CLASS="ciTable">
#define MB_TASKMODAL 0x2000 </P>
<P CLASS="ciTable">
// Must respond to this message </P>
<P CLASS="ciTable">
DynamicLink(&quot;USER32&quot;,&quot;MessageBoxA&quot;,STDCALL,NULL,</P>
<P CLASS="ciTable">
            &quot;This is a simple message box&quot;,</P>
<P CLASS="ciTable">
            &quot;Title of box&quot;, MB_OK | MB_TASKMODAL); </P>
</TD>
</TR>
</TABLE>
<HR><TABLE>
<TR>
<TH>
<H6 CLASS="fnam">
<A NAME="998051">
 </A>
Eset</H6>
</TH>
<TH>
<H6 CLASS="cHead">
&nbsp;</H6>
</TH>
</TR>
<TR>
<TD>
<P CLASS="lkey">
DESCRIPTION</P>
</TD>
<TD>
<P CLASS="cb">
Write new environment variables settings into a file.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
SYNTAX</P>
</TD>
<TD>
<P CLASS="Function-Syntax">
bool ESet(string FileSpec)</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
COMMENTS</P>
</TD>
<TD>
<P CLASS="cb">
This is a function for altering environment variables in the calling routine, since ScriptEase for OS/2 is unable to alter caller environment variables directly due to the limits of OS/2. It creates a file, named FileSpec, and inserts as at least as many statements of the form &quot;SET VAR=Value&quot; as necessary so that if these commands are executed, the environment variables will be updated as ScriptEase has used them. Note that this operation is unnecessary if the SE_ESET environment variable is set. In this case, the call ESet(%SE_ESET%) is automatically generated as the last statement before a smooth exit of ScriptEase.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
RETURN</P>
</TD>
<TD>
<P CLASS="cb">
TRUE if successful, else FALSE if unable to open and write to FileSpec.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
EXAMPLE</P>
</TD>
<TD>
<P CLASS="cb">
This line could be executed at the command line to add the directory C:\UTL to the PATH environment variable: </P>
<P CLASS="ciTable">
C:&gt; SEWIN32 strcat(PATH,&quot;;C:\\UTL&quot;); </P>
<P CLASS="ciTable">
ESet(&quot;TempSet.cmd&quot;); </P>
<P CLASS="ciTable">
&amp; TempSet &amp; del TempSet.cmd </P>
<P CLASS="cb">
The following example sets the command prompt to include the date using the SESET.CMD sample batch file (see the OS/2 Appendix in this manual): </P>
<P CLASS="ciTable">
C:&gt; SEWIN32 &quot;sprintf(PROMPT,'%.10s %s',ctime(time()),'$P$G');&quot;</P>
</TD>
</TR>
</TABLE>
<HR><TABLE>
<TR>
<TH>
<H6 CLASS="fnam">
<A NAME="998050">
 </A>
instance</H6>
</TH>
<TH>
<H6 CLASS="cHead">
&nbsp;</H6>
</TH>
</TR>
<TR>
<TD>
<P CLASS="lkey">
DESCRIPTION</P>
</TD>
<TD>
<P CLASS="cb">
Get instance for this session.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
SYNTAX</P>
</TD>
<TD>
<P CLASS="cb">
int Instance()</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
RETURN</P>
</TD>
<TD>
<P CLASS="cb">
Returns instance for this ScriptEase session.</P>
</TD>
</TR>
</TABLE>
<HR><TABLE>
<TR>
<TH COLSPAN="2">
<H6 CLASS="fnam">
<A NAME="998100">
 </A>
MakeWindow</H6>
</TH>
</TR>
<TR>
<TD>
<P CLASS="lkey">
DESCRIPTION</P>
</TD>
<TD>
<P CLASS="cb">
Define and create a window.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
SYNTAX</P>
</TD>
<TD>
<P CLASS="Function-Syntax">
int MakeWindow(int Parent, struct Class OR string Class, <BR>
string WindowFunction, string Text, int Style,<BR>
int Column, int Row, int Width, int Height,<BR>
BLOb CreateParm[, var UtilityVar])</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
COMMENTS</P>
</TD>
<TD>
<P CLASS="cb">
Make a window for processing during later calls to DoWindows(). The WindowClass is registered if it is an unknown class, and the WindowFunction is called by Windows for every Windows message. This is a complex function and forms the basis for all that you generally see in a Windows program.</P>
<P CLASS="cb">
<EM CLASS="Element">
Parent</EM>
 is the window handle of the parent for this new window. It is NULL to make the Window not have a parent (the desktop is the parent).</P>
<P CLASS="cb">
<EM CLASS="Element">
Class</EM>
 identifies the behavior of this window. If Class is a string then it must be the name of a pre-existing Windows class, such as &quot;edit&quot; or &quot;button&quot;. If class is a structure then the window behavior is taken from the fields you choose to set in the structure. Any structure members that you don't set or are undefined, get the default value as described below. If struct Class is undefined or is NULL then all structure elements get default values. </P>
<P CLASS="cb">
The member elements of struct Class are: </P>
<P CLASS="cb-in">
<EM CLASS="Element">
.style</EM>
 - Windows class style; default CS_HREDRAW | CS_VREDRAW </P>
<P CLASS="cb-in">
<EM CLASS="Element">
.icon</EM>
 - Icon to appear when window is minimized; default NULL for no bitmap icon </P>
<P CLASS="cb-in">
<EM CLASS="Element">
.curso</EM>
r - Cursor to appear when over this window; default is LoadCursor(NULL,IDC_ARROW) </P>
<P CLASS="cb-in">
<EM CLASS="Element">
.background</EM>
 - Background color of this window; default is GetStockObject(WHITE_BRUSH)</P>
<P CLASS="cb">
<EM CLASS="Element">
WindowFunction</EM>
 is the name of a ScriptEase function that will be called every time Windows sends a message to this new window. If WindowFunction is NULL then no ScriptEase function is called and the Windows default functions will be called. Your defined WindowFunction should return an integer or return nothing, and must have this format: </P>
<P CLASS="ciTable">
int WindowFunction(Handle,Message,Param1,Param2,UtilityVar)</P>
<P CLASS="Indented">
<EM CLASS="Element">
Handle</EM>
: Window handle for window receiving this message </P>
<P CLASS="Indented">
<EM CLASS="Element">
Message</EM>
: The message ID </P>
<P CLASS="Indented">
<EM CLASS="Element">
Param1</EM>
: First parameter for this Message ID </P>
<P CLASS="Indented">
<EM CLASS="Element">
Param2</EM>
: Second parameter for this Message ID </P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
&nbsp;</P>
</TD>
<TD>
<P CLASS="Indented">
<EM CLASS="Element">
UtilityVar</EM>
 - is any variable that you choose to make available to the WindowFunction. This may be any kind of variable, including a structure if you want to pass many values to the WindowFunction. WindowFunction may also alter UtilityVar. If this parameter is not supplied, then no such additional variables will be available to the WindowFunction(). </P>
<P CLASS="cb">
If your function returns a value, then the default Windows function is not called. If your WindowFunction DOES NOT return a value, then the default Window function or the string Class default function is called. WindowFunction is always called before the default function, except when the String Class is used. When the String Class is used,  WM_CREATE messages (and other messages sent during Windows' calls to the CreateWindow() function) are not received by your function. </P>
<P CLASS="cb">
Note that MultiTask is OFF when this function is called; no other window will get processor time until your routine is done. </P>
<P CLASS="cb">
<EM CLASS="Element">
Text</EM>
 is the window caption or text. This may be set to NULL.</P>
<P CLASS="cb">
<EM CLASS="Element">
Style</EM>
 is the window style, as defined by the WS_xxxx values in Windows.hmm. </P>
<P CLASS="cb">
<EM CLASS="Element">
Col</EM>
 and <EM CLASS="Element">
Row</EM>
 describe the upper-left corner for the window when it is created. Use CW_USEDEFAULT to let Windows choose the position. </P>
<P CLASS="cb">
<EM CLASS="Element">
Width</EM>
 and <EM CLASS="Element">
Height</EM>
 describe the window size. Use CW_USEDEFAULT to let Windows choose the position. </P>
<P CLASS="cb">
<EM CLASS="Element">
CreateParm</EM>
 is an integer or a BLOb to data to pass with the WM_CREATE message. It is usually NULL. </P>
<P CLASS="cb">
<EM CLASS="Element">
UtilityVar</EM>
 - If you wish to pass additional variables to the function that handles the subclassed (or created) window's messages, put them here. </P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
MODIFY</P>
</TD>
<TD>
<P CLASS="cb">
Your WindowFunction() may modify UtilityVar.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
RETURN</P>
</TD>
<TD>
<P CLASS="cb">
On success, returns WindowHandle of the created window. Returns NULL for failure.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
EXAMPLE</P>
</TD>
<TD>
<P CLASS="cb">
See DoWindows() for an example.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
SEE ALSO</P>
</TD>
<TD>
<P CLASS="cb">
DoWindows(), BaseWindowFunction()</P>
</TD>
</TR>
</TABLE>
<HR><TABLE>
<TR>
<TH COLSPAN="2">
<H6 CLASS="fnam">
<A NAME="998099">
 </A>
MessageFilter</H6>
</TH>
</TR>
<TR>
<TD>
<P CLASS="lkey">
DESCRIPTION</P>
</TD>
<TD>
<P CLASS="cb">
Restrict message handled by ScriptEase window functions.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
SYNTAX</P>
</TD>
<TD>
<P CLASS="Function-Syntax">
int[] MessageFilter(int WinHandle, int MessageID1[, <BR>
int MessageID2[, int MessageID3[,...]]])</P>
<P CLASS="Function-Syntax">
int[] MessageFilter(int WinHandle, int[] MessageIDs)</P>
<P CLASS="Function-Syntax">
int[] MessageFilter(int WinHandle)    // remove all message filters</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
COMMENTS</P>
</TD>
<TD>
<P CLASS="cb">
This function restricts the messages handled by ScriptEase for a window created with MakeWindow() or subclassed with SubclassWindow(). When Windows sends lots of messages, but you're only interested in handling a few of them within ScriptEase code, you can increase performance by specifying only those messages you want to handle in MessageFilter(). Any messages that have not been specified to MessageFilter() will not be handle by your WindowFunction and might not cause DoWindows() to return immediately (if Peek==False). Initially, there are no message filters so all messages are processed by ScriptEase. </P>
<P CLASS="cb">
To remove all message filters, so that all messages are passed through to the ScriptEase handler, use the third form of MessageFilter(). </P>
<P CLASS="cb">
<EM CLASS="Element">
WinHandle</EM>
 is handle for a windows created with MakeWindow() or subclassed with SubclassWindow(). </P>
<P CLASS="cb">
<EM CLASS="Element">
MessageID1</EM>
, <EM CLASS="Element">
MessageID2</EM>
,... are messages to be added to those being filtered. </P>
<P CLASS="cb">
<EM CLASS="Element">
MessageIDs</EM>
 is an array of messages to be added to those being filtered.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
RETURN</P>
</TD>
<TD>
<P CLASS="cb">
Returns an array of messages begin filtered prior to taking this call. Returns NULL if no messages are in the filter (i.e., all messages are passed through to ScriptEase functions) or if WinHandle is not a handle from a MakeWindow() or SubclassWindow() window.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
SEE ALSO</P>
</TD>
<TD>
<P CLASS="cb">
DoWindows(), BaseWindowFunction(), MakeWindow(), SubclassWindow()</P>
</TD>
</TR>
</TABLE>
<HR><TABLE>
<TR>
<TH COLSPAN="2">
<H6 CLASS="fnam">
<A NAME="998101">
 </A>
ScreenHandle</H6>
</TH>
</TR>
<TR>
<TD>
<P CLASS="lkey">
DESCRIPTION</P>
</TD>
<TD>
<P CLASS="cb">
Get Windows' handle for the ScriptEase text screen.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
SYNTAX</P>
</TD>
<TD>
<P CLASS="cb">
int ScreenHandle()</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
RETURN</P>
</TD>
<TD>
<P CLASS="cb">
Returns handle the for ScriptEase text window corresponding to stdout.</P>
</TD>
</TR>
</TABLE>
<HR><TABLE>
<TR>
<TH COLSPAN="2">
<H6 CLASS="fnam">
<A NAME="998102">
 </A>
<A NAME="23523">
 </A>
SubClassWindow</H6>
</TH>
</TR>
<TR>
<TD>
<P CLASS="lkey">
DESCRIPTION</P>
</TD>
<TD>
<P CLASS="cb">
Hook into Window function for any window.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
SYNTAX</P>
</TD>
<TD>
<P CLASS="Function-Syntax">
bool SubclassWindow(int WindowHandle, <BR>
string WindowFunction[, var UtilityVar])</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
COMMENTS</P>
</TD>
<TD>
<P CLASS="cb">
This function will hook the specified WindowFunction() into the message loop for this window such that your function is called before the window's default or previously-defined function. </P>
<P CLASS="cb">
This function may be used to subclass any Window that is not already being managed by a WindowFunction for this ScriptEase instance. If the windows was created with MakeWindow() or is already subclassed then this function will fail. Note that this function may be used (but only once) with the window handle returned by ScreenHandle(). If you want to subclass the main ScriptEase window, it is best to open another instance of ScriptEase and subclass that rather than to subclass the instance that is powering your script. (Although it is possible to subclass that window, if you try to do anything with it you'll most likely get caught up in an infinite loop and hang). </P>
<P CLASS="cb">
<EM CLASS="Element">
WindowHandle</EM>
 is the window handle of the existing window to subclass. </P>
<P CLASS="cb">
<EM CLASS="Element">
WindowFunction</EM>
 is the same as in the MakeWindow() function. See MakeWindow(). Note that, as in the MakeWindow()function, if this function returns a value, then the default or subclassed function is not called. If this function returns no value then call is passed on to the previous function. </P>
<P CLASS="cb">
Use BreakWindow() to undo the window subclassing, or remove WindowFunction from the message loop.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
MODIFY</P>
</TD>
<TD>
<P CLASS="cb">
Your WindowFunction() may modify UtilityVar.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
RETURN</P>
</TD>
<TD>
<P CLASS="cb">
Returns boolean False if WindowHandle is invalid, was created with MakeWindow(), or is already Subclassed with this function; else return boolean True</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
SEE ALSO</P>
</TD>
<TD>
<P CLASS="cb">
DoWindows(), BaseWindowFunction(), BreakWindow(), MakeWindow(), MessageFilter()</P>
</TD>
</TR>
</TABLE>
<HR><TABLE>
<TR>
<TH>
<H6 CLASS="fnam">
<A NAME="998103">
 </A>
WindowList</H6>
</TH>
<TH>
<H6 CLASS="cHead">
&nbsp;</H6>
</TH>
</TR>
<TR>
<TD>
<P CLASS="lkey">
DESCRIPTION</P>
</TD>
<TD>
<P CLASS="cb">
Retrieve list of window handles.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
SYNTAX</P>
</TD>
<TD>
<P CLASS="cb">
int[] WindowList([int WinHandle])</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
COMMENTS</P>
</TD>
<TD>
<P CLASS="cb">
This function returns a list of parent window handles if WinHandle is not supplied or if WinHandle is NULL, else it returns an array of all child windows of WinHandle.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="lkey">
RETURN</P>
</TD>
<TD>
<P CLASS="cb">
Returns NULL if no window handles, else returns array of handles.</P>
</TD>
</TR>
</TABLE>
<DIV>
<HR>
<H3 CLASS="SubTopic">
Useful 32-bit Windows Libraries</H3>
<P CLASS="Body">
For Windows 95 and Windows NT, there is a set of useful ScriptEase libraries that includes wrappers for most of the common Windows 32 DLLs. These libraries are text files, and a more detailed explanation of the functions contained in each library appears at the beginning of each. The supplied ScriptEase sample scripts provide examples of how these functions are to be used. Additional libraries (and sample scripts) are available for download from Nombas' Website at:</P>
<P CLASS="Body">
http://www.nombas.com/download</P>
<P CLASS="Body">
32-bit Windows Libraries</P>
<TABLE>
<TR>
<TD>
<P CLASS="cb">
BMP.hmm</P>
</TD>
<TD>
<P CLASS="cb">
Library of routines for working with bitmaps (.BMP files).</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="cb">
Clipbrd.hmm</P>
</TD>
<TD>
<P CLASS="cb">
Routines for working with the Clipboard.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="cb">
Comm32.hmm</P>
</TD>
<TD>
<P CLASS="cb">
Library of routines for accessing COM ports.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="cb">
DDE.hmm</P>
</TD>
<TD>
<P CLASS="cb">
Library of common routines and definitions for Dynamic Data Exchange (DDE).</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="cb">
DDEcli.hmm</P>
</TD>
<TD>
<P CLASS="cb">
Library of routines for a DDE client.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="cb">
DDEsrv.hmm</P>
</TD>
<TD>
<P CLASS="cb">
Library of routines for a DDE server.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="cb">
Dlgctrl.hmm</P>
</TD>
<TD>
<P CLASS="cb">
Library of functions for controlling dialog boxes via child windows (i.e., buttons etc.).</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="cb">
DropSrc.hmm</P>
</TD>
<TD>
<P CLASS="cb">
Library of functions to facilitate drag-and-drop operations.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="cb">
ExcelOLE.hmm</P>
</TD>
<TD>
<P CLASS="cb">
Functions for working with OLE Automation in Microsoft Excel.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="cb">
GDI.hmm</P>
</TD>
<TD>
<P CLASS="cb">
Routines for working with some of Window's graphics routines.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="cb">
GloblMem.hmm</P>
</TD>
<TD>
<P CLASS="cb">
Functions to work with Windows' global memory resources.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="cb">
HotKey.hmm</P>
</TD>
<TD>
<P CLASS="cb">
Library of functions to simplify the creation of keyboard shortcuts.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="cb">
Icon.hmm</P>
</TD>
<TD>
<P CLASS="cb">
Routines useful for working with icons.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="cb">
Inputbox.hmm</P>
</TD>
<TD>
<P CLASS="cb">
Routines to allow the creation of simple input and information boxes (windows).</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="cb">
KeyPush.hmm</P>
</TD>
<TD>
<P CLASS="cb">
Routines to control or mimic the pushing of keys on the keyboard. The functions in this library work by sending virtual keystrokes to the active window.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="cb">
MenuCtrl.hmm</P>
</TD>
<TD>
<P CLASS="cb">
Functions for creating and controlling window menus.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="cb">
Message.hmm</P>
</TD>
<TD>
<P CLASS="cb">
ScriptEase code wrapper for the SendMessage() and PostMessage() Windows functions. With these routines, any message can be sent or posted to any window.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="cb">
Mouseclk.hmm</P>
</TD>
<TD>
<P CLASS="cb">
Windows 32 routines to control, or mimic, the pushing of mouse buttons.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="cb">
Msgbox.hmm</P>
</TD>
<TD>
<P CLASS="cb">
Library to provide the Windows MessageBox() function, to allow creation of simple message boxes.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="cb">
OptParms.hmm</P>
</TD>
<TD>
<P CLASS="cb">
Library of routines for parsing the optional parameters for executing a program. #included in other files</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="cb">
PickFile.hmm</P>
</TD>
<TD>
<P CLASS="cb">
Routines for the GetOpenFileName() function in the Windows Common Dialog DLL.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="cb">
Progman.hmm</P>
</TD>
<TD>
<P CLASS="cb">
Library for interacting with Program Manager through DDE.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="cb">
Registry.hmm</P>
</TD>
<TD>
<P CLASS="cb">
Functions for working with 32 bit Windows' registry.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="cb">
Shellexe.hmm</P>
</TD>
<TD>
<P CLASS="cb">
This library can be included in your source file to provide access to Windows' ShellExecute() function.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="cb">
Struct.hmm</P>
</TD>
<TD>
<P CLASS="cb">
Shortcut routines for structure initialization.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="cb">
Textboss.hmm</P>
</TD>
<TD>
<P CLASS="cb">
Functions for controlling a windowed NT (DOS) console session. Read the screen and send keystrokes. Most of these functions switch the console window to the foreground to operate.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="cb">
Window.hmm</P>
</TD>
<TD>
<P CLASS="cb">
Common defines for creating and defining windows using ScriptEase's MakeWindow, BreakWindow, and DoWindows functions.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="cb">
WinExec.hmm</P>
</TD>
<TD>
<P CLASS="cb">
A wrapper library for Windows' WinExec() function. This file is #included in other sample files.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="cb">
WinTools.hmm</P>
</TD>
<TD>
<P CLASS="cb">
Functions for setting the state of Windows.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="cb">
WinUtil.hmm</P>
</TD>
<TD>
<P CLASS="cb">
A small selection of utilities that may be #included in ScriptEase code to get simple access to Windows DLL functions.</P>
</TD>
</TR>
</TABLE>
<P CLASS="Body">
&nbsp;</P>
</DIV>
</DIV>
<TABLE WIDTH="225" BORDER="0" CELLSPACING="0" CELLPADDING="0">
  <TR>
    <TD WIDTH="71"><a href="b-win3lb.htm"><IMG SRC="prev.gif" WIDTH="71" height="18" border="0"></a></TD>
    <TD WIDTH="80"><a href="../index.htm"><IMG SRC="tocidx.gif" WIDTH="80" height="18" border="0"></a></TD>
    <TD WIDTH="74"><a href="d-unixlb.htm"><IMG SRC="next.gif" WIDTH="74" height="18" border="0"></a></TD>
  </TR>
</TABLE>

</BODY>
</HTML>
