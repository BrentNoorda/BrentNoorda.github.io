<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" /><title>Nombas</title>

<meta name="description" content="All about Nombas, the scripting company that no longer exists." />
<meta name="keywords" content="nombas,cmm,cenvi,scriptease,javascript,ecmascript,brent noorda" />
<style type="text/css">
<!--
body {
 font: 100% Verdana, Arial, Helvetica, sans-serif;
 background: #666666;
 margin: 0; /* it's good practice to zero the margin and padding of the body element to account for differing browser defaults */
 padding: 0;
 text-align: center; /* this centers the container in IE 5* browsers. The text is then set to the left aligned default in the #container selector */
 color: #000000;
 background-color: #000000;
 background-image: url(images/blot100.gif);
}
.oneColElsCtr #container {
 width: 46em;
 background: #FFFFFF;
 margin: 0 auto; /* the auto margins (in conjunction with a width) center the page */
 border: 1px solid #000000;
 text-align: left; /* this overrides the text-align: center on the body element. */
 border-radius: 15px;
 -moz-border-radius: 15px;
 margin-top: 10px;
 margin-bottom: 10px;
}
.oneColElsCtr #mainContent {
 padding: 0 20px; /* remember that padding is the space inside the div box and margin is the space outside the div box */
}
.style1 {font-size: xx-small}
li {
    padding-bottom: 0.5em;
}
-->
</style>
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-1754630-10']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script></head>
<body class="oneColElsCtr">
<div id="container">
<div id="mainContent">
<h1> <img alt="" src="images/smlogo.gif" align="right" height="109" width="238" /> Nombas,<br />Un-Incorporated </h1>
<p>Nombas
doesn't exist any more. All the good stuff was sold to Openwave, then
sold to someone else, then sold to someone else, then I lost track.</p>
<p>Sorry about that.</p>

<table style="width:85%;margin-right:auto;margin-left:auto;"><tr><td style="background-color:#F0FFFF;border:1px solid purple;font-size:80%;padding:6px;">
<p>Update, Aug 19, 2022:
</p><p>I probably created this page 11 or more years ago (although I see one update in 2014).
By then I’d already been out of the hardcore JavaScript world for many years (what
is ECMAScript up to now, version 89?, I don’t even know).
</p><p>I’m updating this now because <a href="https://www.nasa.gov/mission_pages/webb/main/index.html">JWST (James Webb Space Telescope)</a> launched almost
a year ago, and lately more lay-ish people have taken notice that the Nombas engine is
controlling a lot of what goes on in the satellite and between the earth and the
satellite. It was nearly two decades between our first getting involved, until JWST
finally launched, with delay after delay. I wondered sometimes if it was ever going to fly.
</p><p>I find much of the coverage (like <a href="https://www.theverge.com/2022/8/18/23206110/james-webb-space-telescope-javascript-jwst-instrument-control">this article in The Verge yesterday</a>) thrilling.
I’m extremely proud to have been involved. But it’s also common for people to sense concern that
NASA’s $10 billion telescope is running on ancient software, with a language not known
for its reliability, and created by a fly-by-night company that no longer exists.
</p><p>To very briefly address those concerns:
</p><ul><li>The initial version of the ScriptEase software began in the early 1990’s
(1991 or 1992, I think). By the time NASA used it it had gone through a dozen years
and 5 major releases (their 5.00e version being the 5th minor release of version 5).
</li><li>Although JavaScript is not known for it’s robustness, over the 12 years
we’d been working on it we debugged the crap out of that engine, and we provided compile
time options to allow developers to avoid many of the error-prone flaws built into the
official ECMAScript specification and to detect such errors early.
</li><li>Until the end of 2018, I continued to consult with NASA over every mission,
code, and test change.
</li></ul><p>It is my opinion that NASA settled on the Nombas engine, after extensive
research of their own into all the options available at the time, not so much because of the JavaScript language
itself (although the familiarity of the language was a bonus), but because of the solid
and robust nature of the ScriptEase engine and the tools that went with it.
</p><p>At Nombas, went to extremes to make software as unbreakable as possible. This started with
good code and good coders, and was stressed to software limits by what we called
“the server farm”, which continually ran every conceivable iteration of code input
and outputs (and countless inconceivable iterations brought about by randomness).
Our automation tests assured that everything that could go wrong was forced to go
wrong, and that the engine recovered in the proper way to the controlling script
or processor, with no crashes, no loss of memory (we actually ensured that every
single memory allocation would recover from failure based on total size, count,
or just randomly), and no side effects.
</p><p>You don’t want to be using the latest and flashiest software, just because
it is the latest and flashiest, only to find yourself launching astronauts to your satellite,
a million miles out into space, just to press ctrl-alt-del.
</p><td></tr><table>

<table style="width:85%;margin-right:auto;margin-left:auto;margin-top:1em;"><tr><td style="background-color:#F0FFFF;border:1px solid purple;font-size:80%;padding:6px;">
<p>Minor Update, Aug 24, 2022 (a minor little thing):
</p><p>I’ve read a few places recently that the ScriptEase engine that was selected for
JWST 20 years ago was written in C++. No, it was written in C. The early 90’s version
had been in C++, but we found C++ to be a problem for embedded systems, which were
becoming important to us. This was partly because C++ was less common at the time,
so more difficult to integrate. But the greater problem was the difficult in bullet-proofing C++ systems, due to the ease of unintended consequences, but mostly because of the exception-in-constructor problem: What to do if there’s an error (for example, out of memory) while creating a constructor? I found it very confusing, and managed differently (if at all) by the many different C++ compilers at the time. As I wrote earlier, we insisted that anything that could go wrong would to go wrong in testing, and that we would recover appropriately from that. Accomplishing this robustness goal in multiple version of C++ was too complicated.
</p><p>By the way, that original version of the engine was written in C++ interpreted the
language we called “Cmm” (for “C minus minus”). It’s a little funny to think that
Cmm was written in C++.
</p><td></tr><table>

<ul>
<li><a href="#alternative">Modern alternatives for
Nombas products</a></li>
<li><a href="#stillusing">Useful links if you're still using a Nombas product</a></li>
<li><a href="#replace">Replacements for
Nombas products</a></li>
<li><a href="#memory">Walks down memory lane</a></li><li><a href="#morestuff">More stuff</a></li>
</ul>
<hr size="2" width="100%" /><a name="alternative"></a><b>Modern
alternatives for Nombas products:</b><br />
<p>If you're in need of embeddable script engines here's some
good
options to consider:</p>
<ul>
<li>If it must be embeddable and ecmascript-compliant consider
the free and open-source <strike>engines from Adobe (they call
it ActionScript but it's really EcmaScript) or the Mozilla engines. They</strike>
V8 engine from Google. It may not be as wonderfully amazingly great as
the Nombas engine (what could ever be) but will do in a pinch.<br/><br/>
Update December 2014: Just heard about <a href="http://duktape.org/">Duktape</a> as a small,
embeddable javsacript purely in C. I haven't tried it myself, but it's specs and API look
very promising.</li>
<li>If you need a pure-Java ecmascript engine... um... I'm not
sure. I think mozilla maintains one as "rhino".</li>
<li>If
you want the smallest size and high performance, consider lua. lua is
very close to matching the original Cmm language Nombas produced.</li>
</ul>
If you were a user of CEnvi or ScriptEase Desktop:
<ul>
<li>For automating computer tasks involving interacting with
other
programs, Windows users have Windows Scripting Host, Macintosh users
have AppleScript, and xnix users have a number of shell languages. I
don't know that any push the abilities to manipulate the system quite
as much as CEnvi/SE:Desk did, but they're still very powerful and there
are a lot of developers and libraries to help out.</li>
<li>Python exists on most systems, and certainly has all the
power, and way way more libraries than CEnvi/SE:Desk ever did.</li>
<li>The two features CEnvi/SE:Desk had that I wish were in the
above options are:
<ul style="margin-top:0.5em;">
<li>ability to create standalone executables, independent of
any other engine downloads</li>
<li>ability
to call *any* DLL or shared library directly from the script language,
so that extension of any complexity may be made in the language itself</li>
</ul></li>
</ul>
<p>If you were a user of ScriptEase WebServer Edition:</p>
<ul>
<li>So
you're the guy who bought SE:WSE, huh? I've always wanted to meet you.
You'll be glad to know that server-side Javascript is making a big
comeback with node.js and a bunch of related extensions.</li>
</ul>
<p>If you were a user of Nombas distributed internet scripting
(SE:DS):</p>
<ul>
<li>For plain transmission of data between two systems, in a
way easier to implement than XML, <a href="http://json.org">JSON</a>
is the way to go.</li>
<li>For
use within web, interacting in semi-realtime, AJAX is all the rage now.
Every javascript framework makes AJAX really easy for you.</li>
<li>For the really fun stuff that SE:DS made easy, such as
moving logic around between machines as-needed, look at <a href="https://github.com/substack/dnode#readme">dnode
"freestyle r.p.c."</a>.
I haven't tried it yet myself, but from the documentation it looks to
be excellently conceived and appears to match the SE:DS philosophy and
patterns very closely. The only SE:DS concept I don't see in dnode is
the security pattern, wherein remote calls can apply a level of
security to exactly what parts of calls can be handled and what cannot
(i.e. in dnode is there a way to prevent callers from making
particularly dangerous calls, or do they have access to everything?).
The SE:DS idea that "the same code runs on the client and the server,
and can be written on one and automatically executed on the other"
seems to be pervasive in the new <a href="http://meteor.com/">meteorjs</a> "new way to build apps"--that's worth keeping an eye on.&nbsp;Yahoo's <a href="http://developer.yahoo.com/cocktails/" target="_blank">Cocktails</a> &amp; <a href="http://developer.yahoo.com/cocktails/mojito/" target="_blank">Mojito</a> also seem to be going this direction.</li>
</ul>
<p>If you used these or any lesser-known Nombas products and have
any
questions about them, contact <a href="../../index.html">Brent
Noorda</a>. I'll do what I can to help.</p>
<hr />
<p><a name="stillusing"></a><b>Useful links if you're still using a Nombas product:</b></p>
<ul>
<li><a href="devspace/index.htm">ISDK Developer
Space</a> - Manuals, Errata, Tips, and other stuff useful for
anyone who is still working with a legacy Nombas ISDK. Apologies for
links that no longer work.</li>
<li><a href="../bunchadox.htm">Old User Documents</a>
- Old&nbsp;documents for many Nombas products. If the product or
version you're using is not in this list, contact <a href="../../index.html">Brent Noorda</a> and maybe
he'll be able to locate something for you.</li>
</ul>
<hr size="2" width="100%" /><a name="replace"></a><b>Replacements for Nombas products:</b>
<ul>
<li><a href="http://en.wikipedia.org/wiki/List_of_ECMAScript_engines">List
of ECMAScript engines</a> - Look to this Wikipedia page for other
javascript engines, although only a couple have good embeddable
libraries. ScriptEase isn't there anymore--which makes me
sad--althought it still gets lots of legacy use.</li>
<li><a href="http://www.mozilla.org/rhino/">Rhino</a>
- Javascript engine written in Java. I don't know why it's not in the <a href="http://en.wikipedia.org/wiki/List_of_ECMAScript_engines">List
of ECMAScript engines</a>.</li>
<li><a href="http://www.lua.org/">lua.org</a>
- Not ecmascript, but is guided by a small/fast/embeddable/minimalist
philosopy similar to the original Cmm.</li>
<li><a href="http://nodejs.org/">node.js</a>
- Server-side javascript. It's coming back, baby! I've
been playing with node.js lately, and quite enjoy it. Imagine the fun
of turning adding a couple of the old CEnvi features, and turning into
a cross-platform desktop environment for automation, thin servers, and
so on, then CEnvi/SE:Desk would be back......</li>
<li><a href="https://github.com/substack/dnode#readme">dnode
"freestyle rpc"</a> - I really nice-looking implementation of what we used to call "distributed scripting". Perhaps <a href="http://nowjs.com/">nowjs</a> is on the right track, too. Or maybe <a href="http://meteor.com/">meteorjs</a>. Or maybe Yahoo's <a href="http://developer.yahoo.com/cocktails/" target="_blank">Cocktails</a> &amp; <a href="http://developer.yahoo.com/cocktails/mojito/" target="_blank">Mojito</a>. </li>
</ul>
<hr size="2" width="100%" /><a name="memory"></a><b>Walks
down memory lane:</b>
<ul>
<li><a href="../history/HistoryOfNombas.html">History of Nombas (opinionated)</a> - A personal memory of the story of Nombas, with bonus anecdotes and lots of editorial rants.</li><li><a href="http://web.archive.org/web/19970521062826/http://www.nombas.com/">Nombas,
May 21, 1997</a> - The oldest internet archive version of the
Nombas website. The Wayback Machine is cool! I'm kind of fond of the
change made by <a href="http://web.archive.org/web/19971210204013/http://www.nombas.com/">December,
1997</a>, especially the interview with the crotchety old man if
you're answer to the portal question was <a href="entrsite/crotchet.htm">NO</a>.
This is about when we were first showing off what we called "DSP", but
is much mor common these days as "ajax" techniques.</li>
<li><a href="../FirstLogo.html">Early Company Logo</a> - Put together very quickly when the first order came in for the first shareware product.</li>
<li><a href="https://rtnforg-my.sharepoint.com/:i:/g/personal/brent_noorda_rtnf_org/Ec5vSTJdlEtEozVzivzkHcEBMPlpju-6V5mABhLphJZ9Hw?e=COIc9Z" target="_blank">1st CEnvi Shrinkwrap Box</a> - The bottom of the box doesn't make sense unless you read its reflection in a mirror. How user-friendly is that?</li>
<li><a href="entrsite/crotchet.htm">The "I Hate
Scripting" Page</a> - Interview with the Crotchety Old Man who
hates scripting. Ptooey! Hilarious, if I do say so myself (and i do).</li>
<li><a href="../Billy_Likes_CEnvi.pdf" target="billy">Billy
Likes CEnvi</a> - The greatest fan mail ever. Young Billy gives
CEnvi 1,000,000,000 stars and contributes (in pencil-written form) a
sound library. &nbsp;I love this. Thanks, Billy.</li>
<li><a href="scriptaz/index.htm">Scripting A - Z</a>
- A good-time presentation about the state of scripting in 1997, and
what I thought the future would bring.</li>
<li><a href="otherdoc/javamagk.htm">Java, The
Illusion</a>
- A 1995 essay I wrote against the marketing of Java (a little bit
self-serving, but also a little bit true) and a follow-up where I
cave-in to Java's 2 years of success.</li>
<li><a href="http://drdobbs.com/cpp/184409368">Dr.
Dobb's first (1994) CEnvi/Cmm article</a> - Good ol' Al Stevens
recommended an early version of the standalone interpreter at about the
time it won a PC Magazine Shareware of the Year award. Good times. I
was skinny then, too.</li>
<li><a href="http://books.google.com/books?id=ezoEAAAAMBAJ&amp;pg=PA66&amp;dq=scriptease+web+server+edition+review&amp;hl=en&amp;sa=X&amp;ei=6HpFT-u3OIqjiAKqzuWzDg&amp;ved=0CEsQ6AEwAA#v=onepage&amp;q=scriptease%20web%20server%20edition%20review&amp;f=false">InfoWorld
1996 ScriptEase WebServer review</a> - This 1996 review was my
favorite not just because it was glowing, but because it showed up
while we were at a tough week at Comdex, with stiff competition at
every turn, and it provided a needed boost in the arm.</li>
<li><a href="tellme/index.htm">"Tell me about..."</a>
- Our first attempts to make a web-based pitch for why people should
use a scripting solution and why to use Nombas to do it.</li>
<li><a href="techpage/script/script.htm">Nombas
Technologies</a> - One of the final attempts to define the core
Nombas Technologies in a few pretty web pages.</li>
<li><a href="toolkit/index.htm">ISDK/Toolkit promo
pages</a> - Sales-oriented descriptions of SE:ISDK</li>
<li><a href="wmlscript/index.htm">WMLScript</a>
- The cell-phone industry made a subset of EcmaScript because they
thought javascript was too big. Even thought we disagreed we turned off
bits of our engine and pumped out a WMLScript solution. Fortunately
we're all over WMLScript now.</li><li><a href="http://www.slideshare.net/brent_noorda/java-script-anywhere" target="_blank">JavaScript Anywhere</a> - A slideshow of the primary technologies we were pushing in the early 2000's. <i>(Is it just me, or does this look like someone is trying to get acquired?)</i></li>
<li><a href="http://www.youtube.com/playlist?list=PL9DA597D9E7308250">Midas
Widget Phone</a> - Openwave did a bunch of stuff with Scriptease
(browser, test environment, and a couple of new platforms). This is the
only example I preserved (very poorly).</li></ul><hr size="2" width="100%" /><a name="morestuff"></a><b>More stuff:</b><ul><li><a href="../xfactor/xfactor.zip">X-Factor</a>
- The book "XSLT For Dummies" refers to this "X-Factor" windows
application "to help make the task of learning XSLT easier". It was
hosted at www.nombas.com but now it's here.</li>
<li><a href="../../index.html">Brent Noorda Brick Wall</a>
- More about me.</li>
</ul>
</div>
</div>
</body></html>